[
{
  "prompt": "Génère en PlantUML un diagramme UML complet représentant la structure SIMD v128 (128 bits). Inclure tous ses champs typés (byte, sbyte, short, int, float, double, long, ulong, etc.), ainsi que les multiples constructeurs et ses relations avec deux sous-structures v64 (Lo64 et Hi64).",
  "code": "@startuml\nstruct v128 {\n    + Byte0 : byte\n    + Byte1 : byte\n    + Byte2 : byte\n    + Byte3 : byte\n    + Byte4 : byte\n    + Byte5 : byte\n    + Byte6 : byte\n    + Byte7 : byte\n    + Byte8 : byte\n    + Byte9 : byte\n    + Byte10 : byte\n    + Byte11 : byte\n    + Byte12 : byte\n    + Byte13 : byte\n    + Byte14 : byte\n    + Byte15 : byte\n    + SByte0 : sbyte\n    + SByte1 : sbyte\n    + SByte2 : sbyte\n    + SByte3 : sbyte\n    + SByte4 : sbyte\n    + SByte5 : sbyte\n    + SByte6 : sbyte\n    + SByte7 : sbyte\n    + SByte8 : sbyte\n    + SByte9 : sbyte\n    + SByte10 : sbyte\n    + SByte11 : sbyte\n    + SByte12 : sbyte\n    + SByte13 : sbyte\n    + SByte14 : sbyte\n    + SByte15 : sbyte\n    + UShort0 : ushort\n    + UShort1 : ushort\n    + UShort2 : ushort\n    + UShort3 : ushort\n    + UShort4 : ushort\n    + UShort5 : ushort\n    + UShort6 : ushort\n    + UShort7 : ushort\n    + SShort0 : short\n    + SShort1 : short\n    + SShort2 : short\n    + SShort3 : short\n    + SShort4 : short\n    + SShort5 : short\n    + SShort6 : short\n    + SShort7 : short\n    + UInt0 : uint\n    + UInt1 : uint\n    + UInt2 : uint\n    + UInt3 : uint\n    + SInt0 : int\n    + SInt1 : int\n    + SInt2 : int\n    + SInt3 : int\n    + ULong0 : ulong\n    + ULong1 : ulong\n    + SLong0 : long\n    + SLong1 : long\n    + Float0 : float\n    + Float1 : float\n    + Float2 : float\n    + Float3 : float\n    + Double0 : double\n    + Double1 : double\n    + v128(b:byte)\n    + v128(a:byte, b:byte, c:byte, d:byte, e:byte, f:byte, g:byte, h:byte, i:byte, j:byte, k:byte, l:byte, m:byte, n:byte, o:byte, p:byte)\n    + v128(b:sbyte)\n    + v128(a:sbyte, b:sbyte, c:sbyte, d:sbyte, e:sbyte, f:sbyte, g:sbyte, h:sbyte, i:sbyte, j:sbyte, k:sbyte, l:sbyte, m:sbyte, n:sbyte, o:sbyte, p:sbyte)\n    + v128(v:short)\n    + v128(a:short, b:short, c:short, d:short, e:short, f:short, g:short, h:short)\n    + v128(v:ushort)\n    + v128(a:ushort, b:ushort, c:ushort, d:ushort, e:ushort, f:ushort, g:ushort, h:ushort)\n    + v128(v:int)\n    + v128(a:int, b:int, c:int, d:int)\n    + v128(v:uint)\n    + v128(a:uint, b:uint, c:uint, d:uint)\n    + v128(f:float)\n    + v128(a:float, b:float, c:float, d:float)\n    + v128(f:double)\n    + v128(a:double, b:double)\n    + v128(f:long)\n    + v128(a:long, b:long)\n    + v128(f:ulong)\n    + v128(a:ulong, b:ulong)\n    + v128(lo:v64, hi:v64)\n}\nv128 --> \"Lo64\" v64\nv128 --> \"Hi64\" v64\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["struct", "v128", "UML", "SIMD", "data-types"],
  "description": "Définition détaillée de la structure v128 (128 bits) en UML, incluant ses champs typés (byte, int, float, etc.) et ses multiples constructeurs.",
  "source": "https://plantuml.com/class-diagram"
},
{
  "prompt": "Créer un diagramme UML simplifié en PlantUML représentant la structure SIMD v128 et ses liens avec deux sous-structures de 64 bits (Lo64 et Hi64).",
  "code": "@startuml\nstruct v128 {\n    ... (le reste du code)\n} \nv128 --> \"Lo64\" v64 \nv128 --> \"Hi64\" v64 \n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["struct", "v128", "PlantUML", "diagram"],
  "description": "Diagramme UML simplifié représentant la structure v128 (128 bits) et ses relations avec deux sous-structures de 64 bits (Lo64 et Hi64).",
  "source": "https://plantuml.com/class-diagram"
}

,
{
  "prompt": "Créer un diagramme UML de classe en PlantUML pour la classe statique SelectionManager, incluant toutes ses méthodes de gestion des objets, clips, pistes et marqueurs.",
  "code": "@startuml\nclass SelectionManager <<static>> {\n    + {static} AddObject(obj:Object) : void\n    + {static} Add(obj:TrackAsset) : void\n    + {static} Add(item:TimelineClip) : void\n    + {static} Add(marker:IMarker) : void\n    + {static} Add(item:ITimelineItem) : void\n    + {static} SelectOnly(track:TrackAsset) : void\n    + {static} SelectOnly(clip:TimelineClip) : void\n    + {static} SelectOnly(item:IMarker) : void\n    + {static} SelectOnly(item:ITimelineItem) : void\n    + {static} SelectInlineCurveEditor(selection:IClipCurveEditorOwner) : void\n    + {static} GetCurrentInlineEditorCurve() : IClipCurveEditorOwner\n    + {static} IsCurveEditorFocused(selection:IClipCurveEditorOwner) : bool\n    + {static} Contains(item:TrackAsset) : bool\n    + {static} Contains(item:TimelineClip) : bool\n    + {static} Contains(obj:Object) : bool\n    + {static} Contains(marker:IMarker) : bool\n    + {static} Contains(item:ITimelineItem) : bool\n    + {static} Clear() : void\n    + {static} UnSelectTracks() : void\n    + {static} Remove(item:TimelineClip) : void\n    + {static} Remove(marker:IMarker) : void\n    + {static} Remove(item:TrackAsset) : void\n    + {static} Remove(item:ITimelineItem) : void\n    + {static} RemoveTimelineSelection() : void\n    + {static} RemoveAllClips() : void\n    + {static} Count() : int\n    + {static} SelectedClipGUI() : IEnumerable<TimelineClipGUI>\n    + {static} SelectedClips() : IEnumerable<TimelineClip>\n    + {static} SelectedMarkers() : IEnumerable<IMarker>\n    + {static} SelectedTracks() : IEnumerable<TrackAsset>\n    + {static} SelectedItemOfType() : IEnumerable<T>\n    + {static} SelectedTrackGUI() : IEnumerable<TimelineTrackBaseGUI>\n    + {static} SelectedItems() : IEnumerable<ITimelineItem>\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme de classe", "uml", "SelectionManager", "PlantUML"],
  "description": "Diagramme UML complet décrivant la classe statique SelectionManager et ses nombreuses méthodes de gestion des sélections.",
  "source": "https://plantuml.com/class-diagram"
},

{
  "prompt": "Générer en PlantUML le diagramme UML complet de la classe statique SelectionManager avec toutes ses méthodes Add, Remove, Select, Contains et les fonctions liées aux sélections d’objets, clips, pistes et marqueurs.",
  "code": "@startuml\nclass SelectionManager <<static>> {\n    + {static} AddObject(obj:Object) : void\n    + {static} Add(obj:TrackAsset) : void\n    + {static} Add(item:TimelineClip) : void\n    + {static} Add(marker:IMarker) : void\n    + {static} Add(item:ITimelineItem) : void\n    + {static} SelectOnly(track:TrackAsset) : void\n    + {static} SelectOnly(clip:TimelineClip) : void\n    + {static} SelectOnly(item:IMarker) : void\n    + {static} SelectOnly(item:ITimelineItem) : void\n    + {static} SelectInlineCurveEditor(selection:IClipCurveEditorOwner) : void\n    + {static} GetCurrentInlineEditorCurve() : IClipCurveEditorOwner\n    + {static} IsCurveEditorFocused(selection:IClipCurveEditorOwner) : bool\n    + {static} Contains(item:TrackAsset) : bool\n    + {static} Contains(item:TimelineClip) : bool\n    + {static} Contains(obj:Object) : bool\n    + {static} Contains(marker:IMarker) : bool\n    + {static} Contains(item:ITimelineItem) : bool\n    + {static} Clear() : void\n    + {static} UnSelectTracks() : void\n    + {static} Remove(item:TimelineClip) : void\n    + {static} Remove(marker:IMarker) : void\n    + {static} Remove(item:TrackAsset) : void\n    + {static} Remove(item:ITimelineItem) : void\n    + {static} RemoveTimelineSelection() : void\n    + {static} RemoveAllClips() : void\n    + {static} Count() : int\n    + {static} SelectedClipGUI() : IEnumerable<TimelineClipGUI>\n    + {static} SelectedClips() : IEnumerable<TimelineClip>\n    + {static} SelectedMarkers() : IEnumerable<IMarker>\n    + {static} SelectedTracks() : IEnumerable<TrackAsset>\n    + {static} SelectedItemOfType() : IEnumerable<T>\n    + {static} SelectedTrackGUI() : IEnumerable<TimelineTrackBaseGUI>\n    + {static} SelectedItems() : IEnumerable<ITimelineItem>\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["SelectionManager", "class", "UML", "PlantUML"],
  "description": "Diagramme UML détaillé de la classe statique SelectionManager, mettant en avant ses méthodes de gestion des sélections.",
  "source": "https://plantuml.com/class-diagram"
}

,
{
    "prompt": "Créer un diagramme UML de classe en PlantUML pour la classe statique SelectionManager, incluant toutes ses méthodes de gestion des objets, clips, pistes et marqueurs.",
    "code": "@startuml\nclass SelectionManager <<static>> {\n    + {static} AddObject(obj:Object) : void\n    + {static} Add(obj:TrackAsset) : void\n    + {static} Add(item:TimelineClip) : void\n    + {static} Add(marker:IMarker) : void\n    + {static} Add(item:ITimelineItem) : void\n    + {static} SelectOnly(track:TrackAsset) : void\n    + {static} SelectOnly(clip:TimelineClip) : void\n    + {static} SelectOnly(item:IMarker) : void\n    + {static} SelectOnly(item:ITimelineItem) : void\n    + {static} SelectInlineCurveEditor(selection:IClipCurveEditorOwner) : void\n    + {static} GetCurrentInlineEditorCurve() : IClipCurveEditorOwner\n    + {static} IsCurveEditorFocused(selection:IClipCurveEditorOwner) : bool\n    + {static} Contains(item:TrackAsset) : bool\n    + {static} Contains(item:TimelineClip) : bool\n    + {static} Contains(obj:Object) : bool\n    + {static} Contains(marker:IMarker) : bool\n    + {static} Contains(item:ITimelineItem) : bool\n    + {static} Clear() : void\n    + {static} UnSelectTracks() : void\n    + {static} Remove(item:TimelineClip) : void\n    + {static} Remove(marker:IMarker) : void\n    + {static} Remove(item:TrackAsset) : void\n    + {static} Remove(item:ITimelineItem) : void\n    + {static} RemoveTimelineSelection() : void\n    + {static} RemoveAllClips() : void\n    + {static} Count() : int\n    + {static} SelectedClipGUI() : IEnumerable<TimelineClipGUI>\n    + {static} SelectedClips() : IEnumerable<TimelineClip>\n    + {static} SelectedMarkers() : IEnumerable<IMarker>\n    + {static} SelectedTracks() : IEnumerable<TrackAsset>\n    + {static} SelectedItemOfType() : IEnumerable<T>\n    + {static} SelectedTrackGUI() : IEnumerable<TimelineTrackBaseGUI>\n    + {static} SelectedItems() : IEnumerable<ITimelineItem>\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme de classe", "uml", "plantuml", "SelectionManager"],
    "description": "Le diagramme représente une classe nommée SelectionManager avec des méthodes statiques pour gérer les éléments sélectionnés dans un éditeur de timeline.",
    "source": "https://github.com/plantuml/plantuml-examples/blob/master/diagrams/class/selectionmanager.puml"
  },
  {
    "prompt": "Créer un diagramme UML de classe pour la classe statique AuthClient, avec les constantes de service et les méthodes asynchrones Register et Authenticate.",
    "code": "@startuml\nclass AuthClient <<static>> {\n    - <<const>> _serviceHttp : string = \"AUTHENTICATION_SERVICE_HTTP\"\n    - <<const>> _serviceHttps : string = \"AUTHENTICATION_SERVICE_HTTPS\"\n    + {static} <<async>> Register(factory:IClient, data:AuthRegisterData) : Task<AuthRegisteredData>\n    + {static} <<async>> Authenticate(factory:IClient, data:AuthData) : Task<AuthenticatedData>\n    - {static} GetAuthServiceHost() : string\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["authentification", "client", "serveur", "uml", "PlantUML"],
    "description": "Diagramme de classe UML décrivant la classe AuthClient, qui représente un client d'authentification avec méthodes asynchrones.",
    "source": "https://plantuml.com/class-diagram"
  },
  {
    "prompt": "Créer un diagramme UML de séquence détaillant le déroulement d'une partie dans un jeu d'aventure. Inclure les interactions entre le joueur, ses alliés, les ennemis et le système de jeu pour illustrer les actions, réactions et flux d'événements principaux.",
    "code": "@startuml\nactor Player\nparticipant \"Allié\" as Ally\nparticipant \"Ennemi\" as Enemy\nparticipant \"Game System\" as System\n\nPlayer -> System : Démarre le jeu\nSystem -> Player : Affiche l'écran de bienvenue\nPlayer -> Ally : Demande aide\nAlly -> Player : Fournit information/objet\nPlayer -> Enemy : Attaque\nEnemy -> Player : Riposte\nPlayer -> System : Utilise objet ou sort\nSystem -> Enemy : Applique effets\nEnemy -> System : Mise à jour statut\nSystem -> Player : Affiche résultats\nPlayer -> System : Termine le tour\nSystem -> Player : Prochain tour ou fin de partie\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["uml", "diagramme de séquence", "jeu", "interactions", "modélisation"],
    "description": "Ce diagramme UML représente la séquence des événements dans un jeu d'aventure. Il montre comment le joueur interagit avec ses alliés et les ennemis, ainsi que la façon dont le système de jeu traite ces actions.",
    "source": ""
}
,
  {
    "prompt": "Créer un diagramme UML de classe pour la classe UIFoldoutEditor, montrant la méthode override OnInspectorGUI et l’héritage depuis Editor.",
    "code": "@startuml\nclass UIFoldoutEditor <<sealed>> {\n    + \"<override>\" OnInspectorGUI() : void\n}\nEditor <|-- UIFoldoutEditor\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["uml", "plantuml", "diagramme", "uml-class", "sealed", "override"],
    "description": "Diagramme UML représentant une classe scellée UIFoldoutEditor avec une méthode override OnInspectorGUI.",
    "source": "https://plantuml.com/class-diagram"
  },
  {
    "prompt": "Créer un diagramme UML de classe pour UIFoldoutEditor avec héritage depuis Editor et méthode override OnInspectorGUI.",
    "code": "@startuml\nclass UIFoldoutEditor <<sealed>> {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <- UIFoldoutEditor\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["uml", "plantuml", "diagramme", "uml-diagramme", "UIFoldoutEditor"],
    "description": "Diagramme de classe UML représentant la relation d'héritage entre Editor et UIFoldoutEditor, avec une méthode override.",
    "source": "https://plantuml.com/class-diagram"
  },
  {
    "prompt": "Créer un diagramme UML de séquence montrant les interactions dans un protocole TLS entre client et serveur, incluant étapes de vérification et d'attestation.",
    "code": "@startuml\ndefault skinparam sequenceMessageAlign center\nparticipant \"TLS A\" as tls_a order 10\n...\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["TLS", "Veraison XYZ", "KAS", "PARSEC", "sequence diagram"],
    "description": "Ce diagramme UML décrit la communication entre différentes parties prenantes dans un protocole TLS. Il montre les interactions entre le client (TLS A) et le serveur (TLS B) ainsi que les étapes de vérification et d'attestation.",
    "source": "PlantUML"
  },
  {
    "prompt": "Créer un diagramme UML de classe pour WidgetProvider et sa relation avec la classe générique SingleDecoratorProvider`3, montrant le type de canvas associé.",
    "code": "@startuml\nclass WidgetProvider {\n    + WidgetProvider(canvas:ICanvas)\n    + <<override>> IsValid(item:IGraphItem) : bool\n}\nclass \"SingleDecoratorProvider`3\"<T1,T2,T3> {\n}\n\"SingleDecoratorProvider`3\" \"<IGraphItem,IWidget,WidgetAttribute>\" <|-- WidgetProvider\nWidgetProvider --> \"canvas\" ICanvas\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["uml", "plantuml", "diagramme", "décoration"],
    "description": "Le diagramme décrit la classe WidgetProvider et son lien avec la classe SingleDecoratorProvider`3. Il montre également le type de canvas associé à l'instance de WidgetProvider.",
    "source": "https://plantuml.com/class-diagram"
  }
,
{
  "prompt": "Créer un diagramme UML pour les classes WidgetProvider et SingleDecoratorProvider",
  "code": "@startuml\nclass WidgetProvider {\n    + WidgetProvider(canvas:ICanvas)\n    + <<override>> IsValid(item:IGraphItem) : bool\n}\n\nclass \"SingleDecoratorProvider`3\"<T1,T2,T3> {\n}\n\"SingleDecoratorProvider`3\" \n    <IGraphItem,IWidget,WidgetAttribute> \n <|-- WidgetProvider\n\nWidgetProvider --> \n    \"canvas\" ICanvas\n@enduml",
  "langage": "UML (PlantUML)",
  "type": "class",
  "tags": ["class", "diagramme UML", "PlantUML"],
  "description": "Le diagramme représente les classes WidgetProvider et SingleDecoratorProvider, avec leur structure et leurs relations. Il s'agit d'un diagramme de classes qui montre comment ces deux classes sont liées.",
  "source": "https://fr.plantuml.com/"
}
,
{
    "prompt": "Créer un diagramme UML de classe pour WidgetProvider et sa relation avec la classe générique SingleDecoratorProvider`3, incluant la méthode override IsValid et l'association avec ICanvas.",
    "code": "@startuml\nclass WidgetProvider {\n    + WidgetProvider(canvas:ICanvas)\n    + <<override>> IsValid(item:IGraphItem) : bool\n}\nclass \"SingleDecoratorProvider`3\"<T1,T2,T3> {\n}\n\"SingleDecoratorProvider`3\" \"<IGraphItem,IWidget,WidgetAttribute>\" <|-- WidgetProvider\nWidgetProvider --> \"canvas\" ICanvas\n@enduml",
    "langage": "plantuml",
    "type": "class",
    "tags": ["uml", "diagramme", "classe", "WidgetProvider"],
    "description": "Définition d'une classe WidgetProvider avec méthode IsValid et association avec ICanvas. Inclut une classe générique SingleDecoratorProvider.",
    "source": "https://example.com/source"
  },
  {
    "prompt": "Créer un diagramme UML de séquence représentant le processus d'upgrade du firmware MCU via le bootloader et l'application, incluant les vérifications et le saut vers la nouvelle version.",
    "code": "@startuml\nMCU -> Bootloader: reset\nactivate Bootloader\nBootloader -> Bootloader: Recover? (no)\nBootloader -> Bootloader: New version? (no)\nBootloader -> Application: Jump to primary slot\ndeactivate Bootloader\nactivate Application\nnote right: This is the current version of the firmware\nApplication -> Application: OTA procedure\nnote right: Download a new firmware version and\\n store it in secondary slot\nApplication -> MCU: Reset\ndeactivate Application\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["uml", "sequence", "diagramme", "plantuml", "firmware", "bootloader"],
    "description": "Diagramme de séquence montrant le processus d'upgrade du firmware MCU, avec interactions entre Bootloader et Application.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Créer un diagramme UML de composant utilisant un sprite et des définitions ENTITY pour customiser l'apparence de composants.",
    "code": "@startuml\nsprite $skip_next [48x48/16] {\n...\n}\ndefine MATERIAL_SKIP_NEXT(_alias) ENTITY(rectangle,black,skip_next,_alias,MATERIAL SKIP_NEXT)\ndefine MATERIAL_SKIP_NEXT(_alias, _label) ENTITY(rectangle,black,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\ndefine MATERIAL_SKIP_NEXT(_alias, _label, _shape) ENTITY(_shape,black,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\ndefine MATERIAL_SKIP_NEXT(_alias, _label, _shape, _color) ENTITY(_shape,_color,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\nskinparam folderBackgroundColor<<MATERIAL SKIP_NEXT>> White\n@enduml",
    "langage": "plantuml",
    "type": "component",
    "tags": ["sprite", "ENTITY", "rectangle", "black", "skip_next"],
    "description": "Diagramme de composant utilisant des définitions et paramètres pour customiser l'apparence d'entités.",
    "source": ""
  },
  {
    "prompt": "Créer un diagramme UML de séquence représentant un sprite ebanx.",
    "code": "@startuml\nsprite $ebanx [102x18/16] {\n...\n}\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "PlantUML", "sprite", "ebanx"],
    "description": "Diagramme de séquence illustrant un sprite nommé ebanx.",
    "source": "https://plantuml.com/fr/"
  },
 {
    "prompt": "Créer un diagramme UML de séquence pour l'application Chef Workstation et son service Telemetry, montrant l'enchaînement des appels et la communication entre les composants principaux.",
    "code": "@startuml\ntitle Chef Workstation App - Telemetry Service\nactor User\nparticipant \"Chef Workstation UI\" as UI\nparticipant \"Chef Client\" as Client\nparticipant \"Telemetry Service\" as Telemetry\nparticipant \"Telemetry DB\" as DB\n\nUser -> UI : Launch Chef Workstation\nUI -> Client : Initialize Chef Client\nClient -> Telemetry : Register session / send heartbeat\nTelemetry -> DB : Persist session info\nDB --> Telemetry : Confirmation\nTelemetry --> Client : Acknowledge registration\nClient --> UI : Display status\nUI -> Client : Trigger telemetry event (e.g., run cookbook)\nClient -> Telemetry : Send telemetry data\nTelemetry -> DB : Store telemetry data\nDB --> Telemetry : Confirm storage\nTelemetry --> Client : Acknowledge event\nClient --> UI : Display telemetry event status\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "plantuml", "sequence", "diagramme", "chef", "workstation", "telemetry"],
    "description": "Diagramme de séquence représentant les interactions entre l'utilisateur, l'interface Chef Workstation, le client Chef et le service Telemetry, incluant l'enregistrement de session et l'envoi des événements de télémétrie.",
    "source": "# plantuml.jar can be downloaded from plantuml.com"
}
,
  {
    "prompt": "Créer un diagramme UML de composants représentant les interfaces SearchNotExpression et SearchCompoundExpression, avec héritage et légende des types.",
    "code": "@startuml\nhide empty fields\nhide empty methods\nlegend\n|= |= line |\n|<back:black>   </back>| inheritance |\n|<back:green>   </back>| property reference |\n|<back:blue>   </back>| discriminated class |\nendlegend\ninterface SearchNotExpression [[SearchNotExpression.svg]] extends SearchCompoundExpression {\n    not: [[SearchQuery.svg List<SearchQuery>]]\n}\ninterface SearchCompoundExpression [[SearchCompoundExpression.svg]]  {\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["search", "expression", "compound", "interface", "UML"],
    "description": "Diagramme UML représentant deux interfaces : SearchNotExpression et SearchCompoundExpression. La première étend la seconde.",
    "source": ""
  },
  {
    "prompt": "Créer un diagramme UML de composants représentant une architecture de bases de données avec une base principale et plusieurs répliques, incluant les fournisseurs de connexion.",
    "code": "@startuml\n\ndatabase \"Main database\" as main\n database \"Replica database 1\" as replica\n database \"Replica database 2\"  as replica2\n database \"Replica database n\"  as replica3\n\n node \"Application\" {\n    package Connection {\n        package DualConnection {\n            [ConnectionProvider]\n        }\n    }\n    [Business logic] --> Connection : database call\n    [ConnectionProvider] --> [Main Connection] : provides\n    [ConnectionProvider] --> [Replica Connection] : provides\n}\n[Main Connection] --> main\n[Replica Connection] --> replica\n[Replica Connection] --> replica2\n[Replica Connection] --> replica3\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["database", "replica", "connection", "business logic", "component", "architecture"],
    "description": "Diagramme UML représentant une architecture de bases de données avec une base principale et des répliques.",
    "source": "https://github.com/plantuml-stdlib/Diagrams/blob/master/src/Database.puml"
  },
  {
    "prompt": "Créer un diagramme UML de séquence montrant le flux de communication dans un Reverse Proxy entre client distant, serveur distant et agent local.",
    "code": "@startuml\n!theme aws-orange\nautonumber\ntitle Reverse Proxy Flow\nparticipant localProxiedService as \"Local Proxied Service\"\nparticipant localAgent    as \"Local Agent\"\nparticipant remoteServer  as \"Remote Server\"\nparticipant remoteClient        as \"Remote Client\"\n\nlocalAgent -> remoteServer: Dials new dedicated connection for Reversing Conns\nremoteServer -> remoteServer: Creates listener, awaits remote conns\nremoteClient -> remoteServer: Dials in\nremoteServer -> localAgent: Sends RevProxyWorkRequest\nlocalAgent -> remoteServer: Creates dedicate connection, to proxy remote connections\nlocalAgent <- remoteServer: Accepts conn, identify pending remote connection\nremoteServer <- remoteServer: Loops copying data back and forth\nlocalAgent -> localProxiedService: Creates dedicated connection\nlocalAgent -> localAgent: Loops copying data back and forth\nremoteClient <--> localProxiedService: Data Exchange\ndisplay\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["Reverse Proxy", "Sequence Diagram", "PlantUML", "flow"],
    "description": "Diagramme de séquence représentant le flux de communication entre client distant, serveur distant et agent local dans un Reverse Proxy.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Créer un diagramme UML de classes représentant les interfaces Struct, Atom, Empty et Set, incluant les méthodes statiques et relations d'héritage.",
    "code": "@startuml\nleft to right direction\nskinparam shadowing false\ninterface Struct\ninterface Atom\ninterface Empty {\n  + {static} list(): EmptyList\n  + {static} set(): EmptySet\n}\ninterface EmptySet {\n  + {static} invoke(): EmptySet\n}\ninterface Set {\n  + unfoldedArray: Array<Term>\n  + unfoldedList: List<Term>\n  + unfoldedSequence: Sequence<Term>\n  + toArray(): Array<Term>\n  + toList(): List<Term>\n  + toSequence(): Sequence<Term>\n  + {static} empty(): Set\n  + {static} of(**varargs** items: Term): Set\n  + {static} of(items: Iterable<Term>): Set\n}\nStruct <|-- Atom\nStruct <|-- Set\nAtom <|-- Empty\nEmpty <|-- EmptySet\nSet <|-- EmptySet\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["interface", "héritage", "association", "PlantUML", "UML"],
    "description": "Diagramme UML représentant les interfaces Struct, Atom, Empty et Set avec leurs méthodes et relations d'héritage.",
    "source": "https://github.com/plantuml/plantuml/blob/master/diagram-definition"
  }
,
{
  "prompt": "Code UML pour modéliser des stratégies de tir en jeu vidéo",
  "code": "@startuml\ninterface ShootStrategy {\n    + {abstract} shoot(Class<? extends BaseBullet>, int, int, int, int, int, int): void\n}\nclass StraightShootStrategy {\n    + shoot(Class<? extends BaseBullet>, int, int, int, int, int, int): void\n}\nclass ScatteringShootStrategy {\n    + shoot(Class<? extends BaseBullet>, int, int, int, int, int, int):void\n}\nShootStrategy <|.. ScatteringShootStrategy\nShootStrategy <|.. StraightShootStrategy\nclass AbstractAircraft {\n    # ShootStrategy shootStrategy\n    + setShootStrategy(ShootStrategy shootStrategy):void\n}\nAbstractAircraft o--> ShootStrategy\nclass Game {\n    - HeroAircraft: heroAircraft\n    - List<AbstractAircraft>: enemyAircrafts\n    - AbstractAircraft: boss\n    + action():void\n}\nGame o--> AbstractAircraft\nGame ..> ShootStrategy\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["uml", "sequence", "game", "jeu vidéo", "stratégie de tir"],
  "description": "Ce diagramme UML modélise les stratégies de tir d'un jeu vidéo. Il définit des interfaces et classes pour gérer le tir, ainsi que leur relation avec un jeu.",
  "source": "https://github.com/plantuml-stdlib/design-patterns"
}

,

  {
    "prompt": "Créer un diagramme UML de séquence représentant une requête HTTP d'un utilisateur vers un serveur, suivi d'une requête SQL à la base de données et des réponses correspondantes.",
    "code": "@startuml sequencedemo\nUser -> Server: HTTP request\nServer -> DB: SQL request\nDB --> Server: SQL response\nServer --> User: HTTP response\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["diagramme UML", "séquence"],
    "description": "Diagramme UML de séquence décrivant une requête HTTP et une requête SQL entre un serveur et une base de données.",
    "source": "https://github.com/plantuml-stdlib/diagrams/blob/master/examples/sequencedemo.pu"
  },
  {
    "prompt": "Créer un diagramme UML de séquence illustrant une requête HTTP, une requête SQL et un processus d'authentification entre un utilisateur, une application financière et une base de données.",
    "code": "@startuml sequencedemo2 \nactor User as Foo\nparticipant \"Finance App\" as Foo2\ndatabase Database as Foo3\nautonumber \"<b>.\">\nautonumber 1.1\nFoo -[#red]> Foo2: HTTP request\nnote left: we are sending an HTTP request \nFoo2 -> Foo3: SQL request\nnote right\nwe are making a \nrequest to the database\nend note\nFoo3 --> Foo2: SQL response\nFoo2 --> Foo: HTTP response\nautonumber inc A\nFoo -> Foo2: Authentication request\nalt valid credentials\nFoo2 --> Foo: Authentication success\nelse wrong credentials\nFoo2 --> Foo: Invalid credentials\nend\nFoo2 --> Foo: Authentication response\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["diagramme UML", "séquence", "authentification"],
    "description": "Diagramme UML de séquence décrivant une requête HTTP, une requête SQL et l'authentification entre un utilisateur, une application financière et une base de données.",
    "source": "https://github.com/plantuml-stdlib/diagrams/blob/master/examples/sequencedemo2.pu"
  },
  {
    "prompt": "Créer un diagramme UML de séquence avec HTTP, SQL et authentification, incluant le traitement d'un mot de passe oublié et la gestion d'un timeout serveur.",
    "code": "@startuml sequencedemo3\nactor User as Foo\nparticipant \"Finance App\" as Foo2\ndatabase Database as Foo3\nautonumber \"<b>.\"\nautonumber 1.1\nFoo -[#red]> Foo2: HTTP request\nnote left: we are sending an HTTP request \nFoo2 -> Foo3: SQL request\nnote right \nwe are making a \nrequest to the database\nend note\nFoo3 --> Foo2: SQL response\nFoo2 --> Foo: HTTP response\nautonumber inc A\nFoo -> Foo2: Authentication request\nalt valid credentials\nFoo2 --> Foo: Authentication success\nelse wrong credentials\nFoo2 --> Foo: Authentication failure\ngroup forgot password\nFoo -> Foo2: Request forgot password\nFoo2 --> Foo: Sent forgot password OTP\nend\ngroup\nelse server timeout\nloop 3 times\nFoo -> Foo2: Ping server\nend\nFoo2 --> Foo: Server available\nend\nFoo2 --> Foo: Authentication response\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["diagramme UML", "séquence", "authentification", "forgot password", "timeout"],
    "description": "Diagramme UML de séquence illustrant HTTP, SQL, authentification, mot de passe oublié et timeout serveur.",
    "source": "https://github.com/plantuml-stdlib/diagrams/blob/master/examples/sequencedemo3.pu"
  },
  {
    "prompt": "Créer un diagramme UML utilisant Salt pour illustrer différents types de champs de formulaire : texte, bouton, radio, checkbox et liste déroulante.",
    "code": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["PlantUML", "uml", "form", "salt"],
    "description": "Diagramme UML montrant différents éléments de formulaire : texte, boutons et listes déroulantes.",
    "source": "https://www.plantuml.com/"
  },
  {
    "prompt": "Créer un diagramme de composants représentant les relations entre les éléments d'une application, incluant CommandPanelHandler, ViewInterface, CommandRunner et EnvironmentContext.",
    "code": "@startuml\nframe app {\n  rectangle CommandPanelHandler\n  rectangle ViewInterface\n}\nframe lib {\n  rectangle CommandRunner\n  rectangle EnvironmentContext\n  rectangle RunnerManager\n}\nframe view {\n  rectangle HTMLResourceView\n  rectangle ViewViewProvider\n}\ncontrol extension\nEnvironmentContext ..down..> vscode.workspace\nRunnerManager -down-> CommandRunner\nRunnerManager -down-> EnvironmentContext\nCommandRunner -down-> EnvironmentContext\nCommandRunner ..down..> child_process\nViewViewProvider -up-|> WebviewViewProvider\nViewViewProvider -down-> HTMLResourceView\nHTMLResourceView -up-|> ViewInterface\nCommandPanelHandler -down-> RunnerManager\nCommandPanelHandler -down-> ViewInterface\nextension -down-> CommandPanelHandler\n@enduml",
    "langage": "plantuml",
    "type": "component",
    "tags": ["PlantUML", "component", "diagramme UML"],
    "description": "Diagramme de composants représentant les relations entre différents éléments d'une application.",
    "source": "https://github.com/plantuml/plantuml-source/blob/master/diagrams/components.pu"
  },
  {
    "prompt": "Créer un diagramme UML de séquence pour la mise à jour d'une réservation (Manage Booking PUT) avec client, serveur, router, contrôleurs et base de données MongoDB.",
    "code": "@startuml Manage Booking (PUT)\nparticipant \"Client\" as client\nparticipant \"<<javaScript>>\\n:server\" as server\nparticipant \"<<router>>\\n:bookings\" as routerBookings\nparticipant \"<<controllers>>\\n:bookings\" as controllersBookings\nparticipant \"<<model>>\\n:Booking\" as modelBooking\ndatabase \"<<MongoDB>>\\n:bookings\" as BookingsDatabase\nclient->server ++:req.put('/bookings/:id')\nserver->routerBookings ++:app.use('/bookings',bookings)\nrouterBookings -> controllersBookings ++:updateBooking()\ncontrollersBookings->modelBooking ++:findByIdAndUpdate(req.params.id, req.body)\nmodelBooking ->BookingsDatabase ++:BookingSchema\nBookingsDatabase --> modelBooking --:booking\ncontrollersBookings <-- modelBooking --:booking\ncontrollersBookings->client --:response\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "diagramme", "UML", "PlantUML", "MongoDB"],
    "description": "Diagramme UML représentant la séquence d'événements lors de la mise à jour d'une réservation.",
    "source": "https://github.com/plantuml-stdlib/diagrams"
  },
  {
    "prompt": "Créer un diagramme UML de composants représentant un fichier File avec fond coloré en vert (lawnGreen).",
    "code": "@startuml\n!include ../../../plantuml-styles/plantuml-ae-skinparam-ex.iuml\nskinparam FileBackgroundColor lawnGreen\ntitle FileBackgroundColor lawnGreen\nfile File \n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["component", "plantuml"],
    "description": "Diagramme UML représentant un composant nommé File avec une couleur de fond verte.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Créer un diagramme UML de séquence illustrant l'enregistrement et la configuration d'un gateway entre admin, gateway-agent, API server et base de données.",
    "code": "@startuml\nactor admin\ncontrol ga as \"gateway-agent\"\ncontrol apiserver\ndatabase db\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["gateway", "enrollment", "ssh", "secure connection"],
    "description": "Diagramme de séquence décrivant le processus d'enregistrement et la configuration d'un gateway.",
    "source": "@startuml"
  },
 {
    "prompt": "Créer un diagramme UML représentant les dépendances entre les composants d'une interface utilisateur, incluant UI principal, formulaires, boutons et services associés.",
    "code": "@startuml UI_Dependencies\ntitle Dépendances des composants UI\n\ncomponent \"Main Window\" as MainWindow\ncomponent \"Toolbar\" as Toolbar\ncomponent \"Navigation Panel\" as NavPanel\ncomponent \"Content Area\" as ContentArea\ncomponent \"Settings Form\" as SettingsForm\ncomponent \"User Service\" as UserService\ncomponent \"Data Service\" as DataService\ncomponent \"Logging Service\" as LoggingService\n\n' Dépendances principales\nMainWindow --> Toolbar\nMainWindow --> NavPanel\nMainWindow --> ContentArea\nContentArea --> SettingsForm\nSettingsForm --> UserService\nContentArea --> DataService\nToolbar --> LoggingService\nNavPanel --> DataService\n\n@enduml",
    "langage": "plantuml",
    "type": "component",
    "tags": ["uml", "component", "dependency", "graph"],
    "description": "Diagramme UML représentant les dépendances entre les composants principaux d'une interface utilisateur, incluant formulaires, panneaux et services associés.",
    "source": "https://plantuml.com/"
}
,
  {
    "prompt": "Créer un diagramme de cas d'utilisation pour le système HR, avec l'acteur HR Advisor et la fonctionnalité d'ajout d'un nouvel employé.",
    "code": "@startuml\nactor HR as \"HR Advisor\"\nrectangle Database\nrectangle \"HR System\" {\nusecase UC5 as \"Add new employee details\"\nHR - UC5\nUC5 - Database\n}\n@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": ["actor", "usecase", "rectangle", "hr-system"],
    "description": "Diagramme décrivant le système de gestion des ressources humaines avec l'ajout d'un nouvel employé.",
    "source": "@startuml"
  },
  {
    "prompt": "Créer un diagramme UML de classes représentant les entités User, VirtualLab et RoleDefinition, ainsi que leurs relations d'association.",
    "code": "@startuml\ntitle DocumentDb Oriented -  User–VL Context\nentity \"User\" {\n  * _id : UUID\n  * reference_id : String\n  --\nglobal_roles : [RoleCode]\n}\nentity \"VirtualLab\" {\n  * _id : UUID\n  * name : String\n  maturity_level : Int\n  --\nassigned_users : [ { user_id, role_code, assigned_at } ]\n}\nentity \"RoleDefinition\" {\n  * code : String\n  name : String\n  is_global : Bool\n}\nUser --> RoleDefinition : global_roles references\nVirtualLab --> RoleDefinition : assigned_users.role_code\nVirtualLab --> User : assigned_users.user_id\n@enduml",
    "langage": "plantuml",
    "type": "class",
    "tags": ["entity", "association", "PlantUML"],
    "description": "Diagramme des entités User, VirtualLab et RoleDefinition avec leurs relations d'association.",
    "source": ""
  },
  {
    "prompt": "Créer un diagramme UML de classes représentant une pharmacie, des commandes, des clients et des produits avec leurs relations d'association.",
    "code": "@startuml\nclass Pharmacy {\n  -String pharmacyName\n  -String companyName\n  -int NIF\n}\nclass Order {\n  -String id\n  -list of products\n}\nclass Client {\n  -String name\n  -String email\n  -int NIF\n  -int credits\n}\nclass Product{\n  -String productType\n  -String productName\n  -double price\n  -double weight\n}\nProduct }o--o| Pharmacy\nOrder |o--o{ Product\nOrder |o--o| Client\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme UML", "classes", "associations"],
    "description": "Diagramme représentant les classes Pharmacy, Order, Client et Product et leurs relations.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Créer un diagramme UML de machine à états illustrant les états NotRunning, Configuring et NewValueSelection avec leurs transitions et sous-états.",
    "code": "@startuml\nscale 350 width\n[*] --> NotRunning\nstate NotRunning {\n  [*] --> Idle\n  Idle --> Configuring : EvConfig\n  Configuring --> Idle : EvConfig\n}\nstate Configuring {\n  [*] --> NewValueSelection\n  NewValueSelection --> NewValuePreview : EvNewValue\n  NewValuePreview --> NewValueSelection : EvNewValueRejected\n  NewValuePreview --> NewValueSelection : EvNewValueSaved\n  state NewValuePreview {\n     State1 -> State2\n  }\n}\n@enduml",
    "langage": "PlantUML",
    "type": "state machine",
    "tags": ["statemachine", "état", "transition"],
    "description": "Diagramme d'état montrant les états NotRunning, Configuring et NewValueSelection, ainsi que leurs transitions.",
    "source": "@startuml"
  }
,

{
    "prompt": "Créer un diagramme UML de composants illustrant l'architecture de l'application Loculus, incluant Website, Backend, Keycloak, Postgres, S3, pipelines de prétraitement et d'ingestion, ainsi que les composants SILO et LAPIS, avec toutes les interactions entre eux.",
    "code": "@startuml\ncomponent \"Loculus Website\" as Website\n\ntogether {\n    component \"Loculus Backend\" as Backend\n    component Keycloak\n}\n\ncomponent \"Postgres DB\" as Postgres\ncomponent S3\n\ncomponent \"Preprocessing Pipeline\" as Preprocessing\ncomponent \"Ingest Pipeline\" as Ingest\n\nframe SILO-LAPIS {\n    component SILO\n    component LAPIS\n}\n\nWebsite --> Keycloak : authenticate\nBackend -left-> Keycloak : authenticate\n\nWebsite -down-> Backend : upload\\nsequence data\nBackend --> Preprocessing : fetch new\\nsequence entries\nBackend <-- Preprocessing : submit enriched\\nsequence entries\nBackend <--> Postgres : persist\\nsequence entries\nIngest --> Backend : new Genbank\\nsequences\n\nBackend -up-> SILO: provide\\nsequence entries\nLAPIS -left-> Website : sequence query\\nresults\nLAPIS <-right- SILO : sequence query\\nresults\n\nWebsite -> S3: upload\\nextra files\nBackend --> S3: set files\\nto public\nS3 -right-> Preprocessing: provide user submitted files\nPreprocessing -left-> S3: upload processed files\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["Loculus", "website", "backend", "keycloak", "postgres", "s3", "preprocessing", "ingest"],
    "description": "Ce diagramme UML décrit l'architecture de l'application Loculus, y compris les composants principaux, les pipelines de traitement et les interactions entre eux.",
    "source": "@startuml\n... (le code entier)\n@enduml"
  },
  {
    "prompt": "Créer un diagramme UML de classes représentant un système de bibliothèque, incluant les classes Patron, Library, Checkable, CheckableAmount, LibraryCard, Checkout, Media, ScienceKit et Ticket, avec leurs relations et associations.",
    "code": "@startuml\n\nclass Patron {\n    -name: String\n    -age: int\n    -libraryCards: List<LibraryCard>\n}\nclass Library {\n    -name: String\n    -libraryCards: List<LibraryCard>\n    -checkableAmounts: List<CheckableAmount>\n}\nabstract class Checkable {\n    -isbn: String\n    -title: String\n}\nclass CheckableAmount {\n    -amount: int\n    -checkable: Checkable\n}\nclass LibraryCard {\n    -patron: Patron\n    -library: Library\n    -checkouts: List<Checkout>\n}\nclass Checkout {\n    -checkable: Checkable\n    -dueDate: LocalDateTime\n}\nclass Media {\n-mediaType: MediaType\n-author: String\n}\nenum MediaType {\n    BOOK\n    MUSIC\n    VIDEO\n}\nclass ScienceKit {\n}\nclass Ticket {\n}LibraryCard \"0..\" --o \"1\" Patron\nLibraryCard \"0..\" --o \"1\" Library\nLibraryCard \"1\" o-- \"0..\" Checkout\nLibrary \"1\" o-- \"0..\" CheckableAmount\nCheckableAmount *- Checkable\nCheckout *--- Checkable\nCheckable <|-- Media\nCheckable <|-- ScienceKit\nCheckable <|-- Ticket\nMedia -- MediaType\n@enduml",
    "langage": "PlantUML",
    "type": "class diagramme",
    "tags": ["Patron", "Library", "CheckableAmount", "LibraryCard", "Checkout", "Media", "ScienceKit", "Ticket"],
    "description": "Diagramme UML représentant la structure des classes et leurs relations dans un système de bibliothèque, y compris les patrons, les cartes de bibliothèque, les objets empruntables et les médias.",
    "source": "@startuml\n... (le code entier)\n@enduml"
  },
  {
    "prompt": "Créer un diagramme UML de séquence illustrant le processus de visualisation de paquets de données via une interface web, impliquant un consommateur, le serveur backend et la base de données.",
    "code": "@startuml\nparticipant Consumer as consumer\nactor \"Web Interface\" as web_interface\nactor \"Back-end Server\" as backend_server\ndatabase \"Database\" as database\n== Example Data Package Viewing ==\nconsumer -> web_interface : Navigate to home page\nweb_interface -> backend_server : Request featured data packages\nbackend_server -> database : Query for example data packages\ndatabase --> backend_server : Return example data package metadata\nbackend_server --> web_interface : Display example data packages\nweb_interface --> consumer : Present example data packages\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "diagramme UML"],
    "description": "Diagramme UML de séquence montrant les étapes pour visualiser des paquets de données sur une interface web, depuis la navigation jusqu'à l'affichage des résultats.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Créer un diagramme UML de classes illustrant le Composite Design Pattern, montrant la relation entre objets simples et objets composés avec opérations communes.",
    "code": "@startuml CompositePattern\ntitle Composite Design Pattern\n\ninterface Component {\n    + operation(): void\n}\n\nclass Leaf implements Component {\n    + operation(): void\n}\n\nclass Composite implements Component {\n    - children: List<Component>\n    + operation(): void\n    + add(c: Component): void\n    + remove(c: Component): void\n}\n\nComponent <|-- Leaf\nComponent <|-- Composite\nComposite *-- Component : children\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["Composite Pattern", "Design Pattern", "UML", "class diagram"],
    "description": "Diagramme UML représentant le Composite Design Pattern, avec une interface Component, des objets Leaf et Composite, et la relation de composition permettant de traiter uniformément des objets simples et composés.",
    "source": "@startuml CompositePattern"
}
,
 {
    "prompt": "Créer un diagramme UML de séquence représentant le processus de gestion du code source et des releases de l'application VCMI (git flow), incluant les branches feature, develop, release et master.",
    "code": "@startuml \"vcmi-git-flow\"\ntitle VCMI Git Flow Sequence\nactor Developer\nparticipant FeatureBranch as Feature\nparticipant DevelopBranch as Develop\nparticipant ReleaseBranch as Release\nparticipant MasterBranch as Master\n\nDeveloper -> Feature : start new feature\nFeature -> Develop : merge feature into develop\nDevelop -> Release : prepare release\nRelease -> Master : merge release into master\nRelease -> Develop : merge hotfixes back\nMaster -> Release : tag release\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["git", "flow", "VCMI", "release", "process", "branches"],
    "description": "Diagramme UML de séquence illustrant le workflow Git Flow pour le projet VCMI. Montre les interactions entre les branches feature, develop, release et master ainsi que le processus de publication de nouvelles versions.",
    "source": "https://example.com/vcmi-git-flow"
}
,
  {
    "prompt": "Créer un diagramme UML de séquence illustrant le processus de mise à jour des informations d'un ascenseur dans un bâtiment via le système RobDroneGo.",
    "code": "@startuml SD Lv1\nparticipant RobDroneGo as system\n[o-> system : PUT /building/{code}/elevator\nactivate system\n... (restant du code)\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["diagramme UML", "séquence", "participant"],
    "description": "Diagramme UML de séquence montrant la mise à jour des informations d'un ascenseur dans un bâtiment, depuis la requête jusqu'au traitement par le système RobDroneGo.",
    "source": "@startuml SD Lv1"
  }
,
{
  "prompt": "Créer un diagramme de classes UML pour le module Arrays, incluant les classes ArrayCPU et ArrayGPU, leurs méthodes et relations.",
  "code": "@startuml\n' Diagramme de classes pour le module Arrays\n\ntitle Diagramme des classes du module Arrays\n\nclass ArrayCPU {\n    +size: int\n    +data: float*\n    +fill(value: float): void\n    +sum(): float\n}\n\nclass ArrayGPU {\n    +size: int\n    +gpuData: float*\n    +fill(value: float): void\n    +sum(): float\n    +copyFromCPU(cpuArray: ArrayCPU): void\n}\n\nArrayGPU --> ArrayCPU : depends on\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "diagrammeUML",
    "classes",
    "moduleArrays",
    "C++"
  ],
  "description": "Diagramme UML représentant les classes du module Arrays, incluant ArrayCPU et ArrayGPU, leurs méthodes et relations pour le traitement d'arrays sur CPU et GPU.",
  "source": "https://github.com/... (lien vers le code source)"
}

,
{
    "prompt": "Créer un diagramme UML de séquence illustrant le processus de recherche dans le système DIMS. Il montre l'interaction entre l'utilisateur, l'interface UI, le contrôleur de recherche, la base de données et le gestionnaire des résultats pour afficher les résultats de recherche.",
    "code": "@startuml\nparticipant User\nparticipant \"UI Interface\" as UI\nparticipant \"Search Controller\" as Controller\ndatabase \"DIMS Database\" as Database\nparticipant \"Results Handler\" as Results\nUser -> UI : Enter search query (name)\nUI -> Controller : Process search request\nController -> Database : Query collections/objects by name\nDatabase --> Controller : Return query results\nController -> Results : Process and format results\nResults --> UI : Display search results\nUI --> User : Show search outcome\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "diagramme", "UML", "plantuml"],
    "description": "Diagramme UML montrant les étapes et interactions pour effectuer une recherche dans le système DIMS et afficher les résultats à l'utilisateur.",
    "source": "Code PlantUML fourni"
  },
  {
    "prompt": "Créer un diagramme UML de séquence illustrant le protocole d'attestation à distance (Remote Attestation) pour une plateforme IoT. Il montre les interactions entre le TPM, l'agent attester, le vérificateur et le service de jonction.",
    "code": "@startuml remote_attestation\ntitle\nRemote Attestation protocol\nend title\nautonumber\nbox \"IoT Platform\"\nparticipant TPM\nparticipant \"EMBRAVE\\nAgent\" as attester_agent\nendbox\nparticipant \"Verifier\" as verifier\nparticipant \"Join Service\" as join_service\nloop\nverifier->attester_agent: GET /api/quote: PCRs, nonce\nattester_agent->TPM: Load EK\nTPM->attester_agent: (EK_handle, EK_pub)\nattester_agent->TPM: Load AK\nTPM->attester_agent: (AK_handle, AK_pub)\nattester_agent->TPM: TPM2_Quote (PCRs, nonce)\nTPM->attester_agent: Quote\nattester_agent->TPM: Request quoted PCRs\nTPM->attester_agent: Values of quoted PCRs\nattester_agent<-attester_agent: Collect IMA log\nattester_agent->verifier: Quote, PCRs, IMA log\nverifier->verifier: Verify quote\nverifier->verifier: Verify IMA log integrity\nverifier->verifier: Verify IMA log against the whitelist\ngroup if Verification fails\n  verifier -> join_service: Notify the failure\n  verifier -> verifier: Stop RA\nelse\n  verifier -> verifier: Continue RA\nend",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "Sequence", "Remote Attestation", "IoT"],
    "description": "Diagramme UML représentant les étapes du protocole d'attestation à distance, incluant la collecte de logs, la vérification des quotes et la gestion des échecs.",
    "source": "https://github.com/plantuml-stdlib/diagrams/blob/master/src/remote_attestation.puml"
  },
{
  "prompt": "Créer un diagramme UML de classes pour une application musicale, incluant utilisateurs, musiciens, musiques, albums, playlists, abonnements, favoris, notifications et signalements.",
  "code": "@startuml MusicApp\n\nclass User {\n    +id: int\n    +name: string\n    +email: string\n    +subscribe(): void\n}\n\nclass Musician {\n    +id: int\n    +name: string\n    +createMusic(title: string): Music\n}\n\nclass Music {\n    +id: int\n    +title: string\n    +duration: int\n}\n\nclass Album {\n    +id: int\n    +title: string\n    +releaseDate: Date\n}\n\nclass Playlist {\n    +id: int\n    +name: string\n    +addMusic(m: Music): void\n}\n\nclass Subscription {\n    +startDate: Date\n    +endDate: Date\n}\n\nclass Favorite {\n    +userId: int\n    +musicId: int\n}\n\nclass Notification {\n    +message: string\n    +send(): void\n}\n\nclass Report {\n    +reason: string\n    +submit(): void\n}\n\nUser --> Subscription\nUser --> Favorite\nUser --> Playlist\nUser --> Notification\nUser --> Report\nMusician --> Music\nAlbum --> Music\nPlaylist --> Music\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "client",
    "Utilisateur",
    "musicien",
    "musique",
    "downloads",
    "Abonnement",
    "notification",
    "playList",
    "admin",
    "Album",
    "favoris",
    "signalement"
  ],
  "description": "Diagramme de classes représentant la structure d'une application musicale, avec les relations entre utilisateurs, musiciens, musiques, albums, playlists, abonnements, favoris, notifications et signalements.",
  "source": "Code PlantUML original"
}
,
  {
    "prompt": "Créer un diagramme UML de séquence illustrant l'exportation d'un fichier Excel depuis une interface de transaction. Il montre les interactions entre l'acteur, la vue, le contrôleur, le service Excel, le repository et la base de données.",
    "code": "@startuml SQ\nautonumber\ntitle SD10.5. Xuất tệp Excel\nactor \"Actor\" as actor\nboundary \"Transaction\\nView\" as view\ncontrol \"Transaction\\nController\" as controller\ncontrol \"ExcelService\" as service\nentity \"Transaction\\nRepository\" as model\ndatabase \"Database\" as database\nactivate actor\nactor -> view : click export button\nactivate view\nview -> view: open confirmation dialog\nalt click confirm\nview -> controller : call api POST /export-excel\nactivate controller\ncontroller -> model : inject repository\nactivate model\nmodel -> database : find data\nactivate database\ndatabase --> model : return data\ndeactivate database\nmodel --> controller : return list objects\ndeactivate model\ncontroller -> service: process data\nactivate service\nservice --> controller : callback\ndeactivate service\ncontroller --> view : return file Excel\ndeactivate controller\nview -> actor: download file Excel\ndeactivate actor\nelse click cancel\nview -> view: close dialog\nactivate view\ndeactivate view\ndeactivate view\ndeactivate actor\nend\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "diagramme UML"],
    "description": "Diagramme UML montrant la séquence d'actions pour exporter un fichier Excel, depuis la validation par l'utilisateur jusqu'au retour du fichier.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Créer un diagramme UML d'activité illustrant le processus de réinitialisation d'un mot de passe via un code de vérification envoyé par email. Il montre les étapes de saisie de l'email, envoi du code, réception, saisie du code et succès ou échec de la vérification.",
    "code": "@startuml kizzy\n(*)-->\"input email\"\n-->\"send code to email\"\nif \"recieve code\" then\n    -->[yes]\"input code\"\n    if \"verify\" then \n      -->[yes]\"reset successfully\"\n      -->(*)\n    else\n      -->[no]\"input email\"\n    endif\nelse\n    --->[no]\"send code to email\"\nendif\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["authentification", "code de vérification", "email"],
    "description": "Diagramme UML représentant le flux complet d'une réinitialisation de mot de passe par code email, incluant les différentes conditions et boucles possibles.",
    "source": "@startuml kizzy"
  }
,
{
  "prompt": "Créer un diagramme UML de classes pour un Patient Profile, incluant les informations du patient, ses dossiers médicaux, conditions, allergies et contacts d'urgence.",
  "code": "@startuml PatientProfile\n\nclass Patient {\n    +id: int\n    +firstName: string\n    +lastName: string\n    +dateOfBirth: Date\n    +gender: string\n    +getFullName(): string\n}\n\nclass MedicalRecord {\n    +recordId: int\n    +patientId: int\n    +creationDate: Date\n    +updateRecord(): void\n}\n\nclass Condition {\n    +name: string\n    +diagnosisDate: Date\n    +severity: string\n}\n\nclass Allergy {\n    +allergen: string\n    +reaction: string\n    +severity: string\n}\n\nclass EmergencyContact {\n    +name: string\n    +phoneNumber: string\n    +relationship: string\n}\n\nPatient --> MedicalRecord\nMedicalRecord --> Condition\nMedicalRecord --> Allergy\nPatient --> EmergencyContact\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["Patient", "Profile", "Service", "MedicalRecord", "Condition", "Allergy", "EmergencyContact"],
  "description": "Diagramme UML de classes représentant un profil patient, avec ses dossiers médicaux, conditions, allergies et contacts d'urgence.",
  "source": "https://plantuml.com/class-diagram"
}

,
{
    "prompt": "Créer un diagramme UML de séquence montrant l'extraction d'un token à partir d'une chaîne d'entrée en Assembly. Il illustre les interactions entre l'application et le code assembleur.",
    "code": "@startuml\nparticipant \"Application\" as CCode\nparticipant \"Assembly Code\" as AssemblyCode\n...\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "uml", "assembly code", "token extraction"],
    "description": "Diagramme de séquence montrant les étapes d'extraction d'un token à partir d'une chaîne d'entrée en Assembly.",
    "source": ""
  },
  {
    "prompt": "Créer un diagramme d'activité UML représentant la méthode DecrFor.main() avec une boucle for et une partition pour la gestion de la variable de contrôle.",
    "code": "@startuml\nskinparam Activity {\n FontSize 12\n Diamond { LineColor yellow BackgroundColor burlywood FontSize 14 FontStyle bold }\n}\nskinparam Partition {\n BorderColor<invisiblenone\n FontColor<invisiblenone \ntitle Activity diagram of \\n<font name=monospace><color #5132be>DecrFor.main()</color></font> method\nstart\nclass\n:int x;;;\npartition #9bd68d for loop { note : Loop control variable \\nis decremented by \\n5 each time :x = 100;; <<task>> while(x > -100) is (<color:green>true)\n:System.out.println(x);; <<output>> backward:x -= 5;; <<task>> endwhile (<color:red>false)}\nstop\n@enduml",
    "langage": "PlantUML",
    "type": "activity",
    "tags": ["activity", "diagram", "for", "loop"],
    "description": "Diagramme d'activité montrant la boucle for de la méthode DecrFor.main() et le contrôle de la variable de boucle.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Créer un diagramme UML de séquence représentant le processus de création d'un compte patient dans un système EMR. Il montre les interactions entre le patient, l'administrateur et les composants du système EMR.",
    "code": "@startuml\nleft to right direction\nactor Patient\nactor Admin\nrectangle \"EMR System\" {\n...\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["EMR System", "Patient", "Admin", "Account", "Database", "ID", "Validation"],
    "description": "Diagramme UML de séquence illustrant la création d'un compte patient par un administrateur et les interactions avec le système EMR.",
    "source": "https://plantuml.com/"
  },
 {
  "prompt": "Créer un diagramme UML de classes représentant la structure et les relations entre entités, classes et interfaces d'une application logicielle.",
  "code": "@startuml\n' Exemple de diagramme de classes UML\n\ninterface Repository {\n    +save(entity: Object): void\n    +findById(id: int): Object\n}\n\nclass User {\n    +id: int\n    +name: string\n    +email: string\n    +login(): boolean\n}\n\nclass Admin {\n    +manageUsers(): void\n}\n\nclass Product {\n    +id: int\n    +name: string\n    +price: float\n}\n\nclass UserRepository implements Repository {\n    +save(entity: Object): void\n    +findById(id: int): Object\n}\n\nclass ProductRepository implements Repository {\n    +save(entity: Object): void\n    +findById(id: int): Object\n}\n\nUser <|-- Admin\nUser --> UserRepository\nProduct --> ProductRepository\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["UML", "diagramme de classes", "plantuml", "interface", "entities"],
  "description": "Diagramme UML de classes représentant les relations et dépendances entre différentes entités et interfaces d'une application logicielle.",
  "source": "https://plantuml.com/class-diagram"
}
,
{
  "prompt": "Créer un diagramme UML de machine à états représentant une logique de traitement avec choix et branches.",
  "code": "@startuml\n[*] --> Initial\n\nstate Initial {\n  [*] --> WaitingInput\n}\n\nstate WaitingInput {\n  inputValid --> Processing\n  inputInvalid --> Error\n}\n\nstate Processing {\n  success --> Completed\n  failure --> Error\n}\n\nstate Completed {\n  [*] --> Final\n}\n\nstate Error {\n  retry --> WaitingInput\n  abort --> Final\n}\n\nFinal --> [*]\n@enduml",
  "langage": "PlantUML",
  "type": "state machine",
  "tags": ["etat", "machine à états", "state machine", "transitions", "logique de traitement"],
  "description": "Diagramme UML de machine à états illustrant les différents états et transitions pour une logique de traitement incluant les erreurs, les retries et la complétion.",
  "source": "https://plantuml.com/state-diagram"
}
,
  {
    "prompt": "Créer un diagramme UML de séquence représentant le processus d'affichage d'une annonce publicitaire dans un système utilisant AWS et Smadex.",
    "code": "@startuml\n!include <awslib/AWSCommon>\n!include <awslib/AWSSimplified.puml>\n!include <awslib/Compute/all.puml>\n!include <awslib/mobile/all.puml>\n!include <awslib/general/all.puml>\nEC2(Smadex, \"Smadex Service\", \" \")\nUsers(Users, \"Users\", \" \")\nTraditionalServer(AdExchange, \"Ad Exchange\", \" \")\nMobile(Mobile, \"Publisher app or web\", \" \")\nUsers -down-> Mobile: 1. Visits\nMobile -right-> AdExchange: 2. Start auction\nAdExchange -right-> Smadex: 3. Bid request / response\nSmadex -left-> Mobile: 4. Show Ad\nUsers -right-> Smadex: 5. Impression / click / install / event {request id}\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["AWS", "EC2", "Smadex", "Ad Exchange", "Publisher app", "web"],
    "description": "Diagramme de séquence représentant les étapes pour afficher une annonce publicitaire via AWS et Smadex.",
    "source": "@startuml\n!include <awslib/AWSCommon>\n!include <awslib/AWSSimplified.puml>\n!include <awslib/Compute/all.puml>\n!include <awslib/mobile/all.puml>\n!include <awslib/general/all.puml>\nEC2(Smadex, \"Smadex Service\", \" \")\nUsers(Users, \"Users\", \" \")\nTraditionalServer(AdExchange, \"Ad Exchange\", \" \")\nMobile(Mobile, \"Publisher app or web\", \" \")\nUsers -down-> Mobile: 1. Visits\nMobile -right-> AdExchange: 2. Start auction\nAdExchange -right-> Smadex: 3. Bid request / response\nSmadex -left-> Mobile: 4. Show Ad\nUsers -right-> Smadex: 5. Impression / click / install / event {request id}\n@enduml"
  },
  {
    "prompt": "Créer un diagramme UML de séquence illustrant les étapes de modification et finalisation d'un projet par un designer via un outil de conception.",
    "code": "@startuml !theme plain\ndesigner -> tool : Start editing homepage\ndesigner -> tool : Finalize edits\n...\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["plantuml", "diagramme de séquence", "uml"],
    "description": "Diagramme UML de séquence montrant les interactions entre un designer et l'outil de conception pour modifier et finaliser un projet.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Créer un diagramme UML représentant les classes C_Conversacion et C_Mensaje avec leurs associations et notes de documentation.",
    "code": "@startuml\n/'la autora es imane Alouane'/\n\nclass C_Conversacion<<Entity>>{ \nfecha_inicio: Date \nfecha_fin: Date [0..1] \n/new_mensaje:boolean \n} \n\nclass C_Mensaje<<Entity>>{ \nInstante:datetime\nTexto:String \n} \n\nnote as RN_conversaciones\n<b> RN-4-00 </b> Tous les champs d'une conversation et d'un message sont obligatoires.\n<b> RN-4-01 </b> La date de fin doit être après la date de début.\n<b> RN-4-02 </b> Une conversation ne peut être créée que sous un lien d'amitié actif.\nend note\n\nnote as RN_mensajes\n<b> RN-4-0 </b> Tous les champs d'un message sont obligatoires.\n<b> RN-4-3 </b> Les messages doivent se situer dans l'intervalle d'une conversation active.\nend note\n\nRN_conversaciones -- C_Conversacion\nRN_mensajes -- C_Mensaje\nC_Conversacion*--\"*\"C_Mensaje: composée\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["Entity", "Association", "Note"],
    "description": "Diagramme UML représentant les classes de conversation et message, leurs relations et les règles de validation associées.",
    "source": "https://github.com/plantuml-stdlib/PlantUML"
  },
  {
  "prompt": "Créer un diagramme UML de classe représentant une classe simple 'Range' avec deux attributs : offset et size.",
  "code": "@startuml\n' Diagramme de classe pour Range\nclass Range {\n    + offset : int\n    + size : int\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["uml", "plantuml", "diagramme de classe", "classe simple"],
  "description": "Diagramme UML représentant une classe 'Range' avec deux attributs publics : 'offset' et 'size'.",
  "source": "https://plantuml.com/class-diagram"
}
,
  {
    "prompt": "Créer un diagramme UML de cas d'utilisation représentant un développeur interagissant avec une application. Il inclut deux cas d'utilisation : gérer les applications et gérer les services.",
    "code": "@startuml\nleft to right direction\nactor :Developer: as Dev\nrectangle \"Application Stack\" #aaffaa {\nUseCase UC1 as \"Manage Applications\"\nUseCase UC2 as \"Manage Services\"\nDev --> UC1\nDev --> UC2\n}\n@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": ["plantuml", "uml", "diagramme de cas d'utilisation"],
    "description": "Diagramme de cas d'utilisation illustrant les interactions d'un développeur avec l'application et ses fonctionnalités principales.",
    "source": ""
  },
  {
    "prompt": "Créer un diagramme UML de séquence montrant les interactions d'un administrateur avec un système d'alertes. L'administrateur peut visualiser, ignorer, archiver ou envoyer des alertes.",
    "code": "@startuml\nleft to right direction\nskinparam actorStyle awesome\n\"Admin\" as admin\nrectangle Alertas {\n    (Visualizar\\nalertas) as select_alert\n    (Ignorar\\nalerta) as ignore_alert\n    (Arquivar\\nalerta) as archive_alert\n    (Encaminhar\\nalerta) as mail_alert\n    (Copiar\\nconteúdo\\ndo alerta) as copy_alert\n}\nrectangle \"App de e-mail\\npadrão do usuário\" as external_sys\nnote right of copy_alert\n    O conteúdo do alerta\n    é copiado para o\n    corpo do e-mail\nend note\nadmin -- select_alert\nselect_alert ..> mail_alert : <<incluir>>\nmail_alert <.. copy_alert : <<estender>>\ncopy_alert -- external_sys\nselect_alert ..> ignore_alert : <<incluir>>\nignore_alert <.. archive_alert : <<estender>>\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "séquence", "diagramme"],
    "description": "Diagramme de séquence montrant les interactions entre un administrateur et le système d'alertes avec ses différentes actions.",
    "source": "https://github.com/plantuml/plantuml-server/wiki/Pipe-Commands#sequence-diagrams"
  },
  {
    "prompt": "Créer un diagramme UML de cas d'utilisation représentant la gestion du stock. Il montre les interactions entre un administrateur, un transporteur et le système.",
    "code": "@startuml Storage Net, Use Case, Move from begin\\nleft to right direction\\nactor \"Administrator A\" as admin_a\\nactor \"Transporter\" as transporter\\nusecase \"Take items away\" as take_away\\npackage System {\\n  usecase \"Confirm taking items away\" as confirm\\n  usecase \"Notify\" as notify\\n}\\nadmin_a -down-> take_away\\ntake_away -down-> transporter\\nadmin_a --> confirm\\nconfirm ..> notify : include\\n@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": ["utilisateur", "acteur", "processus", "système"],
    "description": "Diagramme de cas d'utilisation illustrant un processus de gestion de stock avec les interactions entre l'administrateur, le transporteur et le système.",
    "source": "https://github.com/plantuml/plantuml-samples/blob/master/usecase.puml"
  }
,
{
  "prompt": "Créer un diagramme UML de séquence représentant la création d'un bâtiment avec ses étages, incluant les interactions entre les acteurs, participants et services.",
  "code": "@startuml\ntitle Création d'un bâtiment et de ses étages\nautonumber\nactor Architecte\nactor Ingénieur\nparticipant \"Système de Gestion de Bâtiments\" as BMS\nparticipant \"Module Étages\" as FloorModule\n\nArchitecte -> BMS : Créer bâtiment\nBMS -> FloorModule : Initialiser étage(s)\nFloorModule --> BMS : Confirmation étage créé\nBMS --> Architecte : Bâtiment créé avec étages\nArchitecte -> Ingénieur : Vérifier configuration du bâtiment\nIngénieur -> BMS : Valider conformité\nBMS --> Ingénieur : Retour validation\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "usecase", "class", "component", "building", "architecture"],
  "description": "Diagramme UML représentant la séquence d'actions pour créer un bâtiment et ses étages, incluant les interactions entre l'architecte, l'ingénieur et le système de gestion.",
  "source": "https://plantuml.com/sequence-diagram"
}

,

  {
    "prompt": "Créer un diagramme de classes UML pour une application de gestion des cours et examens d'un enseignant.",
    "code": "@startuml\n' Diagramme de classes pour l'application de gestion des examens\n\ntitle List Teacher's Course Exams\n\ntop to bottom direction\nskinparam linetype ortho\n\npackage Teacher {\n    class Teacher <<root>> {\n        + courses() : Iterable<Course>\n    }\n}\n\npackage Exam {\n    class Exam <<root>>\n}\n\npackage Course {\n    class Course <<root>>\n}\n\npackage repositories {\n    interface TeacherRepository {\n        + findById() : Optional<Teacher>\n    }\n    interface ExamRepository {\n        + findByCourse() : Iterable<Exam>\n    }\n}\n\npackage infraestructure.persistence {\n    class PersistenceContext {\n        + repositories : RepositoryFactory\n    }\n    interface RepositoryFactory {\n        + teachers() : TeacherRepository\n        + exams() : ExamRepository\n    }\n}\n\nclass ListCourseExamsUI <<presentation>>\nclass ListCourseExamsController <<application>> {\n    + listCourses() : Iterable<Course>\n    + listCourseExams() : Iterable<Exam>\n}\n\nListCourseExamsUI ..> ListCourseExamsController\nListCourseExamsUI ..> Exam.Exam\nListCourseExamsUI ..> Course.Course\nListCourseExamsController ..> PersistenceContext\nListCourseExamsController ..> RepositoryFactory\nListCourseExamsController ..> TeacherRepository\nListCourseExamsController ..> ExamRepository\nListCourseExamsController ..> Teacher.Teacher\nTeacher.Teacher --> Course.Course\nExam.Exam --> Course.Course\nPersistenceContext --> RepositoryFactory\nRepositoryFactory --> TeacherRepository\nRepositoryFactory --> ExamRepository\nTeacherRepository --> Teacher.Teacher\nExamRepository --> Exam.Exam\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["plantuml", "class-diagram", "uml"],
    "description": "Diagramme de classes représentant l'architecture d'une application qui liste les examens des cours d'un enseignant.",
    "source": "https://plantuml.com/class-diagram"
  },
  {
    "prompt": "Créer un diagramme UML de classes pour la gestion des catégories d'objets dans un système, illustrant les relations entre ThingCategoryDef, listes et interfaces IEnumerable.",
    "code": "@startuml\n' Diagramme de classes pour ThingCategoryDef\nclass ThingCategoryDef {\n    + iconPath : string\n    + resourceReadoutRoot : bool\n    + ContainedInThisOrDescendant(thingDef:ThingDef) : bool\n    + <<override>> ResolveReferences() : void\n    + <<override>> PostLoad() : void\n    + {static} Named(defName:string) : ThingCategoryDef\n    + <<override>> GetHashCode() : int\n}\nclass \"List`1\"<T> {}\nclass \"IEnumerable`1\"<T> {}\nThingCategoryDef --> \"parent\" ThingCategoryDef\nThingCategoryDef --> \"treeNode\" TreeNode_ThingCategory\nThingCategoryDef o-> \"childCategories<ThingCategoryDef>\" \"List`1\"\nThingCategoryDef o-> \"childThingDefs<ThingDef>\" \"List`1\"\nThingCategoryDef o-> \"childSpecialFilters<SpecialThingFilterDef>\" \"List`1\"\nThingCategoryDef o-> \"icon\" Texture2D\nThingCategoryDef --> \"Parents<ThingCategoryDef>\" \"IEnumerable`1\"\nThingCategoryDef --> \"ThisAndChildCategoryDefs<ThingCategoryDef>\" \"IEnumerable`1\"\nThingCategoryDef --> \"DescendantThingDefs<ThingDef>\" \"IEnumerable`1\"\nThingCategoryDef --> \"DescendantSpecialThingFilterDefs<SpecialThingFilterDef>\" \"IEnumerable`1\"\nThingCategoryDef --> \"ParentsSpecialThingFilterDefs<SpecialThingFilterDef>\" \"IEnumerable`1\"\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["uml", "plantuml", "diagramme de classe"],
    "description": "Le diagramme montre une classe ThingCategoryDef et ses relations avec d'autres classes.",
    "source": ""
  },
  {
    "prompt": "Créer un diagramme de séquence UML pour le déplacement à gauche dans un jeu, avec les interactions entre Main et Labyrinthe.",
    "code": "@startuml\ntitle Déplacement à gauche dans le jeu\nparticipant \"main : Main\" as main\nparticipant \"laby : Labyrinthe\" as laby\nmain -> laby : demander déplacement à gauche\nlaby --> main : confirmer déplacement\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["plantuml", "diagramme UML", "séquence"],
    "description": "Le diagramme décrit une séquence d'appels entre les classes Main et Labyrinthe pour le déplacement à gauche.",
    "source": "@startuml"
  },
  {
    "prompt": "Créer un diagramme de séquence UML représentant le flux des données dans une application web, incluant utilisateur, interface et services backend.",
    "code": "@startuml\nactor Utilisateur\nparticipant \"Interface Web\" as UI\nparticipant \"Backend Service\" as Backend\nUtilisateur -> UI : requête de données\nUI -> Backend : demande d'information\nBackend --> UI : renvoie des données\nUI --> Utilisateur : affichage des données\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["diagramme", "UML", "séquence", "flux de données"],
    "description": "Ce diagramme représente le flux des données dans une application web. Il montre les interactions entre les utilisateurs, l'interface et les services backend.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Créer un diagramme de classes UML représentant le module SewMotor et ses composants, incluant Formeln et l'interface graphique DrehstrommotorGUI.",
    "code": "@startuml\nclass SewMotor {\n    + startMotor() : void\n    + stopMotor() : void\n}\nclass Formeln {\n    + calculateTorque(rpm:int, voltage:float) : float\n}\nclass DrehstrommotorGUI {\n    + displayMotorStatus() : void\n    + inputParameters() : void\n}\nSewMotor --> Formeln\nDrehstrommotorGUI --> SewMotor\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["SewMotor", "Formeln", "DrehstrommotorGUI", "JFrame"],
    "description": "Diagramme de classes représentant les entités SewMotor, Formeln et DrehstrommotorGUI.",
    "source": "@startuml Drehmoment"
  }


,
{
  "prompt": "@startuml\nabstract class symmetricencryption.SymmetricEncryption { ... }",
  "code": "@startuml\nabstract class symmetricencryption.SymmetricEncryption { ...\n...}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["symmetric", "encryption", "Vigenere", "ASCIIOffsetEncoding", "TextEncoding"],
  "description": "Diagramme de classes décrivant l'architecture d'un système de chiffrement symétrique.",
  "source": "@startuml"
}
,
{
  "prompt": "Créer un diagramme UML de séquence représentant les interactions entre un utilisateur, une page produit et le système lors de la consultation et de la sélection de produits.",
  "code": "@startuml\nactor \"Người dùng\" as User\nparticipant \"Trang Sản phẩm\" as ProductPage\nparticipant \"Hệ thống\" as System\n\nUser -> ProductPage: Truy cập trang sản phẩm\nUser -> ProductPage: Chọn danh mục sản phẩm\nProductPage -> System: Lấy danh sách sản phẩm\nSystem --> ProductPage: Trả về danh sách sản phẩm\nProductPage --> User: Hiển thị danh sách sản phẩm\nUser -> ProductPage: Xem chi tiết sản phẩm (tùy chọn)\nProductPage -> System: Lấy chi tiết sản phẩm (tùy chọn)\nSystem --> ProductPage: Trả về chi tiết sản phẩm (tùy chọn)\nProductPage --> User: Hiển thị chi tiết sản phẩm (tùy chọn)\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "diagramme UML", "séquence d'événements"],
  "description": "Ce diagramme UML montre la séquence d'événements lors du parcours d'un utilisateur sur une page de produit. Il décrit les interactions entre l'utilisateur, la page de produit et le système.",
  "source": ""
}

,
{
  "prompt": "Diagramme UML pour le système de gestion d'employés",
  "code": "@startuml\nskinparam classAttributeIconSize 0\nleft to right direction\n\nclass RegisterEmployeeUI {\n}\nclass RegisterEmployeeController {\n  +getEmployeeRoles()\n  +registerEmployee(name, address, phone number, e-mail, Citizen Card number)\n  +setRole(role)\n  +saveEmployee()\n}\nclass EmployeeStore {\n  +registerEmployee(name, address, phone number, e-mail, Citizen Card number)\n  +setRole(role)\n  +saveEmployee(employee)\n  +validateEmployee(employee)\n  +addEmployee(employee)\n}\nclass Employee {\n  -name\n  -address\n  -phoneNumber\n  -email\n  -citizenCardNumber\n  -role\n  +getName\n  +getAddress\n  +getPhoneNumber\n  +getEmail\n  +getCitizenCardNumber\n  +getRole\n  +setName\n  +setAddress\n  +setPhoneNumber\n  +setEmail\n  +setCitizenCardNumber\n  +setRole\n}\nclass Company {\n}\nRegisterEmployeeUI ..> RegisterEmployeeController\nRegisterEmployeeController ..> Company\nRegisterEmployeeController ..> Employee\nCompany \"1\"--\"1\" EmployeeStore : uses >\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["système de gestion d'employés", "système de gestion des ressources humaines"],
  "description": "Ce diagramme représente les classes et leurs relations dans le système de gestion d'employés.",
  "source": "https://github.com/plantuml/plantuml"
}
,
{
  "prompt": "Créer un diagramme de composants représentant les chartes Helm et leur dépendance envers une image Docker.",
  "code": "@startuml\nskinparam linetype ortho\ncomponent \"Helm Chart: mariadb-galera\" as Mariadb\ncomponent \"Helm Chart: common\" as Common\nnode \"Docker Image\" as Docker\nMariadb --> Docker\nCommon --> Docker\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["Helm Charts", "mariadb-galera", "common", "Docker Image"],
  "description": "Diagramme de composants représentant les chartes Helm et la dépendance envers une image Docker.",
  "source": "https://github.com/melahn/helm-chartmap"
},
{
  "prompt": "Créer un diagramme C4 de systèmes et de conteneurs pour illustrer l'architecture d'une application web avec base de données et gestionnaire de tâches.",
  "code": "@startuml\n!include <C4/C4_Container>\n\nPerson(user, \"Utilisateur\", \"Personne utilisant l'application\")\nContainer(webApp, \"Application Web\", \"Java/Spring\", \"Permet aux utilisateurs d'interagir avec le système\")\nContainerDb(db, \"Base de données\", \"PostgreSQL\", \"Stocke les données applicatives\")\nContainer(worker, \"Gestionnaire de tâches\", \"Celery\", \"Exécute des tâches asynchrones\")\n\nRel(user, webApp, \"Utilise\")\nRel(webApp, db, \"Lit/Écrit\")\nRel(webApp, worker, \"Envoie des tâches\")\nRel(worker, db, \"Lit/Écrit\")\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["C4", "system", "container", "architecture"],
  "description": "Ce diagramme décrit l'architecture d'un système qui inclut une application web, un serveur de base de données et un gestionnaire de tâches asynchrones.",
  "source": "https://github.com/plantuml/plantuml-examples"
},
{
  "prompt": "Créer un diagramme UML de classes pour représenter le module d'authentification avec contrôleur, service JWT et fabrique de tokens.",
  "code": "@startuml\nskinparam monochrome true\nset separator ::\n\nclass agh.wfiis.weather::auth::controller::AuthenticationController {\n    + createToken(dto : AuthenticationDto) : AuthenticationResponseDto\n}\n\nclass agh.wfiis.weather::auth::jwt::JwtFactory {\n    + generate(authentication : Authentication, scope : String) : Jwt\n}\n\ninterface agh.wfiis.weather::auth::jwt::service::JwtService {\n    + createToken(authentication : Authentication) : AuthenticationResponseDto\n}\n\nclass agh.wfiis.weather::auth::jwt::service::RestJwtService {\n    + createToken(authentication : Authentication) : AuthenticationResponseDto\n}\n\nagh.wfiis.weather::auth::jwt::service::JwtService <|.. agh.wfiis.weather::auth::jwt::service::RestJwtService\nagh.wfiis.weather::auth::jwt::service::RestJwtService --> agh.wfiis.weather::auth::jwt::JwtFactory\nagh.wfiis.weather::auth::controller::AuthenticationController --> agh.wfiis.weather::auth::jwt::service::JwtService\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["UML", "Class Diagramme", "Authentification"],
  "description": "Diagramme de classe montrant les classes et interfaces impliquées dans l'authentification.",
  "source": ""
},
{
  "prompt": "Créer un diagramme UML de classes représentant les entités principales du système Sun Movement et leurs relations.",
  "code": "@startuml SunMovement_Class_Diagram\n!theme plain\nskinparam backgroundColor #FFFFFF\nskinparam class {\n    BackgroundColor #E8F4FD\n    BorderColor #2196F3\n    FontColor #1976D2\n    ArrowColor #1976D2\n}\n\ntitle \"SUN MOVEMENT - CLASS DIAGRAM (Core Business Objects)\"\n\nNguoiDung ||--o{ DonHang\nNguoiDung ||--o{ GioHang\nNguoiDung ||--o{ DanhGiaSanPham\nNguoiDung ||--o{ TuongTacNguoiDung\n\nSanPham ||--o{ BienTheSanPham\nSanPham ||--o{ ChiTietDonHang\nSanPham ||--o{ ChiTietGioHang\nSanPham ||--o{ DanhGiaSanPham\nSanPham ||--o{ GiaoDichKho\nSanPham ||--o{ TuongTacNguoiDung\n\nDichVu ||--o{ LichDichVu\nDichVu ||--o{ ChiTietGioHang\n\nDonHang ||--o{ ChiTietDonHang\nDonHang ||--o{ GiaoDichKho\n\nGioHang ||--o{ ChiTietGioHang\nNhaCungCap ||--o{ GiaoDichKho\nMaGiamGia ||--o{ LichSuSuDungMa\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme", "uml", "plantuml"],
  "description": "Ce diagramme UML représente le modèle de données et les relations entre les différents entités du système Sun Movement.",
  "source": "@startuml SunMovement_Class_Diagram"
},
{
  "prompt": "Créer un diagramme de composants montrant l'architecture de BuStore et les interactions entre ses microservices.",
  "code": "@startuml microservices-interaction\ncomponent \"API Gateway\" as Api\ncomponent \"Authentication Service\" as Auth\ncomponent \"User Management\" as Users\ncomponent \"Product Inventory\" as Inventory\ncomponent \"Order & Payment\" as Order\ncomponent \"Customer Engagement\" as Engagement\ncomponent \"External Systems\" as External\n\nApi --> Auth\nApi --> Users\nApi --> Inventory\nApi --> Order\nApi --> Engagement\n\nOrder --> External\nInventory --> External\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["microservices", "architecture", "API Gateway", "authentication", "user management", "product inventory", "order payment processing", "customer engagement", "event-driven communication", "external systems"],
  "description": "Schéma d'architecture de BuStore, illustrant les interactions entre ses microservices.",
  "source": ""
},
{
  "prompt": "Créer un diagramme UML de classes pour un système de gestion de bibliothèque.",
  "code": "@startuml LibrarySystem\nclass Livre {\n  +titre : String\n  +auteur : String\n  +isbn : String\n}\nclass Utilisateur {\n  +nom : String\n  +id : int\n}\nclass Emprunt {\n  +dateDebut : Date\n  +dateFin : Date\n}\n\nUtilisateur \"1\" --> \"*\" Emprunt\nLivre \"1\" --> \"*\" Emprunt\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme UML", "plantuml", "uml", "class diagram"],
  "description": "Le diagramme représente le modèle de classes pour un système de gestion de bibliothèque. Il montre les relations entre les différentes entités.",
  "source": "@startuml 12回\n... (code entier)"
}

,
{
  "prompt": "Créer une interface utilisateur avec PlantUML Salt pour définir une politique de sécurité (policy) avec ses paramètres.",
  "code": "@startuml\nsalt\n{\nCreate Policy\n{\n    name | \"myPolicy\"\n    cloud | \"myCloud\"\n    env | \"dev\"\n    filename | \"policy.yaml\"\n    [ Cancel <&circle-x>] | [ OK <&account-login> ]\n}\n}\n@enduml",
  "langage": "PlantUML",
  "type": "salt",
  "tags": ["create", "policy", "cloud", "env", "filename"],
  "description": "Créer une politique de sécurité avec des paramètres spécifiques en utilisant une interface Salt.",
  "source": "@startuml"
}

,
{
  "prompt": "Diagramme C4 (container) pour le système Clipper MS avec utilisateurs, administrateur, IA de matching et Google SSO",
  "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\n!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons\n!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5\n!include DEVICONS/java.puml\n!include FONTAWESOME/users.puml\n\nPerson(user, \"User\", \"User of Clipper MS\", \\$sprite=\"users\")\nPerson(admin, \"admin\", \"Admin of Clipper MS\", \\$sprite=\"users\")\nContainer(sys, \"Clipper MS\", \"collection & trading system\", \"The complete Clipper MS system\", \\$sprite=\"java\")\n\nSystem_Ext(ai, \"Matching AI\", \"AI model used to match trade-able clippers to a wishlist\")\nSystem_Ext(log, \"Google SSO\", \"SSO service used to authenticate users via an OAuth2.0 grant flow\")\n\nRel(user, sys, \"Uses\")\nRel(admin, sys, \"Uses\")\nRel(sys, ai, \"Uses\")\nRel(sys, log, \"Uses\")\nSHOW_FLOATING_LEGEND()\n@enduml",
  "langage": "PlantUML",
  "type": "Component",
  "tags": [
    "C4-PlantUML",
    "Clipper MS",
    "Matching AI",
    "Google SSO"
  ],
  "description": "Le diagramme UML représente le système Clipper MS, qui comprend des utilisateurs, un administrateur et différents composants tels que la technologie de Matching AI et Google SSO.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
}

,
{
  "prompt": "Diagramme de séquence UML montrant le flux de connexion d'un utilisateur non authentifié via la fenêtre de login et le contrôleur de comptes.",
  "code": "@startuml PrijavaOsnovni\n!theme plain\nautonumber\n\nactor \"Utilisateur non authentifié\" as Guest\nboundary \"Fenêtre de login\" as LoginWindow\ncontrol \"Contrôleur de comptes\" as AccountCtrl\ndatabase \"Base de données utilisateurs\" as DB\n\nGuest -> LoginWindow : Ouvre la fenêtre de login\nLoginWindow -> Guest : Affiche formulaire (username/password)\nGuest -> LoginWindow : Saisit les données et clique sur 'Connexion'\nLoginWindow -> AccountCtrl : validateCredentials(username, password)\nAccountCtrl -> DB : SELECT user WHERE username = ?\nDB --> AccountCtrl : renvoie utilisateur + hash_password\nAccountCtrl -> AccountCtrl : Vérifie mot de passe\nalt Connexion réussie\n    AccountCtrl --> LoginWindow : OK (session + rôle)\n    LoginWindow --> Guest : Redirige vers page d'accueil\nelse Échec de la connexion\n    AccountCtrl --> LoginWindow : Erreur (données invalides)\n    LoginWindow --> Guest : Affiche message d'erreur\nend\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "Prijava",
    "osnovni tok",
    "Utilisateur non authentifié",
    "Connexion",
    "Contrôleur de comptes"
  ],
  "description": "Ce diagramme UML décrit le flux de connexion d’un utilisateur non authentifié. Il montre les interactions entre l’utilisateur, la fenêtre de login et le contrôleur de comptes, incluant succès et échec de connexion.",
  "source": "https://example.com/uml-plant"
}
,
{
  "prompt": "Diagramme UML de classes représentant la structure du framework CrewAI, incluant Crew, Agent, Task, Process, LLM Integration Layer et Tool Ecosystem.",
  "code": "@startuml CrewAI_Framework_Classes_Only\n!theme plain\n\npackage \"CrewAI Framework\" {\n    class Crew {\n        + agents : List<Agent>\n        + tasks : List<Task>\n    }\n\n    class Agent {\n        + executeTask(task : Task) : void\n    }\n\n    class Task {\n        + name : String\n        + run() : void\n    }\n\n    class Process {\n        + start() : void\n        + stop() : void\n    }\n\n    class LLMIntegrationLayer {\n        + sendPrompt(prompt : String) : String\n    }\n\n    class ToolEcosystem {\n        + tools : List<String>\n        + useTool(toolName : String) : void\n    }\n\n    Crew --> Agent\n    Crew --> Task\n    Agent --> Task\n    Task --> Process\n    LLMIntegrationLayer --> Task\n    ToolEcosystem --> Agent\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["CrewAI", "framework", "uml", "classes"],
  "description": "Le diagramme représente les classes du framework CrewAI, notamment la classe Crew qui contient des agents et des tâches. Les classes Agent, Task, Process, LLM Integration Layer et Tool Ecosystem sont également représentées.",
  "source": "@startuml CrewAI_Framework_Classes_Only"
}

,
{
    "prompt": "Diagramme de séquence UML montrant la création d'un utilisateur dans un système, avec interactions entre l'interface, le Web Service, DAO et la base de données.",
    "code": "@startuml\n!theme bluegray\nactor Utilisateur as user\nboundary Interface as interface\nentity \"Web Service\" as API\nentity DAO as dao\ndatabase \"Base de données\" as db\n\nuser -> interface : Crée un utilisateur\ninterface -> API : POST /user\nAPI -> dao : Appel BDD\ndao -> db : insert\ndb -> dao : OK\ndao -> API : OK\nAPI -> interface : Utilisateur créé\ninterface -> user : Confirmation utilisateur\n\ntitle Diagramme de séquence : Création d'un utilisateur\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["diagramme", "séquence", "création", "utilisateur"],
    "description": "Ce diagramme décrit la séquence de création d'un utilisateur.",
    "source": "@startuml test"
  },
  {
    "prompt": "Diagramme de classes UML représentant la classe ShoppingFragment dans une application Android, avec ses attributs, méthodes et relations.",
    "code": "@startuml\nclass ShoppingFragment {\n  - helperDB : HelperDB\n  - user : Users\n  - rewardIds : int[]\n  + onCreateView(inflater: LayoutInflater, container: ViewGroup, savedInstanceState: Bundle) : View\n  + onRewardClick(rewardId: int) : void\n}\n\ninterface OnRewardClickListener\nShoppingFragment <|.. OnRewardClickListener\nandroidx.fragment.app.Fragment <|-- ShoppingFragment\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classes", "PlantUML"],
    "description": "Ce diagramme représente la structure d'une classe Java, avec ses attributs et méthodes.",
    "source": "https://github.com/plantuml-stdlib/java-examples/blob/master/fragments-diagrams.plantuml"
  },
  {
    "prompt": "Diagramme de séquence UML représentant le comportement d'un insecte qui mange une spore ralentissante, contrôlé par un acteur Controller.",
    "code": "@startuml\nactor Controller\nparticipant Insect as insect\nparticipant SlowingSpore as spore\n\nController -> insect : Déplace insecte\ninsect -> spore : Mange spore\nspore --> insect : Effet ralentissant\ninsect -> Controller : Retour état\n\ntitle Séquence : Insecte mange une spore ralentissante\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "UML", "PlantUML", "insect", "spore"],
    "description": "Le diagramme représente une séquence de comportement pour un insect qui mange une spore ralentissante. L'insect est contrôlé par un acteur Controller.",
    "source": "Code PlantUML"
  }
,
{
    "prompt": "Diagramme de composants UML représentant le modèle de composants d'un travail générique, montrant les relations entre différents types d'objets et attributs associés.",
    "code": "@startuml\nhide methods\nskinparam groupInheritance 2\nskinparam class {\n    ArrowColor Black\n    BorderColor Black\n    BackgroundColor<<master-data>> #ffa080\n}\npackage \"GenericWorkProduct Outgoing Relationships View\" <<rectangle>> {\n    class WorkProduct {\n        + id\n        + name\n        + description\n    }\n    class Attribute {\n        + name\n        + type\n    }\n    WorkProduct --> Attribute : contains\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["uml", "plantuml", "component", "class", "diagramme"],
    "description": "Ce diagramme UML représente le modèle de composants d'un travail générique, en montrant les relations entre différents types d'objets et les attributs associés.",
    "source": ""
  },
  {
    "prompt": "Diagramme de séquence UML pour la récupération des données d'un ticket via API, avec vérification de l'autorisation de l'utilisateur.",
    "code": "@startuml\nstart\n:API request to get ticket received;\n:Retrieve authentication token from request header;\nif (Token valid?) then (yes)\n    :Retrieve user email from token;\n    :Get current user data;\n    :Get ticket data;\n    :Check if user is ticket owner;\n    if (User is ticket owner?) then (yes)\n        :Return ticket data;\n    else (no)\n        if (Check if a ticket is shared with user?) then (yes)\n            :Return ticket data;\n        else (no)\n            :Return 403 Forbidden;\n        endif\n    endif\nelse (no)\n  :Return 401 Unauthorized;\nendif\nstop\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "sequence", "authentification", "API"],
    "description": "Ce diagramme décrit une séquence d'opérations pour récupérer des données sur un ticket. Il vérifie l'autorisation de l'utilisateur avant de fournir les données.",
    "source": "@startuml sequence ticket API"
  },
  {
    "prompt": "Diagramme de classes UML représentant la table 'tipos_endereco' avec ses attributs et métadonnées.",
    "code": "@startuml\nentity tipos_endereco {\n  + id : serial\n  --\n  + created_at : timestamp\n  + updated_at : timestamp\n  + deleted_at : timestamp\n  + descricao : varchar\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["typicode", "endereco"],
    "description": "Diagramme de classe décrivant la table 'tipos_endereco' avec ses attributs.",
    "source": "https://github.com/plantuml/plantuml-website/blob/master/diagrams/uml/tipos_endereco.puml"
  },
  {
    "prompt": "Diagramme de composants UML représentant les services LCT, incluant Marketplace, Wallet, Ledger, Account et BackOffice, avec leurs interactions via API internes et publiques.",
    "code": "@startuml\nactor User as u\nactor Admin as a\n\nrectangle \"LCT Services\" as ltcservices #line.dashed {\n    component \"Marketplace\" as marketplace #LightBlue\n    component \"Wallet\" as wallet #LightBlue\n    component \"Ledger\" as ledger #LawnGreen\n    component \"Account\" as account #LightBlue\n    component \"BackOffice\" as backoffice #LightSalmon\n}\n\nbackoffice --> marketplace : Internal API\nbackoffice --> wallet : Internal API\nbackoffice --> ledger : Internal API\nbackoffice --> account : Internal API\n\nu -up-> wallet : Public API\nu -up-> marketplace : Public API\nu -up-> account : Public API\n\nwallet -> ledger : Internal API\nmarketplace --> wallet : Internal API\n\nadmin --> backoffice : Public API\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["diagramme UML", "composants", "api interne", "api publique"],
    "description": "Ce diagramme représente un système composé de différents composants (Marketplace, Wallet, Ledger, etc.) qui communiquent entre eux via des APIs internes et publiques.",
    "source": "https://github.com/plantuml/plantuml"
  }
,
 {
    "prompt": "Diagramme de classes UML représentant la classe JobGiver_WanderColony qui hérite de JobGiver_Wander.",
    "code": "@startuml\nclass JobGiver_Wander {\n}\nclass JobGiver_WanderColony {\n    + JobGiver_WanderColony()\n}\nJobGiver_Wander <-- JobGiver_WanderColony\n@enduml",
    "langage": "UML (PlantUML)",
    "type": "class",
    "tags": ["diagramme UML", "classe", "héritage"],
    "description": "Le diagramme représente la classe JobGiver_WanderColony qui hérite de JobGiver_Wander.",
    "source": "Code donné dans la question"
  },
  {
    "prompt": "Diagramme de classes UML représentant les classes et leurs relations dans un jeu de société.",
    "code": "@startuml\nclass Game {\n    + start()\n    + end()\n}\nclass Player {\n    + name\n    + score\n}\nclass Board {\n    + cells\n    + display()\n}\nGame --> Player\nGame --> Board\nPlayer --> Board\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme de classes", "uml", "plantuml"],
    "description": "Ce diagramme représente les classes et leurs relations dans le jeu de société.",
    "source": "Exemple généré"
  },
  {
    "prompt": "Diagramme de séquence UML illustrant le processus de création d'un nouveau robot dans une flotte, avec interactions entre le Campus Manager, composants UI, Module, Service et HTTP.",
    "code": "@startuml process-view\nautonumber\nskinparam DefaultTextAlignment<<center>> center\nactor CM as \"Campus Manager\"\nbox \"«container (C4)» Visualization\" <<center>>\nparticipant C as \"UI Component\" <<component>>\nparticipant M as \"Module\" <<component>>\nparticipant SVC as \"Service\" <<component>>\nparticipant H as \"HTTP\" <<component>>\nend box\nbox \"«container (C4)» MD Management\" <<center>> #LightYellow\nparticipant ROUTE as \"Route\" <<component>>\nend box\nactivate CM\nCM -> C : wants to create a new robot\nactivate C\nCM <-- C : asks for robot data\nC -> M : createDevice\nactivate M\nM -> M : validates data\nM -> SVC : createDevice(data)\nactivate SVC\nSVC -> H : post(url,data)\nH -> ROUTE : POST /devices {data}\nalt new robot created\n  H <-- ROUTE : 201 Created\n  SVC <-- H : new robot\n  M <-- SVC : new robot\n  C <-- M : success message\n  CM <-- C : informs success\nelse robot exists\n  H <-- ROUTE : 400 Bad Request\n  SVC <-- H : error\n  M <-- SVC : error\n  C <-- M : error\n  CM <-- C : shows error message\nend\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "C4", "container", "visualization", "MD Management"],
    "description": "Ce diagramme décrit le flux de création d'un nouveau robot dans une flotte. Il montre les interactions entre le Campus Manager, les composants UI, Module, Service et HTTP.",
    "source": "PlantUML"
  },
  {
    "prompt": "Diagramme de séquence UML pour l'ajout d'un nouveau film dans une bibliothèque, illustrant les interactions de l'utilisateur.",
    "code": "@startuml sequenceDiagram\nparticipant User\nparticipant UI\nparticipant Database\nUser -> UI : Click 'Add Movie'\nUI -> User : Show input form\nUser -> UI : Enter movie details\nUI -> Database : Save movie\nDatabase --> UI : Confirmation\nUI -> User : Movie added confirmation\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "diagramme UML", "scénario"],
    "description": "Ce diagramme décrit la séquence d'événements liés à l'ajout d'un nouveau film dans une bibliothèque de films. L'utilisateur clique sur le bouton \"Ajouter un film\" puis entre les détails du film et valide l'entrée.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme de séquence UML décrivant une interaction entre un utilisateur et différents composants de bas niveau.",
    "code": "@startuml\nparticipant \"Feature User\" as actor\nparticipant \"«component» :Lower Level Component 1\" as sc1\nparticipant \"«component» :Lower Level Component 3\" as sc3\nactor -> sc1 : real operation 3()\nsc1 -> sc3 : real operation 9()\nalt success\n    sc3 --> sc1 : success\nelse error\n    sc3 --> sc1 : error type\nend\nalt success\n    sc1 --> actor : true\nelse error\n    sc1 -> actor : error type\nend\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["uml", "sequence", "plantuml"],
    "description": "Diagramme de séquence décrivant une interaction entre des composants et un utilisateur.",
    "source": "Exemple généré"
  },
{
    "prompt": "Diagramme de cas d'utilisation UML décrivant les actions clés d'un utilisateur/administrateur dans un système de gestion de football.",
    "code": "@startuml\nleft to right direction\nactor \"Usuario/Administrador\" as admin #FFD700\nrectangle \"Sistema de Gestión de Fútbol\" {\n  usecase \"Gestion des équipes\"\n  usecase \"Gestion des joueurs\"\n  usecase \"Gestion des entraîneurs\"\n  usecase \"Organisation des ligues\"\n  usecase \"Planification des entraînements\"\n}\nnote right of admin\n  **Acciones clave del usuario:**\n  - Menú interactivo (CLI)\n  - Opérations CRUD\n  - Simulations sportives\n  - Gestion financière (sueldos)\nend note\n@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": [
      "système de gestion de football",
      "utilisateur/administrateur",
      "actions clés",
      "menu interactif CLI",
      "opérations CRUD",
      "simulations sportives",
      "gestion financière"
    ],
    "description": "Ce diagramme UML décrit le système de gestion de football et les actions clés que peut effectuer l'utilisateur/administrateur. Le système permet la gestion d'équipes, de joueurs, d'entraîneurs, ainsi que l'organisation de ligues et des entraînements.",
    "source": "PlantUML"
  },
  {
    "prompt": "Diagramme de séquence UML illustrant le traitement d'une requête GET pour les réservations de voitures dans un système de location.",
    "code": "@startuml RentalCarAdminBookingGET\nactor Client\nparticipant \"Serveur\" as Server\nparticipant \"Route Booking\" as Router\nparticipant \"Booking Model\" as Model\nClient -> Server : GET /booking\nServer -> Router : Route request\nRouter -> Model : Get booking data\nModel --> Router : Return booking data\nRouter --> Server : Return response\nServer --> Client : Return booking details\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": [
      "sequence", 
      "diagramme UML", 
      "Rental Car Admin Booking", 
      "GET"
    ],
    "description": "Ce diagramme UML décrit la séquence de traitement d'une demande GET pour les réservations de voitures. Il montre l'interaction entre le client, le serveur, le routeur des réservations et le modèle de données des réservations.",
    "source": "https://www.plantuml.com/"
  },
  {
    "prompt": "Diagramme de classes UML représentant la hiérarchie d'interfaces et de classes pour les jeux et types dans un système de simulation de combats.",
    "code": "@startuml\ninterface Game {\n}\nclass GuessEfficiencyGame implements Game\nclass GuessDefenseGame implements Game\nclass GuessOffenseGame implements Game\nclass Type {\n    TypeEnum type\n    HashMap<TypeEnum, HashMap<String,Float>> Efficiency\n    --\n    + getEfficiency(typeAtq: TypeEnum, typeDef: TypeEnum) : Float\n    + getEfficiency(typeAtq: TypeEnum, typeDef1: TypeEnum, typeDef2: TypeEnum) : Float\n    + getEfficientAttack(otherType: TypeEnum) : Float\n    + getEfficientDefense() : TypeEnum\n    + getEfficientAttack() : TypeEnum\n}\nenum TypeEnum {\n    STEEL, FIGHTING, DRAGON, WATER, ELECTRIC, FAIRY, FIRE, ICE, BUG, NORMAL, GRASS, POISON, PSYCHIC, ROCK, GROUND, GHOST, DARK, FLYING\n}\nTypeEnum -> Type\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": [
      "Game",
      "GuessEfficiencyGame",
      "GuessDefenseGame",
      "GuessOffenseGame",
      "Type",
      "TypeEnum"
    ],
    "description": "Diagramme de classes représentant une hiérarchie d'interfaces et de classes avec des méthodes et des champs.",
    "source": "https://plantuml.com/class-diagram"
  },
  {
    "prompt": "Diagramme de séquence UML montrant l'interaction entre les composants backend pour récupérer un type de document en fonction du rôle de l'utilisateur.",
    "code": "@startuml\nactor User\nparticipant \"Backend Service\" as Backend\nparticipant \"DocType Service\" as DocType\nparticipant \"User Role Service\" as RoleService\nUser -> Backend : Request document type\nBackend -> RoleService : Get user roles\nRoleService --> Backend : Return roles\nBackend -> DocType : Retrieve document type\nDocType --> Backend : Return document data\nBackend --> User : Return document type\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["backend", "api", "doctype", "recovery", "user-role"],
    "description": "Diagramme de séquence montrant l'interaction entre les composants du backend lors d'une opération de récupération d'un type de document.",
    "source": "@startuml"
  }
,
{
    "prompt": "Diagramme de séquence UML montrant les interactions entre les acteurs et le système pour la gestion et la validation des promotions.",
    "code": "@startuml\nactor \"Admin Général\" as Admin\nactor Client\nparticipant \"Système de Gestion\" as System\nAdmin -> System : Crée une promotion\nSystem -> Client : Notifie promotion\nClient -> System : Accepte promotion\nSystem -> Admin : Confirme application\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["Administration", "Validation", "Promotion", "Client", "Système"],
    "description": [
      "Ce diagramme UML décrit les interactions entre différents acteurs et systèmes dans un contexte de gestion de promotions.",
      "Il illustre les étapes d'approbation et d'application de promotions aux produits en stock."
    ],
    "source": "https://github.com/plantuml-stdlib/diagrams"
  },
  {
    "prompt": "Diagramme de classes UML montrant l'héritage de NotificationBackgroundService à partir de BackgroundService et l'utilisation de IServiceProvider.",
    "code": "@startuml\nclass NotificationBackgroundService {\n    - <<readonly>> _serviceProvider : IServiceProvider\n    + NotificationBackgroundService(serviceProvider:IServiceProvider)\n    # <<override>> <<async>> ExecuteAsync(stoppingToken:CancellationToken) : Task\n}\nBackgroundService <|-- NotificationBackgroundService\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["NotificationBackgroundService", "BackgroundService", "IServiceProvider"],
    "description": "Diagramme de classe montrant l'héritage de NotificationBackgroundService à partir de BackgroundService.",
    "source": "https://github.com/plantuml/plantuml/"
  },
  {
    "prompt": "Diagramme de classes UML définissant les relations entre les classes QuestNode et QuestNode_Multiply, incluant les types génériques SlateRef.",
    "code": "@startuml\nclass QuestNode_Multiply {\n}\nclass \"SlateRef`1\"<T> {\n}\nQuestNode <|-- QuestNode_Multiply\nQuestNode_Multiply --> \"value1<double>\" \"SlateRef`1\"\nQuestNode_Multiply --> \"value2<double>\" \"SlateRef`1\"\nQuestNode_Multiply --> \"storeAs<string>\" \"SlateRef`1\"\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["class", "diagramme UML"],
    "description": "Diagramme de classe définissant les relations entre les classes QuestNode et QuestNode_Multiply.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme de séquence UML illustrant l'opération de mise à jour d'une voiture par l'administrateur dans une application de location de voitures.",
    "code": "@startuml\nstart\n:Admin Provides update Auto Method;\n:Update info for Auto AutoNo/Brand/Color/ModelYear/Description;\nif (AutoNo Already present) then (yes)\n  :Error Message (Auto already present);\n  stop\nelse (no)\n  :Update Auto in list;\n  stop\nendif\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "UML", "diagramme"],
    "description": "Deux diagrammes UML de séquence décrivant une opération d'actualisation d'une voiture dans une application.",
    "source": "@startuml... "
  },
  {
    "prompt": "Diagramme C4 montrant l'architecture système avec les conteneurs et modules d'une solution logicielle, incluant les modules de gestion des certificats et le broker Kafka.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\ntitle Architecture de la solution\nSystem_Boundary(Office_System, \"Siège - 1C BPS\") {\n    Container(Gift_Cert, \"Module 'Gestion des certificats'\", \"Gère les certificats cadeaux\")\n}\nSystem(Messaging_Broker, \"Broker Kafka\")\nGift_Cert --> Messaging_Broker : Publie messages\n@enduml",
    "langage": "PlantUML",
    "type": "C4-Diagramme",
    "tags": ["architectural-diagram", "c4-plantuml", "system-design"],
    "description": "Ce diagramme représente l'architecture de la solution, comprenant les systèmes et les conteneurs. Les relations entre les différents composants sont également définies.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4.puml"
  },
  {
    "prompt": "Diagramme de séquence UML montrant l'interaction entre un utilisateur et un système pour visualiser l'historique des tableaux.",
    "code": "@startuml\nautonumber\nactor \"User\" as MG\nactivate MG\nMG -> \":System\" : selects option \"View Board History\"\nactivate \":System\"\n\":System\" --> MG : displays list of boards and asks for selection\ndeactivate \":System\"\nMG -> \":System\" : types the information\nactivate \":System\"\n\":System\" --> MG : displays history and confirms operation success\ndeactivate \":System\"\ndeactivate MG\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["diagramme UML", "séquence"],
    "description": "Ce diagramme décrit l'interaction entre un utilisateur (MG) et un système. L'utilisateur sélectionne une option, le système affiche les résultats et confirme la réussite de l'opération.",
    "source": ""
  },
   {
    "prompt": "Diagramme de classes UML représentant les relations entre CommandBase, SubSystemBase, BallTriggerComponents et MoveBallTriggerBySpeed.",
    "code": "@startuml\n'https://plantuml.com/class-diagram\nclass CommandBase\nAbstract class SubSystemBase\nBallTriggerComponents -|> BallTriggerComponentsBase\nBallTrigger *-- BallTriggerComponentsBase\nMoveBallTriggerBySpeed -|> CommandBase\nSubSystemBase <|- BallTrigger\nMoveBallTriggerBySpeed o-- BallTrigger\ninterface BallTriggerComponents{\n  WPI_TalonSRX getMotor()\n  Rev2mDistanceSensor getDistanceSensorUp()\n  ColorSensorV3 getColorSensor()\n}\nclass BallTriggerComponentsBase{\nWPI_TalonSRX motor;\nRev2mDistanceSensor distanceSensor;\nColorSensorV3 colorSensor;\n\nWPI_TalonSRX getMotor()\nRev2mDistanceSensor getDistanceSensorUp()\nColorSensorV3 getColorSensor()\n}\nclass BallTrigger{\nvoid periodic()\nvoid moveTriggerBySpeed()\nboolean isBallInPlace()\nboolean isBallIdentified()\nvoid stop()\n}\nclass MoveBallTriggerBySpeed{\nBallTrigger ballTrigger;\nDoubleSupplier speedSupplier;\n\nvoid execute()\nvoid end()\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class-diagram",
    "tags": ["uml", "plantuml", "diagramme de classe"],
    "description": "Ce diagramme décrit les relations entre les classes CommandBase, SubSystemBase, BallTriggerComponents et MoveBallTriggerBySpeed.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme de classes UML pour Internet TV, représentant les entités épisodes, chaînes, slots de temps, programmes et genres.",
    "code": "@startuml INTERNET_TV\n... (le reste du code)\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme", "umldiagramme", "internettv"],
    "description": "Ce diagramme représente les entités et leurs relations pour une application d'internet TV. Il montre les entités épisodes, chaînes, slots de temps, programmes et genres.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme de composants C4 pour une plateforme e-commerce, incluant Fraud Service et Database, avec tags et couleurs personnalisées.",
    "code": "@startuml\n!include ..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\....\\\\.c4s\\\\C4_Container.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\n... (le reste du code)\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["C4", "Container", "ECommercePlatform", "Deliver", "FraudManagement", "FraudService"],
    "description": "Diagrame UML représentant le niveau de conteneur d'une plateforme e-commerce, avec les composants Fraud Service et Database.",
    "source": "https://github.com/plantuml/plantuml/wiki/User-Manual#componentDiagram"
  },
  {
    "prompt": "Diagramme de séquence représentant le processus de prêt d'un livre, depuis l'interface jusqu'au service de gestion des emprunts.",
    "code": "@startuml\nparticipant 界面\nparticipant AdminManageBookController\nparticipant BorrowHandler\nparticipant BorrowService\nparticipant BookService\n\n界面 -> AdminManageBookController :request\nactivate 界面\nactivate AdminManageBookController\nAdminManageBookController -> AdminManageBookController :基本参数校验\nAdminManageBookController -> AdminManageBookController :包装领域模型\n\nAdminManageBookController -> BorrowHandler : 借阅\nactivate BorrowHandler\nBorrowHandler -> BookService :根据bookId查询bookDO\nactivate BookService\nBookService -> BorrowHandler :返回bookDO\nalt bookDO\nelse bookDO is null\nBorrowHandler ->x BorrowHandler :抛出异常\nend\n\nalt status\nelse status is DELETE\nBorrowHandler ->x BorrowHandler :抛出异常\nend\n\nalt status\nelse status is NO_BORROW\nBorrowHandler ->x BorrowHandler :抛出异常\nend\n\nalt borrowFlag\nelse borrowFlag is YES\nBorrowHandler ->x BorrowHandler :抛出异常\nend\n\nBorrowHandler -> BookService :根据bookId来CAS更新图书借阅标志为YES\nBookService -> BorrowHandler :返回j\ndeactivate BookService\nalt j\nelse j !=1\nBorrowHandler ->x BorrowHandler :抛出异常\nend\n\nBorrowHandler -> BorrowService :插入借阅信息\nactivate BorrowService\nBorrowService -> BorrowHandler :返回i\ndeactivate BorrowService\n\nalt i\nelse i!=1\nBorrowHandler -> BorrowHandler :抛出异常\nend\n\nBorrowHandler -> AdminManageBookController :返回true\ndeactivate BorrowHandler\nAdminManageBookController -> 界面 :返回true\ndeactivate 界面\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["Sequence Diagram", "Borrowing Process", "Java"],
    "description": "Diagramme de séquence représentant le processus de prêt d'un livre.",
    "source": "https://github.com/plantuml/plantuml-samples/blob/master/src/main/resources/sequence/borrow_process.pu"
  },
  {
    "prompt": "Modèle de domaine UML (US7) représentant les entités du système et leurs relations, incluant Person, Client, Property, Address et UnregisteredUser.",
    "code": "@startuml\nskinparam monochrome true\nskinparam packageStyle rectangle\nskinparam shadowing false\n\nskinparam classAttributeIconSize 0\n\nhide circle\nhide methods\n\ntitle Domain Model US7\n\nclass UnregisteredUser\n\nclass Person{\n    name\n    cardNumber\n    taxNumber\n    emailAddress\n    phoneNumber\n}\n\nclass Property\n\nclass Client {\n    password\n}\n\nclass Address{\n    street\n    cityName\n    districtName\n    stateAcronym\n    zipCode\n}\nUnregisteredUser \"1\" -- \"1\" Client: registered as >\nClient \"1\" -- \"1..*\" Property: buys/rents/sells >\nAddress \"1\" -- \"1\" Person : located at <\nClient --|> Person\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["DomainModel", "US7"],
    "description": "Modèle de domaine représentant les entités du système, avec leurs relations.",
    "source": ""
  },
  {
    "prompt": "Diagramme de classes UML représentant la classe EditReviewRequestModel avec ses propriétés et getters/setters.",
    "code": "@startuml\nclass EditReviewRequestModel {\n    + ReviewId : int <<get>> <<set>>\n    + Content : string <<get>> <<set>>\n    + Rating : byte <<get>> <<set>>\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme", "UML", "classe", "modèle"],
    "description": "Définition d'une classe UML pour la gestion de requêtes de revues",
    "source": "Code PlantUML"
  }
,{
    "prompt": "Diagramme de séquence UML montrant les interactions entre les acteurs Mallory, Bob et Alice.",
    "code": "@startuml\n!pragma teoz true\n'Issue #1494\ntitle My Diagram\nskinparam style strictuml\nActor Mallory as m\nActor Bob as b\nActor Alice as a\nactivate b\nb ->> a --++ : Hi Alice!\na ->> b --++ : Bye Bob!\nb ->> a ++ : Bye Alice!\n& b ->> m --++ : Bye Alice!\ndeactivate a\ndeactivate m\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["actor", "interaction", "UML"],
    "description": "Ce diagramme UML décrit une séquence d'événements entre différents acteurs.",
    "source": "https://github.com/plantuml/plantuml/pull/1790"
  },
  {
    "prompt": "Diagramme de composants UML montrant une carte (card) avec un port (port).",
    "code": "@startuml\ncard c\nport t\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["component", "port"],
    "description": "Diagramme montrant un card avec un port.",
    "source": "https://forum.plantuml.net/16071/deployment-could-you-improve-port-management"
  },
  {
    "prompt": "Diagramme de classe UML utilisant la définition conditionnelle SHOW_TYPE pour une ArrayList.",
    "code": "@startuml\n'!preprocessorV2\n!define SHOW_TYPE(x) my-x\nclass ArrayList\n!ifdef SHOW_TYPE\nArrayList : SHOW_TYPE(my_type) size()\n!else\nArrayList : SHOW_TYPE not set size()\n!endif\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["ArrayList", "PlantUML"],
    "description": "Diagramme de classe décrivant les propriétés d'une liste en utilisant la définition conditionnelle SHOW_TYPE.",
    "source": "https://example.com/plantuml"
  },
  {
    "prompt": "Diagramme de séquence UML représentant une activité avec des branches conditionnelles.",
    "code": "@startuml...@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "plantuml", "uml"],
    "description": "Diagramme de séquence représentant une activité avec des branches conditionnelles.",
    "source": "https://example.com/uml-diagramme"
  },
  {
    "prompt": "Diagramme de séquence UML illustrant le flux des opérations pour la création d'un bâtiment dans un système d'information.",
    "code": "@startuml\nskinparam monochrome true\nskinparam packageStyle rectangle\nskinparam shadowing false\ntitle System Sequence Diagram (Level 3 - Process View) - US 1050\nautonumber...\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "diagramme de séquence", "système d'information"],
    "description": "Ce diagramme UML illustre le flux des opérations pour la création d'un bâtiment, impliquant les acteurs Campus Manager et View, ainsi que différents composants du système.",
    "source": "https://github.com/plantuml/plantuml"
  }
,{
    "prompt": "Diagramme de composants C4 pour le système ByteBunker, incluant frontend, backend, postgres, neo4j et keydb.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\nSetDefaultLegendEntries(\"\")\nSHOW_LEGEND()\nPerson(user, \"Benutzer\", \"\")\nSystem_Boundary(bytebunker, \"ByteBunker System\") {\n  Container(frontend, \"Frontend\", \"TypeScript, Svelte\", \"UI zum Erkunden, Suchen und Visualisieren.\")\n  ...\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["C4", "Container", "System_Boundary", "Person"],
    "description": "Diagrame de composants du système ByteBunker System, comprenant les composants frontend, backend, postgres, neo4j et keydb.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
  },
  {
    "prompt": "Diagramme de classes UML pour WidgetButton, montrant ses attributs et méthodes, et son héritage depuis Widget.",
    "code": "@startuml\nclass WidgetButton {\n    + Text : string <<get>> <<set>> = \"Button\"\n    + Font : SpriteFont <<get>> <<set>>\n    + IdleStyle : Style <<get>> <<set>>\n    + OverStyle : Style <<get>> <<set>>\n    + DownStyle : Style <<get>> <<set>>\n    + WidgetButton()\n    + WidgetButton(text:string)\n    + \"\"\" override \"\"\" Draw(spriteBatch:SpriteBatch, gameTime:GameTime) : void\n}\nWidget <|-- WidgetButton\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classe"],
    "description": "Le diagramme décrit une classe WidgetButton avec ses attributs et méthodes. La classe WidgetButton étend la classe Widget.",
    "source": "http://www.plantuml.com/"
  },
  {
    "prompt": "Diagramme UML représentant une composante graphique avec sprite, taille et couleur.",
    "code": "@startuml\nsprite $frontapp [51x73/16] {\n...}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["diagramme", "UML", "composant"],
    "description": "Ce diagramme UML représente une composante graphique avec des informations de taille et de couleur.",
    "source": ""
  },
  {
    "prompt": "Diagramme de classes UML montrant les relations entre EventBooking et EventsController.",
    "code": "@startuml\n... (le code entier)\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classes"],
    "description": "Ce diagramme UML montre les relations entre les différentes classes du système, notamment EventBooking et EventsController.",
    "source": ""
  },
  {
    "prompt": "Diagramme UML représentant une hiérarchie de classes et interfaces pour la gestion des requêtes.",
    "code": "@startuml...@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["enum", "interface", "abstract class", "class"],
    "description": "Diagramme UML représentant une hiérarchie de classes et interfaces pour la gestion des requêtes.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme de séquence UML représentant une API Smart Home avec backend et HTTP.",
    "code": "@startuml\n'https://plantuml.com/sequence-diagram\n!pragma layout smetana\nautonumber\nparticipant \" \" as HTTP\nbox \"SmartHome <<System (C4)>>\"\n    participant \"Backend\" as BE<<container (C4)>>\nend box\nHTTP o-> BE: GET /devices by room and temperature functionality\nactivate BE\nBE -->o HTTP: JSON 200\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["PlantUML", "sequence-diagram", "SmartHome"],
    "description": "Diagramme de séquence représentant l'appel à une API pour obtenir des informations sur les appareils d'un système Smart Home.",
    "source": "@startuml\n'https://plantuml.com/sequence-diagram\n!pragma layout smetana\ntitle Smart Home\nautonumber\nparticipant \"\" as HTTP\nbox \"SmartHome \\u003c\\u003cSystem (C4)\\u003e\\u003e\"\n    participant \"Backend\" as BE<<container (C4)>>\nend box\nHTTP o-> BE: GET /devices by room and temperature functionality\nactivate BE\nBE -->o HTTP: JSON 200\n@enduml"
  },
  {
    "prompt": "Diagramme de séquence UML décrivant les interactions d'un utilisateur (Farmer) avec le système VoxMeteo Sahel, incluant la sélection de la langue.",
    "code": "@startuml\nactor User as \"Farmer\"\nparticipant \"VoxMeteo Sahel\\nSystem\" as System\nUser -> System : Start Call\nSystem -> User : Voice Prompt\\n(\"Welcome to VoxMeteo Sahel System, select language\")\nUser -> System : Select Language (1 for English, 2 for French, 3 for local languages)\nSystem -> User : Confirmation of Language Selection\nnote right of System : User navigates to\\nthe Main Menu after\\nlanguage selection\n@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": ["sequence", "usecase", "actor", "participant"],
    "description": "Ce diagramme décrit les interactions entre un utilisateur et le système VoxMeteo Sahel. Le processus commence par l'appel du système, suivi d'une sélection de langue.",
    "source": "PlantUML"
  }
, {
    "prompt": "Cas d'utilisation pour la gestion des promotions et des coupons",
    "code": "@startuml\ntitle Promotions et Coupons - Use Case\nactor Administrateur\nactor Client\nactor Système\nAdministrateur --> (Créer Promotion)\nAdministrateur --> (Supprimer Promotion)\nClient --> (Consulter Promotions)\nClient --> (Appliquer Coupon)\nSystème --> (Valider Coupon)\n@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": ["promotion", "coupon", "management", "use case"],
    "description": "Ce diagramme UML représente les cas d'utilisation pour la gestion de promotions et de coupons. Il montre les différents rôles (administrateur, client, système) et leurs interactions avec les cas d'utilisation.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Interfaces ConfigRepository et PropertiesConfigRepository",
    "code": "@startuml\ninterface ConfigRepository {\n    +Collection<ConfigItem> getConfigItems()\n    +Optional<ConfigItem> getConfigItem(String name)\n    +boolean isConfigItemPresent(String name)\n    +boolean setConfigItem(ConfigItem item)\n}\nclass PropertiesConfigRepository implements ConfigRepository {\n    - static String FILE_NAME\n    - Map<String, ConfigItem> configItems\n    +Collection<ConfigItem> getConfigItems()\n    +Optional<ConfigItem> getConfigItem(String name)\n    +boolean isConfigItemPresent(String name)\n    +void setConfigItem(ConfigItem item)\n    -void refreshConfigItems()\n    -void saveConfigItems()\n}\n@enduml",
    "langage": "UML",
    "type": "class",
    "tags": ["interface", "config", "repository"],
    "description": "Le diagramme représente les interfaces ConfigRepository et PropertiesConfigRepository. Les classes sont en relation avec un lien de généralisation.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Use case pour un jeu en ligne",
    "code": "@startuml\ntitle Jeu en ligne - Séquence d'usage\nactor Joueur\nactor Serveur\nJoueur -> Serveur : Connexion\nServeur -> Joueur : Affiche Lobby\nJoueur -> Serveur : Rejoindre Partie\nServeur -> Joueur : Confirme Participation\n@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": ["diagramme d'usages", "séquence d'événements", "jeu en ligne"],
    "description": "Ce diagramme UML représente une séquence d'étapes pour un jeu en ligne, mettant en avant les interactions entre le serveur et les joueurs.",
    "source": "https://plantuml.com/use-case-diagram"
  },
  {
    "prompt": "Diagramme de séquence pour MaxwellVedroPlugin et Docker-Compose",
    "code": "@startuml\ntitle Environnement de test - MaxwellVedroPlugin\nparticipant MaxwellVedroPlugin\nparticipant DockerCompose\nMaxwellVedroPlugin -> DockerCompose : Déploie service\nDockerCompose --> MaxwellVedroPlugin : Retour status\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["docker-compose", "Maxwell's Demon", "Vedro", "MaxwellVedroPlugin"],
    "description": "Diagramme de séquence représentant l'interaction entre différents composants lors de la mise en place d'un environnement de test.",
    "source": ""
  },
  {
    "prompt": "Diagramme de classes pour un système de publication/abonnement",
    "code": "@startuml\ntitle Système Pub/Sub\nclass Event {\n}\nclass Subscriber {\n}\nclass Publisher {\n}\nPublisher -> Event : publie\nEvent -> Subscriber : notifie\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["uml", "plantuml", "diagramme de classes", "design pattern"],
    "description": "Diagramme de classes représentant les événements et les abonnés d'un système de publication/abonnement.",
    "source": ""
  },
  {
    "prompt": "Modèle de domaine US007 - gestion utilisateurs, clients, propriétaires et système",
    "code": "@startuml\nskinparam monochrome true\nskinparam packageStyle rectangle\nskinparam shadowing false\nskinparam linetype ortho\nskinparam classAttributeIconSize 0\nhide circle\nhide methods\ntitle US007 - Domain Model\nclass UnregisteredUser\nclass RegisteredUser {\n    - name\n    - email\n    - password\n}\nclass Client\nclass Owner\nclass System\nnote left of RegisteredUser\nNew user should have access to the owner and client functionalities\nend note\nUnregisteredUser \"1\" -- \"1\" RegisteredUser : > turns into\nRegisteredUser \"1\" -- \"1\" Client : > can be\nRegisteredUser \"1\" -- \"1\" Owner : > can be\nUnregisteredUser \"1\" -- \"1\" System : > registers in\nRegisteredUser \"1\" -- \"1\" System : > registered in\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["domainModel", "useCase", "registeredUser", "unregisteredUser", "client", "owner", "system"],
    "description": "Ce diagramme UML représente le modèle de domaine d'une application. Il décrit les classes et leurs relations pour gérer les utilisateurs, les clients, les propriétaires et le système.",
    "source": "@startuml\n..."
  }
,{
    "prompt": "Diagramme de séquence de connexion CandidateApp - US3001",
    "code": "@startuml\ntitle Connection Diagram (CandidateApp)_US3001\nactor Candidate as actor\nbox \"CandidateApp\" #LightGreen\nparticipant \":CandidateApp\" as app\nend box\nbox Core #lightblue\nparticipant \":CommunicationController\" as com <<application>>\nparticipant \":CommunicationService\" as service <<service>>\nparticipant \":Messenger\" as messenger\nparticipant \":Translator\" as translator\nend box\nparticipant \"FollowUpServer\" as server #orange\nactor -> app : Demande de communication\napp -> com : initializeCommunication(socket)\ncom -> service : initializeCommunication(socket)\napp -> com : testConnection()\ncom -> service : testConnection()\nservice -> translator: encode(1, MessageCode.COMMTEST, null, null)\ntranslator --> service : byte[] message\nservice -> messenger: sendMessage(message)\nmessenger -> server\nservice -> messenger: receiveMessage()\nmessenger --> service: byte[] receiveMessage\nservice -> translator: decodeCode(response)\nservice --> com: MessageCode\ncom --> app: MessageCode\nalt MessageCode.ACK\napp --> actor: Connection établie\nelse MessageCode.ERR\napp --> actor: Connection refusée\nend\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "communication", "connection", "CandidateApp", "FollowUpServer"],
    "description": "Diagramme de séquence montrant la communication entre le CandidateApp et le FollowUpServer.",
    "source": "https://github.com/plantuml-stdlib/CandidateApp/blob/master/sequence.uml"
  },
  {
    "prompt": "Diagramme de classes X86 et Bmi1",
    "code": "@startuml\ntitle Diagramme de classes X86 et Bmi1\nclass X86 <<unsafe>> <<static>> <<partial>> {\n}\nclass Bmi1 <<static>> {\n    + {static} IsBmi1Supported : bool <<get>>\n    + {static} andn_u32(a:uint, b:uint) : uint\n    + {static} andn_u64(a:ulong, b:ulong) : ulong\n    + {static} bextr_u32(a:uint, start:uint, len:uint) : uint\n    + {static} bextr_u64(a:ulong, start:uint, len:uint) : ulong\n    + {static} blsi_u32(a:uint) : uint\n    + {static} blsi_u64(a:ulong) : ulong\n}\nX86 +-- Bmi1\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "plantuml", "diagramme de classe"],
    "description": "Ce diagramme UML décrit une relation entre deux classes : X86 et Bmi1.",
    "source": ""
  },
  {
    "prompt": "Diagramme de classe OptionPhysicalSettlement",
    "code": "@startuml\ntitle OptionPhysicalSettlement Class\nclass OptionPhysicalSettlement {\n    +getClearedPhysicalSettlement(): Boolean\n    +getPredeterminedClearingOrganizationPartyReference(): String\n    +toBuilder(): OptionPhysicalSettlement.OptionPhysicalSettlementBuilder\n    {static} +builder(): OptionPhysicalSettlement.OptionPhysicalSettlementBuilder\n    #rosettaKeyValueHashCode(): int\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["PlantUML", "diagramme UML", "classe"],
    "description": "Diagramme de classe représentant l'option de règlement physique.",
    "source": ""
  },
  {
    "prompt": "Diagramme de séquence TravelServiceRequest",
    "code": "@startuml\ntitle Séquence TravelServiceRequest\nallow_mixing\nleft to right direction\npackage \"7\" {\n    class workController\n    class TravelServiceRequestInterfaceImpl\n    interface TravelServiceRequestInterface\n}\npackage \"6\" {\n    class TravelService\n    class TravelServiceHandleRequest\n}\n\"7\" ..> \"6\" : HTTP:findTotalTravelAllowance\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "Sequence", "PlantUml", "Class", "Interface"],
    "description": "Ce diagramme UML représente une séquence de traitement d'une requête. Il montre les classes et interfaces impliquées dans le processus, ainsi que la direction des flux de données.",
    "source": ""
  },
  {
    "prompt": "Diagramme des entités pour un système de gestion de documents",
    "code": "@startuml\ntitle Système de gestion de documents - Base entities\nhide circle\nentity \"m_users : Utilisateurs\" as m_users {\n  *user_id\n  *family_name\n  *first_name\n  *email\n}\nentity \"t_directories : Répertoires\" as t_directories {\n  *directory_id\n  #parent_directory_id\n  #create_user_id\n  #update_user_id\n  *name\n  *is_deleted\n}\nentity \"t_documents : Documents\" as t_documents {\n  *document_id\n  #directory_id\n  #create_user_id\n  #update_user_id\n  *name\n  *content\n  *is_deleted\n}\nm_users ||--o{ t_directories\nm_users ||--o{ t_documents\nt_directories ||---|{ t_documents\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "plantuml", "diagramme de classe", "entity", "association"],
    "description": "Ce diagramme UML représente les entités de bases d'un système de gestion de documents, avec leurs attributs et associations.",
    "source": ""
  }
,  {
    "prompt": "Classe SelectableEditor étendant Editor avec OnInspectorGUI",
    "code": "@startuml\nclass SelectableEditor {\n    + \"<<override>>\" OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["SelectableEditor", "Editor", "OnInspectorGUI"],
    "description": "Le diagramme représente une classe \"SelectableEditor\" qui étend la classe \"Editor\". La méthode \"OnInspectorGUI()\" est définie avec l'attribut « override ».",
    "source": "PlantUML"
  },
  {
    "prompt": "Diagramme de séquence de création d'un plan",
    "code": "@startuml\nautoactivate on\nautonumber\ntitle Create a Plan\nactor Client\nactor User\nparticipant Database\nparticipant ExternalService\nClient -> User: Request plan creation\nUser -> Database: Save plan data\nUser -> ExternalService: Notify plan creation\nExternalService --> User: Confirmation\nDatabase --> User: Data saved\nUser --> Client: Plan created\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "diagramme", "uml"],
    "description": "Ce diagramme décrit la séquence des événements lors de la création d'un plan. Il montre les interactions entre le client, l'utilisateur, les bases de données et les services externes.",
    "source": "https://plantuml.com/sequence-diagram"
  },
  {
    "prompt": "Diagramme de séquence pour suppression de tâche",
    "code": "@startuml\nactor User\nUser -> TaskController: DELETE /task/{id}\nactivate TaskController\nTaskController -> TaskService: deleteTask(id)\nactivate TaskService\nTaskService -> TaskRepository: deleteById(id)\nactivate TaskRepository\nTaskRepository --> TaskService: void\ndeactivate TaskRepository\nTaskService --> TaskController: void\ndeactivate TaskService\nTaskController --> User: ResponseEntity<NO_CONTENT>\ndeactivate TaskController\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "sequence", "diagramme", "interaction"],
    "description": "Ce diagramme montre la séquence d'actions pour supprimer une tâche. Le User envoie une requête DELETE à TaskController qui appelle ensuite TaskService et TaskRepository.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme de séquence suppression d'ingrédient par un client",
    "code": "@startuml\nactor Customer\nCustomer -> System: Delete ingredient\nSystem -> Customer: Ingredient deleted\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["diagramme", "UML", "séquence", "acteur"],
    "description": "Le diagramme représente une interaction entre un client et le système en vue de la suppression d'un ingrédient.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme de classe Event",
    "code": "@startuml\nclass Event {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String eventName;\n    private String eventTime;\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["Event", "Entity", "JPA"],
    "description": "Définition de l'entité \"Event\" avec ses attributs.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Classe ResourceLengthValidator avec méthode validate",
    "code": "@startuml\nclass ResourceLengthValidator {\n    +validate(ResourceLength): ValidationResult<ResourceLength>\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classes"],
    "description": "Définition d'une classe appelée ResourceLengthValidator avec une méthode validate pour valider la longueur d'une ressource.",
    "source": "@startuml"
  }
,
  {
    "prompt": "Diagramme d'activités parallèles pour authentification",
    "code": "@startuml\nskinparam linetype polyline\nskinparam linetype ortho\n(*) --> \"Iniciar\"\nif \"Cuenta\" then\n  --> [No Tienes cuenta] \"Crear una cuenta\"\nelse\n  --> [Si Tienes cuenta] \"Iniciar sesión\"\nendif\n--> === B1 ===\n--> \"Parallel Activity 1\"\n--> === B2 ===\n===B1=== --> \"Parallel Activity 2\"\n--> === B2 ===\n===B1=== --> \"Parallel Activity 3\"\n--> === B2 ===\n===B1=== --> \"Parallel Activity 4\"\n--> === B2 ===\n--> (*)\n@enduml",
    "langage": "plantuml",
    "type": "usecase",
    "tags": ["sequence", "parallele"],
    "description": "Le diagramme décrit un processus d'authentification avec des choix de créations de compte ou connexion existant. Il comprend également des activités parallèles.",
    "source": "https://github.com/plantuml-stdlib/CatalogPlantUML/blob/master/diagrams/usecase/sequence/activity_parallel.puml"
  },
  {
    "prompt": "Diagramme de classes LocksTab et ses interfaces",
    "code": "@startuml\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme UML", "classes", "héritage"],
    "description": "Diagramme de classes décrivant la hiérarchie d'héritage entre LocksTab et ses interfaces",
    "source": "Entrée de diagramme UML"
  },
  {
    "prompt": "Diagramme de classes struct int4x3 et math",
    "code": "@startuml\nstruct int4x3 {\n    + int4x3(c0:int4, c1:int4, c2:int4)\n    + int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int)\n    + int4x3(v:int)\n    + int4x3(v:bool)\n    + int4x3(v:bool4x3)\n    + int4x3(v:uint)\n    + int4x3(v:uint4x3)\n    + int4x3(v:float)\n    + int4x3(v:float4x3)\n    + int4x3(v:double)\n    + int4x3(v:double4x3)\n    + Equals(rhs:int4x3) : bool\n    + <<override>> Equals(o:object) : bool\n    + <<override>> GetHashCode() : int\n    + <<override>> ToString() : string\n    + ToString(format:string, formatProvider:IFormatProvider) : string\n}\nclass math <<static>> <<partial>> {\n    + {static} int4x3(c0:int4, c1:int4, c2:int4) : int4x3\n    + {static} int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int) : int4x3\n    + {static} int4x3(v:int) : int4x3\n    + {static} int4x3(v:bool) : int4x3\n    + {static} int4x3(v:bool4x3) : int4x3\n    + {static} int4x3(v:uint) : int4x3\n    + {static} int4x3(v:uint4x3) : int4x3\n    + {static} int4x3(v:float) : int4x3\n    + {static} int4x3(v:float4x3) : int4x3\n    + {static} int4x3(v:double) : int4x3\n    + {static} int4x3(v:double4x3) : int4x3\n    + {static} transpose(v:int4x3) : int3x4\n    + {static} hash(v:int4x3) : uint\n    + {static} hashwide(v:int4x3) : uint4\n}\nIFormattable <|-- int4x3\nint4x3 --> \"c0\" int4\nint4x3 --> \"c1\" int4\nint4x3 --> \"c2\" int4\nint4x3 --> \"zero\" int4x3\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["struct", "class", "math", "IEquatable`1", "IFormattable"],
    "description": "Ce diagramme UML définit une structure struct int4x3 et des méthodes statiques pour la classe math.",
    "source": ""
  },
  {
    "prompt": "Diagramme de séquence pour l'undéploiement d'une instance d'Automation Composition",
    "code": "@startuml\nparticipant REST\nparticipant ACM_Runtime\nparticipant Participants\ndatabase ACM_Database\n\nREST -> ACM_Runtime: Undeploy Automation Composition Instance\nACM_Runtime -> ACM_Database: Read Automation Composition Instance Information\n\nalt Automation Composition Instance exists \n alt Automation Composition Instance administrative state is not LOCKED \n  ACM_Runtime -> REST: Automation Composition instance exists and is not LOCKED \n else \n  ACM_Runtime -> REST: Automation Composition instance does not exist \n end \nelse \n ACM_Runtime -> Participants: [ASYNC] Undeploy AC Element Instances for this AC Instance\n ACM_Runtime -> ACM_Database: Mark this AC Instance and its AC Element Instances as UNDEPLOYING\n ACM_Runtime -> REST: Undeployment of Automation Composition Instance has been requested\nend\n@enduml",
    "langage": "plantuml",
    "type": "sequence",
    "tags": ["sequence", "UML", "PlantUML", "Automation Composition", "Instance Management"],
    "description": "Ce diagramme UML montre la séquence d'actions pour l'undéploiement d'une instance de composition automatisée. Il décrit les échanges entre différents participants, notamment le serveur REST et le runtime ACM.",
    "source": "PlantUML"
  }
,{
    "prompt": "Diagramme de classe FieldExtensions",
    "code": "@startuml\nclass FieldExtensions <<static>> {\n    + {static} HasPreprocessor(descriptor:FieldDescriptor) : bool\n    + {static} HasSemantic(descriptor:FieldDescriptor) : bool\n    + {static} HasFlag(descriptor:FieldDescriptor, options:StructFieldOptions) : bool\n    + {static} ToFieldString(descriptor:FieldDescriptor) : string\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["field", "descriptor", "preprocessor", "semantic", "flag"],
    "description": "Diagramme de classe UML représentant les méthodes statiques d'un objet FieldExtensions.",
    "source": ""
  },
  {
    "prompt": "Diagramme de séquence StatisticMapper",
    "code": "@startuml\nactor Client\nClient -> StatisticMapper: map(statistic: Statistic)\nactivate StatisticMapper\nStatisticMapper -> StatisticDto: createDto()\nStatisticMapper --> Client: return StatisticDto\ndeactivate StatisticMapper\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["statisticMapper", "StatisticMapper", "statisticDto", "Statistic", "Sequence"],
    "description": "Diagramme de séquence montrant l'échange d'informations entre des classes StatisticMapper, Statistic et StatisticDto.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme d'état Listar Egresados",
    "code": "@startuml\nstart\nif (Tienes cuenta?) then (no)\n  :Crear una cuenta;\nelse (sí)\n  :Iniciar sesión;\nendif\n:Mostrar lista de egresados;\nif (Error al listar?) then (sí)\n  :Mostrar error;\nendif\nstop\n@enduml",
    "langage": "PlantUML",
    "type": "state machine",
    "tags": ["diagramme d'état", "système de gestion des étudiants"],
    "description": "Diagramme d'état représentant la gestion des étudiants, avec les états de début et fin, ainsi que le processus de liste des étudiants.",
    "source": "https://github.com/plantuml-stdlib/CatalogPlantUML/blob/master/uml/state-machine.uml"
  },
  {
    "prompt": "Diagramme de classes BaseChunk et NoneChunk",
    "code": "@startuml\nclass NoneChunk {\n}\nBaseChunk <|-- NoneChunk\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme", "uml", "plantuml"],
    "description": "Diagramme de classes montrant les relations entre les classes BaseChunk et NoneChunk.",
    "source": "@startuml\nclass NoneChunk {\n}\nBaseChunk <|-- NoneChunk\n@enduml"
  },
  {
    "prompt": "Diagramme de classes serveur Netty",
    "code": "@startuml\nclass ServerConfig {}\nclass HttpHandler {}\nclass HeartbeatHandler {}\nclass MessageHandler {}\nServerConfig --> HttpHandler\nHttpHandler --> HeartbeatHandler\nHttpHandler --> MessageHandler\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["Netty", "ServerConfig", "HttpHandler", "HeartbeatHandler", "MessageHandler"],
    "description": "Diagramme de classes UML représentant une architecture de serveur Netty avec des classes pour la configuration, l'écoute des requêtes HTTP et les gestionnaires de signaux de cœur",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme de séquence création d'objet",
    "code": "@startuml\nactor User\nUser -> ObjectFactory: createObject()\nactivate ObjectFactory\nObjectFactory -> Object: initialize()\nObjectFactory --> User: return Object\ndeactivate ObjectFactory\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["uml", "sequence", "diagramme", "PlantUML"],
    "description": "Ce diagramme UML représente la séquence d'exécution d'une méthode de création d'un objet. Il montre les participants et leurs interactions.",
    "source": "https://github.com/plantuml/plantuml/blob/master/samples/sd.puml"
  },
  {
    "prompt": "Diagramme de classes CinemachineCollider",
    "code": "@startuml\nclass CinemachineCollider {}\nclass ResolutionStrategy {}\nclass VcamExtraState {}\nCinemachineCollider --> ResolutionStrategy\nCinemachineCollider --> VcamExtraState\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["CinemachineCollider", "ResolutionStrategy", "VcamExtraState"],
    "description": "Le diagramme décrit les classes CinemachineCollider, ResolutionStrategy et VcamExtraState, ainsi que leurs relations.",
    "source": "https://plantuml.com/"
  }
,{
    "prompt": "Sprite Google Developers en PlantUML",
    "code": "@startuml\nsprite $google-developers [102x11/16] {\n001999009997000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n009990000999000000018888500000000000000000008000000001110000000000000000000010000000000000000000000000\n089980000999900000180000100000000000000000008000000007225800000000000000000070000000000000000000000000\n088900000099900000830000000000000000000000008000100007000080000000000000000070000000000000000000000000\n888400000029990000800088880887800888800878808058680007000080573808000818383070856808838607748078608368\n888800000019990000800033383800386700678400808080487007000080822270808082228074200528000808223570008200\n088800000044900000780000384800187500588100808088100007000080800000808080000076100338000808000070000187\n088880000444900000088208800820820810801802808088088007000810800640182056018070800808800808008170008008\n008883000444000000000774000067000077000076805004750005553000067300050003750050077008076000671050000760\n000888004440000000000000000000000000004800800000000000000000000000000000000000000008000000000000000000\n000000000000000000000000000000000000000888100000000000000000000000000000000000000008000000000000000000\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["sprite", "google-developers"],
    "description": "Diagramme UML représentant un sprite $google-developers utilisant les symboles PlantUML pour la disposition et les couleurs.",
    "source": "@startuml\nsprite $google-developers [102x11/16] {\n... (le code entier)\n}\n@enduml"
  },
  {
    "prompt": "Diagramme arbre de fabrication",
    "code": "@startuml\ngraph TreeDiagram {\n  \"Pot acier inox\" --> \"Corps\"\n  \"Pot acier inox\" --> \"Couvercle\"\n  \"Corps\" --> \"Découpe\"\n  \"Corps\" --> \"Soudure\"\n  \"Couvercle\" --> \"Découpe\"\n  \"Couvercle\" --> \"Assemblage\"\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["Tree", "Diagram"],
    "description": "Diagramme montrant l'arbre de fabrication d'un pot en acier inoxydable.",
    "source": ""
  },
  {
    "prompt": "Classe GraphDataReadOnly",
    "code": "@startuml\nstruct GraphDataReadOnly {\n    + GraphDataReadOnly(graph:GraphData)\n    + AnyVertexAnimationActive() : bool\n    + IsVFXCompatible() : bool\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["graph", "data", "readonly"],
    "description": "Définition d'une classe pour les données de graphique en lecture seule.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme d'utilisation AI et IoT",
    "code": "@startuml\npackage \"AI Services\" {\n  node \"AI-Center Services Group\" as center\n  database \"PostgreSQL\" as PG\n  center <--> [srv-device-hub]\n  [srv-device-hub] ..> PG : use\n}\npackage \"External Device Group\" as external {\n  node \"IoT Platforms\" as iot\n  node \"Video Platforms\" as video\n  node \"Camera Groups\"\n}\n[srv-device-hub] <-> external : sync\n@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": ["plantuml", "uml", "usecase"],
    "description": "Diagramme de cas d'utilisation montrant les interactions entre les services AI et les plateformes IoT.",
    "source": ""
  },
  {
    "prompt": "Héritage IRecordsRepository et IGenericRepository",
    "code": "@startuml\ninterface IRecordsRepository {\n}\nclass \"IGenericRepository`1\"<T> {\n}\n\"IGenericRepository`1\" <|-- IRecordsRepository\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme", "uml", "interface", "classe", "héritage"],
    "description": "Diagramme UML montrant l'héritage entre deux classes et une interface.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme de séquence Path Management",
    "code": "@startuml\nactor User\nUser -> PathManager: requestPaths()\nactivate PathManager\nPathManager -> PathService: getPaths()\nPathService --> PathManager: returnPaths()\nPathManager --> User: returnPaths()\ndeactivate PathManager\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["path", "management", "sequence"],
    "description": "Ce diagramme décrit la séquence d'appel entre les différents composants lors de la récupération des chemins.",
    "source": "https://github.com/plantuml/plantuml-examples/blob/master/src/flow/PathManagement.pu"
  }
,{
    "prompt": "Classe GranularSystem avec attributs et méthodes",
    "code": "@startuml\nclass GranularSystem{\n    - int iterations\n    - double dt\n    - double frequency\n    - double holeSize\n    - String outputFileName\n    - List<Particle> particleList\n    - List<Vertex> limitsList\n    - List<Double> timesList\n    - List<Double> energyList\n    - Simulation simulation\n    + GranularSystem(double dt, double holeSize, double iterations, double frequency, String outputFileName, List<Particle> particles)\n    + void run()\n    + List<Double> getTimes()\n    + List<Double> getEnergy()\n}\n@enduml",
    "langage": "UML",
    "type": "class",
    "tags": ["GranularSystem", "Particle", "Vertex", "Simulation"],
    "description": "Diagramme UML représentant une classe GranularSystem avec ses attributs et méthodes.",
    "source": "@startuml\nclass GranularSystem{...}\n@enduml"
  },
  {
    "prompt": "Diagramme de classes pour entreprise constructrice",
    "code": "@startuml\nhide circle\nskinparam classAttributeIconSize 0\nskinparam backgroundColor White\nskinparam RoundCorner 10\nskinparam Shadowing true\n\nskinparam class {\n    ArrowColor DarkBlue\n    BackgroundColor LightBlue\n    BorderColor DarkBlue\n}\nskinparam note {\n    BackgroundColor LightYellow\n    BorderColor DarkBlue\n}\n\ntitle Diagrama CS9 - Empresa constructora\n\nclass Proyecto {\n    - nombre : String\n    - codigo : int\n    - cdadHorasPorHombre : int\n    + empezar() : void\n    + diseniar() : void\n    + desarrollarProyecto() : void\n    + implementarProyecto() : void\n    + hacerSeguimiento() : void\n    + terminar() : void\n}\n\nclass Empresa {\n    - nombre : String\n    - nroIdentificacion : int\n    + contratar(e : Empleado) : void\n    + despedir(e : Empleado) : void\n    + ofrecerServicio() : String\n}\n\nclass Empleado {\n    - nombre : String\n    - sueldoFijo : double\n    + {abstract} calcularSueldo() : double\n    + trabajar() : void\n}\n\nclass EmpleadoSueldoFijo {\n    + calcularSueldo() : double\n}\n\nclass EmpleadoSueldoPorHora {\n    - importePorHora : double\n    - horasTrabajadas : int\n    + calcularSueldo() : double\n    + trabajar() : void\n}\nProyecto \"*\" *-- \"*\" Empleado\nEmpresa \"1\" *-- \"*\" Proyecto\nEmpleado <|-- EmpleadoSueldoFijo\nEmpleado <|-- EmpleadoSueldoPorHora\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["diagramme UML", "classes", "objets", "associations"],
    "description": "Ce diagramme décrit les relations entre les classes Proyecto, Empresa et Empleado. Il montre comment un projet peut être associé à plusieurs employés et une entreprise peut avoir plusieurs projets en cours.",
    "source": "@startuml\nhide circle ...\n@enduml"
  },
  {
    "prompt": "Architecture de la plateforme ATAP",
    "code": "@startuml\nskinparam defaultFontSize 18\n\ntitle ATAP Architecture\nrectangle \"Text Analytics Platform\" as atap {\n    node \"Notebooks\" as nb\n    node \"Processing\" as proc\n}\ndatabase \"OCFL Repository\" as repo\nrectangle \"API\" as oni\natap --> repo\natap --> oni\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["ATAP", "architecture", "notebook", "api", "repository"],
    "description": "Le diagramme représente l'architecture de la plateforme ATAP, comprenant des notebooks, une API, un repository et des processus d'accès au contrôle.",
    "source": "@startuml\nskinparam defaultFontSize 18 ...\n@enduml"
  },
  {
    "prompt": "Relations entre UnitEditor, GraphElementEditor et Styles",
    "code": "@startuml\nclass UnitEditor {\n    + UnitEditor(metadata:Metadata)\n}\nclass \"GraphElementEditor`1\"<T> {\n}\nclass Styles <<static>> {\n    + {static} <<readonly>> spaceBetweenPorts : float = 5\n}\n\"GraphElementEditor`1\" <|-- UnitEditor\nUnitEditor +-- Styles\nStyles --> \"portsBackground\" GUIStyle\nStyles --> \"portsLabel\" GUIStyle\nStyles --> \"portLabel\" GUIStyle\nStyles --> \"portDescription\" GUIStyle\nStyles --> \"portIcon\" GUIStyle\nStyles --> \"inspectorBackground\" GUIStyle\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UnitEditor", "GraphElementEditor`1", "Styles", "GUIStyle"],
    "description": "Le diagramme représente les relations entre les classes UnitEditor, GraphElementEditor et Styles. Les styles sont définis statiquement dans la classe Styles.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Classe Texture2DArrayShaderProperty et AbstractShaderProperty`1",
    "code": "@startuml\nclass Texture2DArrayShaderProperty {\n}\nclass \"AbstractShaderProperty`1\"<T> {\n}\n\"AbstractShaderProperty`1\" <|-- Texture2DArrayShaderProperty\nTexture2DArrayShaderProperty --> \"propertyType\" PropertyType\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classe"],
    "description": "Le diagramme montre les classes Texture2DArrayShaderProperty et AbstractShaderProperty`1 avec une relation d'héritage.",
    "source": "@startuml"
  },
  {
    "prompt": "Sprite Pied Piper PP et entité rectangulaire",
    "code": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n0000000000000000\n... (données du sprite)\n}\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\nskinparam folderBackgroundColor<<FA PIED_PIPER_PP>> White\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["sprite", "entity", "rectangle", "pied_piper_pp"],
    "description": "Diagramme de composant décrivant un sprite avec une entité rectangulaire.",
    "source": "https://plantuml.com/"
  }
,{
    "prompt": "Diagramme de composants montrant les couches d'une application Motorblok",
    "code": "@startuml\ntitle Motorblok\nfooter: OpenWoo.app\nheader: OpenWoo.app\npackage \"Publicatie platformen\" {\n  [Frontend] --> [API]\n}\npackage \"Services\" {\n  [Service1]\n  [Service2]\n}\npackage \"Integratie\" {\n  [Integration1]\n}\npackage \"API\" {\n  [REST API]\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": [
      "Publicatie platformen",
      "Services",
      "Integratie",
      "API",
      "component"
    ],
    "description": "Diagramme UML montrant les différentes couches d'une application : Publicatie platformen, Services, Integratie et API.",
    "source": ""
  },
  {
    "prompt": "Diagramme de séquence C4 représentant l'interaction entre un acteur, SPA et API",
    "code": "@startuml\nactor Actor as Actor\nparticipant \"SPA\" as Container <<Container (C4)>>\nparticipant \"GestaoInfoAPI\" as API <<Container (C4)>>\nActor -> Container : Request Data\nContainer -> API : Fetch Info\nAPI --> Container : Return Data\nContainer --> Actor : Response\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["actor", "participant", "container", "C4"],
    "description": "Diagramme de séquence représentant l'interaction entre un acteur, une application (SPA) et une API.",
    "source": ""
  },
  {
    "prompt": "Hiérarchie d'héritage entre GraphElementDescription, Description et IGraphElementDescription",
    "code": "@startuml\nabstract class GraphElementDescription {\n}\nclass Description {\n}\ninterface IGraphElementDescription {\n}\nDescription <|-- GraphElementDescription\nIGraphElementDescription <|-- GraphElementDescription\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme", "uml", "plantuml", "graphical"],
    "description": "Diagramme UML montrant la hiérarchie d'inheritance entre GraphElementDescription, Description et IGraphElementDescription.",
    "source": "https://www.plantuml.com/"
  },
  {
    "prompt": "Classe de contrôleur NotificationsController avec méthodes asynchrones",
    "code": "@startuml\nclass NotificationsController {\n    + NotificationsController(context:DefaultContext)\n    + «async» GetNotifications() : Task<ActionResult<IEnumerable<Notification>>>\n    + «async» GetNotification(id:int) : Task<ActionResult<Notification>>\n    + «async» PutNotification(id:int, notification:Notification) : Task<IActionResult>\n    + «async» PostNotification(notification:Notification) : Task<ActionResult<Notification>>\n    + «async» DeleteNotification(id:int) : Task<IActionResult>\n}\nControllerBase <|-- NotificationsController\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": [
      "NotificationsController",
      "ControllerBase",
      "async"
    ],
    "description": "Diagramme de classe décrivant la structure d'une classe de contrôleur de notifications.",
    "source": "@startuml\nclass NotificationsController {...}\n@enduml"
  }
, {
    "prompt": "Classe Changelog_1_0_3 et ses relations avec PluginChangelog, SemanticVersion et DateTime",
    "code": "@startuml\nclass Changelog_1_0_3 {\n    + Changelog_1_0_3(plugin:Plugin)\n    + <<override>> description : string <<get>>\n}\nclass \"IEnumerable`1\"<T> {\n}\nPluginChangelog <|-- Changelog_1_0_3\nChangelog_1_0_3 --> \"version\" SemanticVersion\nChangelog_1_0_3 --> \"date\" DateTime\nChangelog_1_0_3 --> \"changes<string>\" \"IEnumerable`1\"\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["PlantUML", "diagramme de classes"],
    "description": "Définition d'une classe Changelog_1_0_3 et de ses relations avec d'autres classes.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme UML des pages Web Apache Wicket avec InsertContact et ListContacts",
    "code": "@startuml\n\ntitle \"org.apache.wicket.arquillian.testing.pages\"\n\nWebPage <|-- InsertContact\nclass InsertContact {\n    --(constructors)--\n    +InsertContact()\n    --(naming)--\n    +String getName()\n    +void setName(String name)\n    --(network)--\n    +String getEmail()\n    +void setEmail(String email)\n}\n\nWebPage <|-- ListContacts\nclass ListContacts {\n    --(constructors)--\n    +ListContacts()\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["plantuml", "uml", "diagramme", "classes", "association"],
    "description": "Ce diagramme UML décrit les classes \"InsertContact\" et \"ListContacts\" qui héritent de la classe \"WebPage\".",
    "source": "@startuml"
  },
  {
    "prompt": "Classe Point avec interfaces IComparable`1 et IEquatable`1",
    "code": "@startuml\nclass Point {\n    + Point()\n    + Point(x:double, y:double)\n    + Point(x:double, y:double, label:int)\n    + ID : int <<get>> <<set>>\n    + X : double <<get>> <<set>>\n    + Y : double <<get>> <<set>>\n    + Label : int <<get>> <<set>>\n    + <<override>> Equals(obj:object) : bool\n    + Equals(p:Point) : bool\n    + CompareTo(other:Point) : int\n    + <<override>> GetHashCode() : int\n}\nclass \"IComparable`1\"<T> {\n}\nclass \"IEquatable`1\"<T> {\n}\n\"IComparable`1\" \"<Point>\" <|-- Point\n\"IEquatable`1\" \"<Point>\" <|-- Point\n@enduml",
    "langage": "UML",
    "type": "class",
    "tags": ["UML", "Class", "Point", "IComparable`1", "IEquatable`1"],
    "description": "Diagramme UML de classes définissant les propriétés et méthodes d'une classe Point ainsi que ses implémentations de interfaces IComparable`1 et IEquatable`1.",
    "source": "https://plantuml.com/fr/"
  },
  {
    "prompt": "Diagramme UML d'un composant Movie avec la bibliothèque bootstrap",
    "code": "@startuml\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('material-4/bootstrap')\ninclude('material-4/Av/Movie')\nMovie('Movie', 'Movie', 'an optional tech label', 'an optional description')\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["plantuml", "diagramme", "umlet", "sequence"],
    "description": "Diagrame UML qui montre une application avec les éléments Movie.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme UML configurant la bibliothèque simpleicons et l'élément Veepee",
    "code": "@startuml\n!global $INCLUSION_MODE=\"local\"\n!global $LIB_BASE_LOCATION=\"../..\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('simpleicons-14/bootstrap')\ninclude('simpleicons-14/V/Veepee')\nVeepee('Veepee', 'Veepee', 'an optional tech label', 'an optional description')\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["PlantUML", "diagramme UML", "component"],
    "description": "Diagramme UML qui configure la bibliothèque, charge les fichiers de bootstrap et déclare un élément Veepee.",
    "source": "https://plantuml.com/"
  }
,[
  {
    "prompt": "Diagramme UML représentant la séquence de consultation d'un rapport d'aspirant",
    "code": "@startuml\nactor Usuario\nparticipant Sistema\nparticipant BaseDatos\n\nUsuario -> Sistema: Solicita consultar reporte\nSistema -> BaseDatos: Verifica privilegios y obtiene datos\nBaseDatos --> Sistema: Datos del aspirante\nSistema --> Usuario: Muestra reporte\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "sequence", "diagramme", "plantuml"],
    "description": "Ce diagramme UML représente la séquence d'exécution d'une requête pour consulter un rapport d'aspirant. L'utilisateur est connecté et les privilèges sont vérifiés avant d'accéder aux données.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme de séquence C4 pour la création d'un compte dans Big Bank Plc",
    "code": "@startuml\n!include ../../../../../../.c4s/C4_Sequence.puml\ntitle Big Bank Plc - Internet Banking - API Application - Create Account\n\nSystem_Ext(ExternalSystem, \"External\", \"\")\nSystem(InternetBanking, \"Internet Banking\", \"Fournit des services Internet Banking\")\nSystem_Ext(MainframeBankingSystem, \"Mainframe Banking System\", \"\")\nSystem_Ext(EMailSystem, \"E-Mail System\", \"Système interne Microsoft Exchange\")\n\nRel(ExternalSystem, InternetBanking, \"Create Account\")\nRel(InternetBanking, MainframeBankingSystem, \"Create Account\")\nRel(InternetBanking, EMailSystem, \"Send New Account Created Notification E-Mail\")\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["C4 Sequence", "Context level", "Internet Banking"],
    "description": "Ce diagramme UML représente la séquence de création d'un compte en ligne pour l'application API du système bancaire Big Bank Plc. Il montre les systèmes et les relations entre eux.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme d'état représentant la gestion des étudiants pour la fonction Listar Egresados",
    "code": "@startuml\ntitle Listar Egresados\nskinparam { NoteBackgroundColor #whiteSmoke ArrowColor #green NoteBorderColor #green linetype polyline }\nhide empty description\n\nstate startState as \"GESTIÓN_EGRESADOS\"\nstate endState as \"GESTIÓN_EGRESADOS\"\n\nstartState --> ListarEgresados\nnote on link <b>Administrador Solicita</b> * Listar Egresados en Alumni end note\nListarEgresados --> endState\n\nstate ListarEgresados {\n  state 2 as \" \"\n  [*] --> [*]\n  note on link <b>Sistema Muestra</b> * Egresados en Alumni end note\n  [*] -[#red]-> 2\n  note on link Error al listar Egresados en Alumni end note\n  2 -[#red]-> [*]\n  note on link <b>Sistema Muestra</b> * Error al listar Egresados en Alumni end note\n}\n@enduml",
    "langage": "PlantUML",
    "type": "state machine",
    "tags": ["diagramme d'état", "système de gestion des étudiants"],
    "description": "Diagramme d'état représentant la gestion des étudiants, avec les états de début et fin, ainsi que le processus de liste des étudiants.",
    "source": "https://github.com/plantuml-stdlib/CatalogPlantUML/blob/master/uml/state-machine.uml"
  },
  {
    "prompt": "Diagramme UML qui configure la bibliothèque et inclut l'élément Boulanger",
    "code": "@startuml\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('simpleicons-14/bootstrap')\ninclude('simpleicons-14/B/Boulanger')\nBoulanger('Boulanger', 'Boulanger', 'an optional tech label', 'an optional description')\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["plantuml", "library", "bootstrap", "package", "item", "boulanger"],
    "description": "Diagramme UML qui montre la configuration d'une bibliothèque et l'inclusion de plusieurs éléments.",
    "source": "https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution/bootstrap.puml"
  }
]

,{
    "prompt": "Diagramme d'objets UML pour le contexte d'un atelier de réparation",
    "code": "@startuml\nobject Voiture {\n    marque: string\n    modele: string\n}\nobject Atelier {\n    nom: string\n    adresse: string\n}\nobject Reparation {\n    date: DateTime\n    type: string\n}\nVoiture --> Reparation\nAtelier --> Reparation\n@enduml",
    "langage": "PlantUML",
    "type": "object diagram",
    "tags": ["diagramme UML", "objets", "relations"],
    "description": "Ce diagramme illustre les objets et leurs relations dans le contexte d'un atelier de réparation. Il montre comment ces objets interagissent pour représenter un processus.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme de classes UML représentant un jeu avec joueurs, plateau et dés",
    "code": "@startuml\nclass Game {\n    List<Player> players\n    Board board\n    Dice dice\n    int turn\n    GameState state {NOT_STARTED, IN_PROGRESS, COMPLETED}\n    void start()\n    Position movePiece(Piece piece, int value)\n}\nGame o-- Dice\nGame o-- Board\nGame -- Player\n@enduml",
    "langage": "PlantUML",
    "type": "class-diagram",
    "tags": ["PlantUML", "diagramme de classe", "jeu"],
    "description": "Ce diagramme de classes représente un jeu avec des joueurs, une board et des dés. Il décrit les relations entre ces entités.",
    "source": "@startuml https://plantuml.com/class-diagram"
  },
  {
    "prompt": "Diagramme de séquence UML montrant l'algorithme de recherche d'une paire entre deux joueurs",
    "code": "@startuml\nactor User\nparticipant FrontEnd\nparticipant ControlServer\ndatabase BDD\n\nUser -> FrontEnd: Envoyer requête\nFrontEnd -> ControlServer: Transmettre données\nControlServer -> BDD: Vérifier la valeur du dé\nBDD --> ControlServer: Retourne valeur\nControlServer --> FrontEnd: Résultat de la vérification\nFrontEnd --> User: Affiche résultat\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "diagramme", "uml", "algorithmie"],
    "description": "Ce diagramme UML montre l'algorithme de recherche d'une paire entre deux joueurs.",
    "source": "@startuml Algorithme : Recherche Paire"
  },
  {
    "prompt": "Diagramme UML représentant un sprite avec fonctions de dessin SVG pour Ktor",
    "code": "@startuml\n'sprite Ktor example\nsprite $ktor [16x16]\n0000000000000000\n0111111111111100\n0110000000011000\n0110111111011000\n0110100001011000\n0110100001011000\n0110111111011000\n0110000000011000\n0111111111111100\n0000000000000000\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sprite", "ktor"],
    "description": "Diagramme UML représentant un sprite avec des fonctions de dessin SVG.",
    "source": "@startuml sprite ktor <svg>...</svg> @enduml"
  },
 {
    "prompt": "Diagramme de séquence UML montrant la comparaison de performances entre Master et Worker",
    "code": "@startuml\nautonumber \"<b>[00]\"\nparticipant Master as m\nparticipant Worker as w\n\nm -> m : list_directory()\nm -> m : split_files_into_groups()\nm -> w : assign_first_group()\nw -> w : process_files()\nw -> m : return_results()\nm -> m : aggregate_results()\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "diagramme UML", "comparaison de performances"],
    "description": "Ce diagramme décrit un processus de comparaison de performances entre deux processeurs : Master et Worker. Le Master charge les fichiers, les divise en groupes égaux et attribue le premier groupe au Worker.",
    "source": "@startuml..."
  },
  {
    "prompt": "Diagramme UML représentant l'élément PesoSign de la bibliothèque FontAwesome-6",
    "code": "@startuml\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('fontawesome-6/bootstrap')\ninclude('fontawesome-6/Solid/PesoSign')\nPesoSign('PesoSign', 'Peso Sign', 'an optional tech label', 'an optional description')\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["fontawesome", "plantuml", "solid", "peso"],
    "description": "Diagramme UML représentant l'élément PesoSign avec les caractéristiques de la bibliothèque fontawesome-6.",
    "source": "https://github.com/tmorin/plantuml-libs"
  },
  {
    "prompt": "Diagramme de classes UML montrant les relations entre User, Company, Offer, Subscription, Demand et UserDemandInterest",
    "code": "@startuml\nhide circle\nhide stereotype\nclass User {\n    + id : Long\n    + name : String\n    + email : String\n    + password : String\n}\nclass Company {\n    + id : Long\n    + name : String\n    + email : String\n    + password : String\n}\nclass Offer {\n    + id : Long\n    + departureCity : String\n    + arrivalCity : String\n    + departureTime : DateTime\n    + arrivalTime : DateTime\n    + subscriptionStart : Date\n    + subscriptionEnd : Date\n    + description : String\n    + capacity : int\n}\nclass Subscription {\n    + id : Long\n    + dateSubscribed : DateTime\n    + status : String\n}\nclass Demand {\n    + id : Long\n    + departureCity : String\n    + arrivalCity : String\n    + desiredTime : DateTime\n    + desiredPeriodStart : Date\n    + desiredPeriodEnd : Date\n    + status : String\n}\nclass UserDemandInterest {\n    + id : Long\n    + dateInterested : DateTime\n}\nCompany \"1\" -- \"0..*\" Offer : creates\nOffer \"1\" -- \"0..*\" Subscription : has\nUser \"1\" -- \"0..*\" Subscription : subscribes to\nUser \"1\" -- \"0..*\" Demand : creates\nUser \"1\" -- \"0..*\" UserDemandInterest : is interested in\nDemand \"1\" -- \"0..*\" UserDemandInterest : has interest from\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["User", "Company", "Offer", "Subscription", "Demand", "UserDemandInterest"],
    "description": "Diagramme de classes montrant les relations entre les entités User, Company, Offer, Subscription et Demand.",
    "source": ""
  },
  {
    "prompt": "Diagramme UML des relations entre artefacts et images Docker dans un projet Helm",
    "code": "@startuml\nartifact HelmChart1\nartifact DockerImage1\nartifact DockerImage2\nHelmChart1 --> DockerImage1\nHelmChart1 --> DockerImage2\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["plantuml", "diagramme", "uml", "component"],
    "description": "Ce diagramme UML représente les relations entre différentes artefacts et images Docker utilisés dans un projet Helm. Il montre également les dépendances entre ces artefacts.",
    "source": "@startuml...@enduml"
  },
  {
    "prompt": "Diagramme UML utilisant Font Awesome pour représenter un élément FaceKiss",
    "code": "@startuml\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('fontawesome-6/bootstrap')\ninclude('fontawesome-6/Regular/FaceKiss')\nFaceKiss('FaceKiss', 'Face Kiss', 'an optional tech label', 'an optional description')\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["plantuml", "fontawesome", "bootstrap"],
    "description": "Diagramme de classe utilisant la bibliothèque Font Awesome, qui définit un élément FaceKiss.",
    "source": "https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution/bootstrap.puml"
  },
  {
    "prompt": "Diagramme UML chargeant un élément DirectionsBike depuis une bibliothèque Material-4",
    "code": "@startuml\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('material-4/bootstrap')\ninclude('material-4/Maps/DirectionsBike')\nDirectionsBike('DirectionsBike', 'Directions Bike', 'an optional tech label', 'an optional description')\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["plantuml", "uml", "sequence", "usecase", "class", "component"],
    "description": "Ce diagramme UML charge un élément de type DirectionsBike.",
    "source": "https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution/bootstrap.puml"
  },
  {
    "prompt": "Diagramme UML définissant un composant Paritysubstrate et chargeant ses éléments associés",
    "code": "@startuml\n!global $INCLUSION_MODE=\"local\"\n!global $LIB_BASE_LOCATION=\"../..\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('simpleicons-14/bootstrap')\ninclude('simpleicons-14/P/Paritysubstrate')\nParitysubstrate('Paritysubstrate', 'Paritysubstrate', 'an optional tech label', 'an optional description')\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["plantuml", "diagramme", "uml", "composant", "élément"],
    "description": "ce diagramme définit un composant PlantUML qui charge une bibliothèque et ses éléments associés",
    "source": "https://github.com/plantuml/plantuml-include"
  }
,
  {
    "prompt": "Diagramme UML représentant l'élément GoodreadsG de FontAwesome",
    "code": "@startuml\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('fontawesome-6/bootstrap')\ninclude('fontawesome-6/Brands/GoodreadsG')\nGoodreadsG('GoodreadsG', 'Goodreads G', 'an optional tech label', 'an optional description')\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["uml", "plantuml", "component"],
    "description": "Création d'un composant UML représentant l'élément GoodreadsG avec un label technique et une description.",
    "source": "https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution"
  },
  {
    "prompt": "Modèle de classe UML représentant une base de données avec ses propriétés",
    "code": "@startuml Database\n!theme crt-amber\nnamespace LunarDB.QueryData {\n struct Database {\n    + operation_type : Primitives::EDatabaseOperationType\n    + name : std::string\n    + backup_path : std::optional<std::string>\n }\n}",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["uml", "plantuml", "database", "querydata"],
    "description": "Modèle de classe représentant une base de données avec ses propriétés.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme UML représentant le composant SecurityScorecard depuis simpleicons-14",
    "code": "@startuml\n!global $INCLUSION_MODE=\"local\"\n!global $LIB_BASE_LOCATION=\"../..\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('simpleicons-14/bootstrap')\ninclude('simpleicons-14/S/Securityscorecard')\nSecurityscorecard('Securityscorecard', 'Securityscorecard', 'an optional tech label', 'an optional description')\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["securityscorecard", "simpleicons-14", "bootstrap"],
    "description": "Diagramme UML qui définit une composante SecurityScorecard avec ses paramètres",
    "source": "https://github.com/plantuml-stdlib/C4/blob/master/docs/README.md"
  },
  {
    "prompt": "Diagramme UML représentant le composant BasketShopping avec FontAwesome",
    "code": "@startuml\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('fontawesome-6/bootstrap')\ninclude('fontawesome-6/Solid/BasketShopping')\nBasketShopping('BasketShopping', 'Basket Shopping', 'an optional tech label', 'an optional description')\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["uml", "plantuml", "fontawesome"],
    "description": "Ce diagramme UML définit un composant nommé BasketShopping, qui inclut une icône de shopping, avec des étiquettes et descriptions optionnelles.",
    "source": ""
  },
  {
    "prompt": "Diagramme de séquence UML illustrant l'initialisation d'un système embarqué avec MCU, Bootloader et Application",
    "code": "@startuml\nMCU -> Bootloader: reset\nactivate Bootloader\nBootloader -> Bootloader: Recover? (no)\nBootloader -> Bootloader: New version? (no)\nBootloader -> Application: Jump to primary slot\ndeactivate Bootloader\n\nactivate Application\nnote right: This is the current version of the firmware\nApplication -> Application: OTA procedure\nnote right: Download a new firmware version and\\n store it in secondary slot\nApplication -> MCU: Reset\ndeactivate Application\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "diagramme", "uml", "fichier de démarrage", "loader", "application"],
    "description": [
      "Ce diagramme décrit l'initialisation d'un système embarqué.",
      "Il montre les échanges entre le microcontrôleur, le bootloader et l'application."
    ],
    "source": "@startuml"
  }
,  {
    "prompt": "Diagramme UML de séquence illustrant l'interaction entre un MCU et un bootloader, suivi de l'exécution d'un processus OTA par une application",
    "code": "@startuml\nMCU -> Bootloader: reset\nactivate Bootloader\nBootloader -> Bootloader: Recover? (no)\nBootloader -> Bootloader: New version? (no)\nBootloader -> Application: Jump to primary slot\ndeactivate Bootloader\n\nactivate Application\nnote right: Firmware actuel\nApplication -> Application: Procédure OTA\nnote right: Télécharger la nouvelle version du firmware et la stocker dans le slot secondaire\nApplication -> MCU: Reset\ndeactivate Application\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["uml", "sequence", "diagramme", "OTA", "bootloader", "MCU"],
    "description": "Le diagramme décrit l'interaction entre un MCU et un bootloader, suivi de l'exécution d'un processus OTA par une application.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme UML de séquence illustrant le processus de mise à jour du firmware via OTA",
    "code": "@startuml\nMCU -> Bootloader: reset\nactivate Bootloader\nBootloader -> Bootloader: Recover? (no)\nBootloader -> Bootloader: New version? (no)\nBootloader -> Application: Jump to primary slot\ndeactivate Bootloader\n\nactivate Application\nnote right: Version actuelle du firmware\nApplication -> Application: Procédure OTA\nnote right: Téléchargement et stockage de la nouvelle version dans le slot secondaire\nApplication -> MCU: Reset\ndeactivate Application\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "diagramme de séquence", "mise à jour du firmware", "OTA"],
    "description": "Ce diagramme illustre le processus de mise à jour du firmware d'un système, en particulier la procédure OTA (Over-The-Air).",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme UML de séquence montrant la mise à jour OTA sur un appareil",
    "code": "@startuml\nMCU -> Bootloader: reset\nactivate Bootloader\nBootloader -> Bootloader: Recover? (no)\nBootloader -> Bootloader: New version? (no)\nBootloader -> Application: Jump to primary slot\ndeactivate Bootloader\n\nactivate Application\nnote right: Version actuelle du firmware\nApplication -> Application: Procédure OTA\nnote right: Télécharger le firmware et stocker dans le slot secondaire\nApplication -> MCU: Reset\ndeactivate Application\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["uml", "sequence", "diagramme", "OTA", "firmware"],
    "description": "Le diagramme décrit le processus de mise à jour d'un firmware via OTA (Over The Air) sur un appareil.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme UML représentant une entité matérialisée avec sprite et macros pour rectangles noirs",
    "code": "@startuml\nsprite $skip_next [48x48/16] {\n  00000000000000000000000000000000\n  01111111111111111111111111111110\n  01000000000000000000000000000010\n  01011111111111111111111111111010\n  01010000000000000000000000001010\n  01010111111111111111111111101010\n  01010000000000000000000000001010\n  01011111111111111111111111111010\n  01000000000000000000000000000010\n  01111111111111111111111111111110\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n}\n\n!define MATERIAL_SKIP_NEXT(_alias) ENTITY(rectangle,black,skip_next,_alias,MATERIAL_SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label) ENTITY(rectangle,black,skip_next,_label,_alias,MATERIAL_SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape) ENTITY(_shape,black,skip_next,_label,_alias,MATERIAL_SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape, _color) ENTITY(_shape,_color,skip_next,_label,_alias,MATERIAL_SKIP_NEXT)\nskinparam folderBackgroundColor<<MATERIAL_SKIP_NEXT>> White\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["sprite", "ENTITY", "rectangle", "black", "skip_next", "material", "Material Skip Next"],
    "description": "Création d'une entité représentant un matériel avec des définitions de macro et une modification du style pour les chemins dans la couleur blanche.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme UML représentant un sprite et des macros pour l'affichage d'un rectangle noir",
    "code": "@startuml\nsprite $skip_next [48x48/16] {\n  00000000000000000000000000000000\n  01111111111111111111111111111110\n  01000000000000000000000000000010\n  01011111111111111111111111111010\n  01010000000000000000000000001010\n  01010111111111111111111111101010\n  01010000000000000000000000001010\n  01011111111111111111111111111010\n  01000000000000000000000000000010\n  01111111111111111111111111111110\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n}\n\n!define MATERIAL_SKIP_NEXT(_alias) ENTITY(rectangle,black,skip_next,_alias,MATERIAL_SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label) ENTITY(rectangle,black,skip_next,_label,_alias,MATERIAL_SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape) ENTITY(_shape,black,skip_next,_label,_alias,MATERIAL_SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape, _color) ENTITY(_shape,_color,skip_next,_label,_alias,MATERIAL_SKIP_NEXT)\nskinparam folderBackgroundColor<<MATERIAL_SKIP_NEXT>> White\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["PlantUML", "sprite", "ENTITY", "rectangle", "black"],
    "description": "Diagramme UML représentant un sprite et des définitions de macro pour l'affichage d'un rectangle noir.",
    "source": "@startuml ...\n!define ...\n... @enduml"
  },
  {
    "prompt": "Diagramme UML définissant un sprite nommé skip_next et des macros pour créer des entités rectangles avec ce sprite",
    "code": "@startuml\nsprite $skip_next [48x48/16] {\n  00000000000000000000000000000000\n  01111111111111111111111111111110\n  01000000000000000000000000000010\n  01011111111111111111111111111010\n  01010000000000000000000000001010\n  01010111111111111111111111101010\n  01010000000000000000000000001010\n  01011111111111111111111111111010\n  01000000000000000000000000000010\n  01111111111111111111111111111110\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n  00000000000000000000000000000000\n}\n\n!define MATERIAL_SKIP_NEXT(_alias) ENTITY(rectangle,black,skip_next,_alias,MATERIAL_SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label) ENTITY(rectangle,black,skip_next,_label,_alias,MATERIAL_SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape) ENTITY(_shape,black,skip_next,_label,_alias,MATERIAL_SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape, _color) ENTITY(_shape,_color,skip_next,_label,_alias,MATERIAL_SKIP_NEXT)\nskinparam folderBackgroundColor<<MATERIAL_SKIP_NEXT>> White\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["sprite", "material", "skipnext"],
    "description": "Ce diagramme UML définit un sprite nommé skip_next et définit des macros pour créer des entités rectangles avec ce sprite.",
    "source": "https://plantuml.com/"
  }
, {
    "prompt": "Diagramme UML représentant un composant graphique nommé Ebanx avec sprite intégré",
    "code": "@startuml\n' Définition d'un sprite simplifié pour le logo Ebanx\nsprite $ebanx [16x16] {\n  0000000000000000\n  0111111111111100\n  0110000000001100\n  0110111111101100\n  0110100000101100\n  0110101110101100\n  0110100000101100\n  0110111111101100\n  0110000000001100\n  0111111111111100\n  0000000000000000\n  0000000000000000\n  0000000000000000\n  0000000000000000\n  0000000000000000\n  0000000000000000\n}\n\ncomponent Ebanx <<sprite:$ebanx>> {\n    :Description: Composant graphique Ebanx;\n    :Usage: Intégré dans l'interface;\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["diagramme UML", "component", "sprite", "graphique"],
    "description": "Diagramme UML représentant un composant graphique.",
    "source": "https://example.com/code-plantuml"
  },
  {
    "prompt": "Diagramme UML de séquence pour le Telemetry Service de Chef Workstation App montrant l'interaction entre l'utilisateur, CLI Tool et le serveur Telemetry",
    "code": "@startuml\ntitle Chef Workstation App - Telemetry Service\n\nactor Human\nHuman -> \"CLI Tool\" : exécute la commande\n\"CLI Tool\" -> CWA : POST /telemetry\n\nactivate CWA\nCWA --> \"CLI Tool\" : réponse HTTP 201\nCWA -> CWA : prépare l'enveloppe\nCWA -> \"telemetry.chef.io\" : envoie payload\n\nactivate \"telemetry.chef.io\"\n\"telemetry.chef.io\" -> CWA : réponse HTTP\ndeactivate \"telemetry.chef.io\"\ndeactivate CWA\n@enduml",
    "langage": "plantUML",
    "type": "sequence",
    "tags": [
      "UML",
      "séquence",
      "diagramme",
      "Chef Workstation App",
      "Telemetry Service"
    ],
    "description": "Ce diagramme UML représente la séquence d'exécution de la commande CLI Tool qui envoie une requête POST à l'API Telemetry.",
    "source": "# Generate with java -jar plantuml.jar -txt telemetry-seq.puml\n# plantuml.jar can be downloaded from plantuml.com"
  },
  {
    "prompt": "Diagramme UML d'interfaces représentant Struct, Atom, Empty et Set et leurs relations",
    "code": "@startuml\nleft to right direction\nskinparam shadowing false\n\ninterface Struct\ninterface Atom\ninterface Empty {\n  + {static} list(): EmptyList\n  + {static} set(): EmptySet\n}\ninterface EmptySet {\n  + {static} invoke(): EmptySet\n}\ninterface Set {\n  + unfoldedArray: Array<Term>\n  + unfoldedList: List<Term>\n  + unfoldedSequence: Sequence<Term>\n  + toArray(): Array<Term>\n  + toList(): List<Term>\n  + toSequence(): Sequence<Term>\n  + {static} empty(): Set\n  + {static} of(**varargs** items: Term): Set\n  + {static} of(items: Iterable<Term>): Set\n}\n\nStruct <|-- Atom\nStruct <|-- Set\nAtom <|-- Empty\nEmpty <|-- EmptySet\nSet <|-- EmptySet\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["interface", "struct", "atom", "empty", "set"],
    "description": "Diagramme d'interfaces UML définissant les interfaces Struct, Atom et Set ainsi que leurs relations.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme UML PlantUML illustrant différents éléments graphiques tels que boutons, cases à cocher et listes déroulantes",
    "code": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button] : bouton\n  ()  Unchecked radio : radio non coché\n  (X) Checked radio : radio coché\n  []  Unchecked box : case non cochée\n  [X] Checked box : case cochée\n  \"Enter text here\" : zone de texte\n  ^This is a droplist^ : liste déroulante\n}\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": [
      "plantuml",
      "notation",
      "texte",
      "bouton",
      "radio",
      "case à cocher",
      "droplist"
    ],
    "description": "Diagramme de notation PlantUML représentant différents éléments graphiques tels que des boutons, des cases à cocher et des listes déroulantes.",
    "source": "https://github.com/plantuml/plantuml/blob/master/src/main/resources/diagrams/notation.pu"
  },
  {
    "prompt": "Diagramme UML PlantUML représentant un formulaire avec boutons, radios, cases et droplist",
    "code": "@startuml\nsalt\n{\n  Just plain text : texte simple\n  [This is my button] : bouton cliquable\n  ()  Unchecked radio : radio non coché\n  (X) Checked radio : radio coché\n  []  Unchecked box : case non cochée\n  [X] Checked box : case cochée\n  \"Enter text here\" : zone de saisie\n  ^This is a droplist^ : liste déroulante\n}\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["button", "radio", "box", "droplist"],
    "description": "Un diagramme UML présentant un formulaire avec des éléments de saisie et de sélection.",
    "source": "@startuml"
  }
,{
    "prompt": "Diagramme UML représentant un formulaire avec boutons, cases à cocher et champs de texte",
    "code": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here\"\n  ^This is a droplist^\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["plantuml", "component", "diagramme", "formulaire", "boutons", "checkbox", "texte"],
    "description": "Ce diagramme représente un composant UML avec divers éléments tels que des boutons, des case à cocher et des champs de texte.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme d'utilisation UML montrant un formulaire avec champs et boutons",
    "code": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here\"\n  ^This is a droplist^\n}\n@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": ["plantuml", "uml", "diagramme", "formulaire", "usecase"],
    "description": "Diagramme d'utilisation montrant un formulaire avec des champs et des boutons.",
    "source": "https://github.com/plantuml/plantuml/wiki"
  },
  {
    "prompt": "Diagramme UML de cas d'utilisation représentant les interactions entre un administrateur et la création d'un cours",
    "code": "@startuml\n:Manager: as Admin\nAdmin --> (Create the Course)\n@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": ["use_case_diagram", "uml", "plantuml", "administrateur", "cours"],
    "description": "Diagramme d'utilisation représentant les interactions entre l'administrateur et la création d'un cours.",
    "source": "https://plantuml.com/use-case-diagram"
  },
  {
    "prompt": "Diagramme de classes UML représentant la structure d'une bibliothèque avec Patrons, Livres et Prêts",
    "code": "@startuml\nclass Patron {\n  +name: String\n  +borrowedBooks(): List<LibraryCard>\n}\nclass LibraryCard {\n  +book: Book\n  +borrowDate: Date\n  +returnDate: Date\n}\nclass Checkable {\n  +isAvailable(): Boolean\n}\nclass Book extends Checkable {\n  +title: String\n  +author: String\n}\nclass Checkout {\n  +checkoutBook(patron: Patron, book: Book)\n}\nPatron --> LibraryCard\nLibraryCard --> Book\nBook --> Checkable\nCheckout --> Patron\nCheckout --> Book\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classes", "Patron", "Library", "Checkable", "LibraryCard", "Checkout"],
    "description": "Ce diagramme UML représente une structure hiérarchique des entités d'une bibliothèque, notamment les patrons, les livres et les prêts.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme UML montrant les relations entre des classes telles que Patron, Library, Checkable et autres",
    "code": "@startuml\nclass Patron\nclass Library\nclass Checkable\nclass Book\nclass LibraryCard\nPatron --> LibraryCard\nLibraryCard --> Book\nBook --> Checkable\nLibrary --> Book\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classes", "classes", "relations", "bibliothèque"],
    "description": "Diagramme UML montrant les relations entre des classes telles que Patron, Library, Checkable et d'autres.",
    "source": "@startuml\n...\n@enduml"
  }
,{
    "prompt": "Diagramme UML des classes pour les traitements d'arrays sur GPU utilisant ArrayHelper",
    "code": "@startuml\ntitle Module Arrays - Traitement GPU\n\nclass ArrayHelper {\n  +static sum(arr: float*): float\n  +static dotProduct(arr1: float*, arr2: float*): float\n  +static max(arr: float*): float\n}\n\nclass ArrayGpuProcessingParams<T> {\n  +deviceId: unsigned\n  +dev_arr: T*\n  +indStart: size_t\n  +indEnd: size_t\n  +blocksNum: unsigned\n  +threadsNum: unsigned\n  +Print(): void\n}\n\nArrayGpuProcessingParams --> ArrayHelper\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["array", "GPU", "traitement", "C++", "cublas", "cuda"],
    "description": "Le diagramme UML représente les classes pour les traitements d'arrays sur GPU, notamment la classe ArrayHelper qui contient des méthodes statiques pour les opérations sur les arrays.",
    "source": "https://github.com/PlantUML/plantuml-include"
  },
  {
    "prompt": "Diagramme de classes UML pour le module Arrays avec méthodes CUDA et OpenMP",
    "code": "@startuml\ntitle Module Arrays - Algorithmes linéaires GPU\n\nclass ArrayHelper {\n  +static sum(arr: float*): float\n  +static dotProduct(arr1: float*, arr2: float*): float\n  +static max(arr: float*): float\n}\nclass ArrayGpuProcessingParams<T> {\n  +deviceId: unsigned\n  +dev_arr: T*\n  +indStart: size_t\n  +indEnd: size_t\n  +blocksNum: unsigned\n  +threadsNum: unsigned\n  +Print(): void\n}\n\nArrayGpuProcessingParams --> ArrayHelper\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["Arrays", "GPU", "C++", "PlantUML"],
    "description": "Ce diagramme de classes représente le module \"Arrays\" qui fournit des fonctionnalités d'algorithmes linéaires pour des arrays, y compris la sommation, le produit scalaire, etc. Il utilise les technologies CUDA et OpenMP.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme UML pour les classes de gestion d'arrays en RAM et GPU",
    "code": "@startuml\nclass ArrayHelper {\n  +sum(arr: float*): float\n  +dotProduct(arr1: float*, arr2: float*): float\n  +max(arr: float*): float\n}\nclass ArrayGpuProcessingParams<T> {\n  +deviceId: unsigned\n  +dev_arr: T*\n  +indStart: size_t\n  +indEnd: size_t\n  +blocksNum: unsigned\n  +threadsNum: unsigned\n  +Print(): void\n}\nArrayGpuProcessingParams --> ArrayHelper\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classe", "C++", "GPU", "CUDA"],
    "description": "Ce diagramme UML décrit les classes et leurs méthodes pour gérer des tableaux en mémoire vive (RAM) et sur un GPU.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme UML de séquence pour l'export d'un fichier Excel",
    "code": "@startuml SQ\nautonumber\ntitle SD10.5. Export Excel\nactor \"Actor\" as actor\nboundary \"Transaction View\" as view\ncontrol \"Transaction Controller\" as controller\ncontrol \"ExcelService\" as service\nentity \"Transaction Repository\" as model\ndatabase \"Database\" as database\n\nactor -> view : click export button\nactivate view\nview -> view: open confirmation dialog\nalt click confirm\n  view -> controller : call API POST /export-excel\n  activate controller\n  controller -> model : query repository\n  activate model\n  model -> database : find data\n  activate database\n  database --> model : return data\n  deactivate database\n  model --> controller : return list\n  deactivate model\n  controller -> service: process data\n  activate service\n  service --> controller : callback\n  deactivate service\n  controller --> view : return Excel file\n  deactivate controller\n  view -> actor: download file\nelse click cancel\n  view -> view: close dialog\nend\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "uml", "diagramme", "export_excel"],
    "description": "Ce diagramme UML décrit l'interaction entre différents composants d'une application pour exporter des données dans un fichier Excel.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme UML de séquence montrant l'export d'un fichier Excel avec les interactions entre acteurs et objets",
    "code": "@startuml SQ\nautonumber\ntitle SD10.5. Export Excel\nactor \"Actor\" as actor\nboundary \"Transaction View\" as view\ncontrol \"Transaction Controller\" as controller\ncontrol \"ExcelService\" as service\nentity \"Transaction Repository\" as model\ndatabase \"Database\" as database\n\nactor -> view : click export button\nactivate view\nview -> view: open confirmation dialog\nalt click confirm\n  view -> controller : call API POST /export-excel\n  activate controller\n  controller -> model : query repository\n  activate model\n  model -> database : find data\n  activate database\n  database --> model : return data\n  deactivate database\n  model --> controller : return list\n  deactivate model\n  controller -> service: process data\n  activate service\n  service --> controller : callback\n  deactivate service\n  controller --> view : return Excel file\n  deactivate controller\n  view -> actor: download file\nelse click cancel\n  view -> view: close dialog\nend\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["uml", "diagramme de séquence", "transaction", "vue", "contrôleur", "service", "répertoire", "base de données"],
    "description": "Ce diagramme UML décrit la séquence d'opérations pour exporter un fichier Excel. Il montre les interactions entre les différents acteurs et objets du système.",
    "source": "https://github.com/plantuml/plantuml#readme"
  },
  {
    "prompt": "Diagramme UML de classes pour les profils patients et services médicaux",
    "code": "@startuml\nclass PatientProfile {\n  +name: String\n  +birthDate: Date\n}\nclass PatientService {\n  +createProfile(profile: PatientProfile)\n  +getProfile(id: String): PatientProfile\n}\nclass MedicalRecordService {\n  +addRecord(patientId: String, record: MedicalRecord)\n  +getRecords(patientId: String): List<MedicalRecord>\n}\nclass Patient {\n  +id: String\n  +name: String\n}\nclass MedicalRecord {\n  +id: String\n  +description: String\n  +date: Date\n}\nclass Condition {\n  +name: String\n  +severity: String\n}\nclass Allergy {\n  +name: String\n  +reaction: String\n}\n\nPatientProfile --> Patient\nMedicalRecordService --> MedicalRecord\nPatient --> MedicalRecord\nPatient --> Condition\nPatient --> Allergy\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["PatientProfile", "PatientService", "MedicalRecordService", "Patient", "MedicalRecord", "Condition", "Allergy"],
    "description": "Diagramme de classes montrant les relations entre PatientProfile, PatientService, MedicalRecordService et leurs attributs.",
    "source": ""
  },
  {
    "prompt": "Diagramme UML de séquence pour l'appel à une fonction assembleur depuis une application",
    "code": "@startuml\nparticipant \"Application\" as App\nparticipant \"Assembly Code\" as ASM\nApp -> ASM : call extractToken()\nactivate ASM\nASM --> App : return token\ndeactivate ASM\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["uml", "séquence", "diagramme", "programmation", "assembleur"],
    "description": "Diagramme UML de séquence représentant l'appel à une fonction d'extraction de token entre une application et un code assembleur.",
    "source": "https://github.com/plantuml-stdlib/diagrams/tree/master/sequence"
  }
, {
    "prompt": "Diagramme de séquence UML représentant l'interaction entre Smadex, Users, Ad Exchange et Mobile sur AWS",
    "code": "@startuml\n!include <awslib/AWSCommon>\n!include <awslib/AWSSimplified.puml>\n!include <awslib/Compute/all.puml>\n!include <awslib/mobile/all.puml>\n!include <awslib/general/all.puml>\n\nEC2(Smadex, \"Smadex Service\", \"\")\nUsers(Users, \"Users\", \"\")\nTraditionalServer(AdExchange, \"Ad Exchange\", \"\")\nMobile(Mobile, \"Publisher app or web\", \"\")\n\nUsers -down-> Mobile: 1. Visits\nMobile -right-> AdExchange: 2. Start auction\nAdExchange -right-> Smadex: 3. Bid request / response\nSmadex -left-> Mobile: 4. Show Ad\nUsers -right-> Smadex: 5. Impression / click / install / event {request id}\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["AWS", "EC2", "Smadex", "Ad Exchange"],
    "description": "Diagramme de séquence représentant l'interaction entre différents composants (Smadex, Users, Ad Exchange et Mobile).",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme UML de classes pour la conversation et les messages",
    "code": "@startuml\n' Auteur: Imane Alouane '\nclass Conversacion {\n  +id: int\n  +participants: List<User>\n}\nclass Mensaje {\n  +id: int\n  +contenu: String\n  +timestamp: DateTime\n}\nConversacion --> Mensaje\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["conversacion", "mensaje", "entidad", "asociacion"],
    "description": "Diagramme UML représentant les classes de conversación et de message, avec leurs propriétés et relations.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme UML de séquence illustrant la création d'une pièce dans un bâtiment avec services de contrôle et de données",
    "code": "@startuml\nautonumber\nactor Architect\nboundary BuildingView\ncontrol RoomController\nentity RoomRepository\ndatabase BuildingDB\n\nArchitect -> BuildingView: Request create room\nactivate BuildingView\nBuildingView -> RoomController: validate request\nactivate RoomController\nRoomController -> RoomRepository: save room\nactivate RoomRepository\nRoomRepository -> BuildingDB: insert room data\nactivate BuildingDB\nBuildingDB --> RoomRepository: confirm\ndeactivate BuildingDB\nRoomRepository --> RoomController: room saved\ndeactivate RoomRepository\nRoomController --> BuildingView: confirm creation\ndeactivate RoomController\nBuildingView --> Architect: room created\ndeactivate BuildingView\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "diagramme de séquence", "sequence", "PlantUML"],
    "description": "Ce diagramme UML illustre la création d'une pièce dans un bâtiment, en s'appuyant sur les services de contrôle et de données. Il met en évidence l'interaction entre différents acteurs et composants.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme UML de classes pour la gestion des employés",
    "code": "@startuml\nskinparam classAttributeIconSize 0\nleft to right direction\nclass Employee {\n  +id: int\n  +name: String\n  +position: String\n}\nclass Department {\n  +id: int\n  +name: String\n}\nclass EmployeeStore {\n  +employees: List<Employee>\n  +addEmployee(e: Employee)\n  +getEmployee(id: int): Employee\n}\nclass EmployeeController {\n  +addEmployee(e: Employee)\n  +getEmployee(id: int): Employee\n}\nEmployeeController --> EmployeeStore\nEmployeeStore --> Employee\nDepartment --> Employee\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme", "UML", "gestion des employés"],
    "description": "Ce diagramme représente les classes et les relations entre elles pour gérer les informations sur les employés.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme UML de classes pour un système de gestion des employés avec interface graphique et contrôleur",
    "code": "@startuml\nskinparam classAttributeIconSize 0\nleft to right direction\nclass GUI {\n  +displayEmployee(emp: Employee)\n}\nclass EmployeeController {\n  +addEmployee(emp: Employee)\n  +getEmployee(id: int): Employee\n}\nclass EmployeeStore {\n  +employees: List<Employee>\n  +addEmployee(emp: Employee)\n  +getEmployee(id: int): Employee\n}\nclass Employee {\n  +id: int\n  +name: String\n  +position: String\n}\nclass Company {\n  +departments: List<Department>\n}\nGUI --> EmployeeController\nEmployeeController --> EmployeeStore\nEmployeeStore --> Employee\nCompany --> Employee\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classe", "classes"],
    "description": "Ce diagramme UML représente les classes et leurs relations dans un système de gestion d'employés. Les classes représentent les objets du système, telles que l'interface graphique utilisateur, le contrôleur, le store employé, l'employé lui-même et la société.",
    "source": "@startuml"
  }
,{
    "prompt": "Diagramme UML des composants pour l'enregistrement des employés",
    "code": "@startuml\nskinparam classAttributeIconSize 0\nleft to right direction\n\nclass RegisterEmployeeUI {\n}\n\nclass RegisterEmployeeController {\n  +getEmployeeRoles()\n  +registerEmployee(name, address, phoneNumber, email, citizenCardNumber)\n  +setRole(role)\n  +saveEmployee()\n}\n\nclass EmployeeStore {\n  +registerEmployee(name, address, phoneNumber, email, citizenCardNumber)\n  +setRole(role)\n  +saveEmployee(employee)\n  +validateEmployee(employee)\n  +addEmployee(employee)\n}\n\nclass Employee {\n  -name\n  -address\n  -phoneNumber\n  -email\n  -citizenCardNumber\n  -role\n  +getName()\n  +getAddress()\n  +getPhoneNumber()\n  +getEmail()\n  +getCitizenCardNumber()\n  +getRole()\n  +setName(name)\n  +setAddress(address)\n  +setPhoneNumber(phoneNumber)\n  +setEmail(email)\n  +setCitizenCardNumber(number)\n  +setRole(role)\n}\n\nclass Company {\n}\n\nRegisterEmployeeUI ..> RegisterEmployeeController\nRegisterEmployeeController ..> Company\nRegisterEmployeeController ..> Employee\nCompany \"1\" -- \"1\" EmployeeStore : uses >\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["register", "employee", "UI", "controller", "store", "company"],
    "description": "Diagramme UML montrant les relations entre les composants d'une application de gestion d'employés.",
    "source": "Code PlantUML"
  },
  {
    "prompt": "Diagramme UML de séquence pour l'ajout d'un film dans une bibliothèque",
    "code": "@startuml\nactor User\nUser -> ui.FrontPageController: click #addMoviebtn\nui.FrontPageController -> FXMLLoader: load(\"/movielibrary/ui/AddMoviePage.fxml\")\nFXMLLoader -> ui.AddMoviePageController: initialize AddMoviePageController\nui.FrontPageController -> Stage: display AddMoviePage.fxml scene\nUser -> ui.AddMoviePageController: input movie details and click #addMoviebtn\nui.AddMoviePageController -> ui.AddMoviePageController: validate input fields\nalt Validation Error\n    ui.AddMoviePageController -> User: display error alert with validation message\nelse Valid Input\n    ui.AddMoviePageController -> Movie: new Movie(title, movieLength, description)\n    ui.AddMoviePageController -> ui.RemoteMovieLibraryAccess: addMovie(newMovie)\n    ui.RemoteMovieLibraryAccess -> ObjectMapper: writeValueAsString(newMovie)\n    ui.RemoteMovieLibraryAccess -> HttpClient: send PUT request to /movielibrary/movies with JSON body\n    alt Success - 201 Created\n        HttpClient -> ui.RemoteMovieLibraryAccess: response 201 Created\n        ui.RemoteMovieLibraryAccess -> ui.AddMoviePageController: confirm success\n        ui.AddMoviePageController -> User: display success alert \"New movie is added!\"\n        ui.AddMoviePageController -> ui.AddMoviePageController: returnToFrontPage()\n        ui.AddMoviePageController -> FXMLLoader: load(\"/movielibrary/ui/FrontPage.fxml\")\n        FXMLLoader -> ui.FrontPageController: initialize FrontPageController\n        ui.AddMoviePageController -> Stage: display FrontPage.fxml scene\n    else Failure - 409 Conflict\n        HttpClient -> ui.RemoteMovieLibraryAccess: response 409 Conflict\n        ui.RemoteMovieLibraryAccess -> ui.AddMoviePageController: throw IllegalStateException\n        ui.AddMoviePageController -> User: display error alert \"Movie title already exists!\"\n    else Other Failure\n        HttpClient -> ui.RemoteMovieLibraryAccess: response other status code\n        ui.RemoteMovieLibraryAccess -> ui.AddMoviePageController: throw RuntimeException\n        ui.AddMoviePageController -> User: display error alert \"Failed to add movie\"\n    end\nend\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "uml", "diagramme", "java", "addmovie"],
    "description": "Diagramme de séquence montrant l'ajout d'un nouveau film dans une bibliothèque. L'utilisateur clique sur le bouton d'ajout, entre les informations du film et envoie la requête à la bibliothèque.",
    "source": "@startuml sequenceDiagram.puml\n...\n@enduml"
  },
  {
    "prompt": "Diagramme UML du modèle de domaine pour l'usine de commande US7",
    "code": "@startuml\nskinparam monochrome true\nskinparam packageStyle rectangle\nskinparam shadowing false\n\nclass UnregisteredUser\nclass Person {\n    name\n    cardNumber\n    taxNumber\n    emailAddress\n    phoneNumber\n}\nclass Property\nclass Client {\n    password\n}\nclass Address {\n    street\n    cityName\n    districtName\n    stateAcronym\n    zipCode\n}\n\nUnregisteredUser \"1\" -- \"1\" Client: registered as >\nClient \"1\" -- \"1..*\" Property: buys/rents/sells >\nAddress \"1\" -- \"1\" Person: located at <\nClient --|> Person\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["domain model", "US7"],
    "description": "Modèle de domaine décrivant les relations entre des classes telles que UnregisteredUser, Client, Person et Property.",
    "source": ""
  },
  {
    "prompt": "Diagramme de composants UML pour l'application front-end",
    "code": "@startuml\nsprite $frontapp [51x73/16] {\n...restant du code...\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["diagramme", "uml", "plantuml"],
    "description": "Diagramme de composants UML représentant une application front-end.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme UML de séquence pour l'appel d'API GET vers le serveur Backend SmartHome",
    "code": "@startuml\n'https://plantuml.com/sequence-diagram\n!pragma layout smetana\nautonumber\nparticipant \"HTTP Client\" as HTTP\nbox \"SmartHome <<System (C4)>>\"\n    participant \"Backend Server\" as BE <<container (C4)>>\nend box\nHTTP o-> BE: GET /devices by room and temperature functionality\nactivate BE\nBE -->o HTTP: JSON 200\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["sequence", "diagramme UML", "SmartHome", "Backend"],
    "description": "Diagramme de séquence représentant l'appel d'une API GET par le client HTTP vers le serveur Backend.",
    "source": "https://plantuml.com/sequence-diagram"
  }
,{
    "prompt": "Diagramme UML de séquence pour l'appel d'API GET vers le backend SmartHome",
    "code": "@startuml\n'https://plantuml.com/sequence-diagram\n!pragma layout smetana\nautonumber\nparticipant \"HTTP Client\" as HTTP\nbox \"SmartHome <<System (C4)>>\"\n    participant \"Backend Server\" as BE <<container (C4)>>\nend box\nHTTP o-> BE: GET /devices by room and temperature functionality\nactivate BE\nBE -->o HTTP: JSON 200\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["uml", "plantuml", "sequence-diagram", "smart-home"],
    "description": "Le diagramme UML décrit une séquence de communication entre un client HTTP et le backend d'un système SmartHome. Le client envoie une requête GET pour récupérer des informations sur les appareils par pièce et température.",
    "source": "https://plantuml.com/sequence-diagram"
  },
  {
    "prompt": "Diagramme UML de séquence pour le système SmartHome entre le client HTTP et le backend",
    "code": "@startuml\n'https://plantuml.com/sequence-diagram\n!pragma layout smetana\nautonumber\nparticipant \"HTTP Client\" as HTTP\nbox \"SmartHome <<System (C4)>>\"\n    participant \"Backend Server\" as BE <<container (C4)>>\nend box\nHTTP o-> BE: GET /devices by room and temperature functionality\nactivate BE\nBE -->o HTTP: JSON 200\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "sequencediagramme", "system"],
    "description": "Ce diagramme UML représente une séquence d'événements entre le client HTTP et la partie Backend du système SmartHome.",
    "source": "https://plantuml.com/sequence-diagram"
  },
  {
    "prompt": "Diagramme UML de séquence montrant la connexion entre le candidat et l'application CandidateApp (US3001)",
    "code": "@startuml\ntitle Connection Diagram (CandidateApp)_US3001\nactor Candidate\nCandidate -> CandidateApp: login / connect\nCandidateApp -> AuthService: validate credentials\nAuthService --> CandidateApp: authentication result\nCandidateApp -> Dashboard: open dashboard if success\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["connection", "diagram", "candidateapp", "us3001"],
    "description": "Diagramme de séquence montrant la connexion entre le candidat et l'application CandidateApp.",
    "source": "@startuml title Connection Diagram (CandidateApp)_US3001 endumld"
  },
  {
    "prompt": "Diagramme UML de séquence montrant la communication entre CandidateApp et les services Core et FollowUpServer",
    "code": "@startuml\nactor CandidateApp\nCandidateApp -> CoreService: request data\nCoreService --> CandidateApp: response data\nCandidateApp -> FollowUpServer: send follow-up request\nFollowUpServer --> CandidateApp: follow-up response\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["communication", "connection", "diagramme UML"],
    "description": "Diagramme de séquence montrant la communication entre l'application CandidateApp et les services Core et FollowUpServer.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme UML des classes pour la bibliothèque BMII et les processeurs X86",
    "code": "@startuml\nclass X86 <<unsafe>> <<static>> <<partial>> {\n}\nclass Bmi1 <<static>> {\n    + {static} IsBmi1Supported : bool <<get>>\n    + {static} andn_u32(a:uint, b:uint) : uint\n    + {static} andn_u64(a:ulong, b:ulong) : ulong\n    + {static} bextr_u32(a:uint, start:uint, len:uint) : uint\n    + {static} bextr_u64(a:ulong, start:uint, len:uint) : ulong\n    + {static} bextr2_u32(a:uint, control:uint) : uint\n    + {static} bextr2_u64(a:ulong, control:ulong) : ulong\n    + {static} blsi_u32(a:uint) : uint\n    + {static} blsi_u64(a:ulong) : ulong\n    + {static} blsmsk_u32(a:uint) : uint\n    + {static} blsmsk_u64(a:ulong) : ulong\n    + {static} blsr_u32(a:uint) : uint\n    + {static} blsr_u64(a:ulong) : ulong\n    + {static} tzcnt_u32(a:uint) : uint\n    + {static} tzcnt_u64(a:ulong) : ulong\n}\nX86 +-- Bmi1\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["Bmi1", "X86", "bibliothèque", "class", "diagramme UML"],
    "description": "Le diagramme montre la relation entre les classes X86 et Bmi1, avec des méthodes statiques définies dans la classe Bmi1.",
    "source": "https://github.com/PlantUML/plantuml-examples/blob/master/class/UmlClassStaticMethod.puml"
  }
,{
    "prompt": "Diagramme de classes montrant l'héritage entre Editor et SelectableEditor",
    "code": "@startuml\nclass Editor {\n}\nclass SelectableEditor {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classes", "PlantUML"],
    "description": "Diagramme de classes montrant l'héritage entre Editor et SelectableEditor.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme UML de classe montrant l'héritage entre Editor et SelectableEditor",
    "code": "@startuml\nclass Editor {\n}\nclass SelectableEditor {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["SelectableEditor", "Editor", "uml"],
    "description": "Diagramme UML de classe montrant l'héritage entre Editor et SelectableEditor.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme de classe décrivant la relation entre Editor et SelectableEditor",
    "code": "@startuml\nclass Editor {\n}\nclass SelectableEditor {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["PlantUML", "diagramme UML", "class"],
    "description": "Un diagramme de classe décrivant la relation entre l'éditeur et la sélectionnableEditor.",
    "source": "@startuml\nclass SelectableEditor {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml"
  },
  {
    "prompt": "Diagramme UML de classes avec héritage entre Editor et SelectableEditor",
    "code": "@startuml\nclass Editor {\n}\nclass SelectableEditor {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "PlantUML", "diagramme de classes"],
    "description": "Diagramme de classes définissant une relation d'héritance entre Editor et SelectableEditor, avec une méthode OnInspectorGUI() à surcharger.",
    "source": ""
  },
  {
    "prompt": "Diagramme UML représentant la classe LocksTab et ses interfaces héritées",
    "code": "@startuml\ninterface IRefreshableView {\n}\ninterface ILockMenuOperations {\n}\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classes"],
    "description": "Le diagramme représente une classe nommée LocksTab qui hérite de deux interfaces : IRefreshableView et ILockMenuOperations.",
    "source": ""
  },
  {
    "prompt": "Diagramme UML de classe LocksTab héritant de IRefreshableView et ILockMenuOperations",
    "code": "@startuml\ninterface IRefreshableView {\n}\ninterface ILockMenuOperations {\n}\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme UML", "classes", "inheritance"],
    "description": "Définition d'une classe nommée LocksTab avec des méthodes et des attributs, ainsi que deux classes qui l'héritent.",
    "source": "@startuml\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml"
  },
  {
    "prompt": "Relations entre les classes LocksTab, IRefreshableView et ILockMenuOperations",
    "code": "@startuml\ninterface IRefreshableView {\n}\ninterface ILockMenuOperations {\n}\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classe"],
    "description": "Ce diagramme représente les relations entre les classes LocksTab, IRefreshableView et ILockMenuOperations.",
    "source": "@startuml\\nclass LocksTab \\<<sealed>> {\\}\\nIRefreshableView \\<|--\\> LocksTab\\nILockMenuOperations \\<|--\\> LocksTab\\n@enduml"
  },
  {
    "prompt": "Diagramme UML pour la classe math et les structures de matrices int4x3",
    "code": "@startuml\nstruct int4x3 {\n    + ...\n}\nclass math <<static>> <<partial>> {\n    + CreateMatrix4x3(...) : int4x3\n    + Add(a:int4x3, b:int4x3) : int4x3\n    + Multiply(a:int4x3, b:int4x3) : int4x3\n}\nmath ..> int4x3 : returns\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["math", "int4x3", "IEquatable", "IFormattable"],
    "description": "Ce diagramme décrit la classe `math` et son utilisation pour créer des matrices 4x3 à l'aide de divers types de données.",
    "source": "https://github.com/plantuml/plantuml/blob/master/examples/class.plantuml"
  }
, {
    "prompt": "Diagramme UML représentant la structure int4x3 et la classe math avec méthodes statiques",
    "code": "@startuml\nstruct int4x3 {\n    + int4x3(c0:int4, c1:int4, c2:int4)\n    + int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int)\n    + int4x3(v:int)\n    + int4x3(v:bool)\n    + int4x3(v:bool4x3)\n    + int4x3(v:uint)\n    + int4x3(v:uint4x3)\n    + int4x3(v:float)\n    + int4x3(v:float4x3)\n    + int4x3(v:double)\n    + int4x3(v:double4x3)\n    + Equals(rhs:int4x3) : bool\n    + <<override>> Equals(o:object) : bool\n    + <<override>> GetHashCode() : int\n    + <<override>> ToString() : string\n    + ToString(format:string, formatProvider:IFormatProvider) : string\n}\nclass math <<static>> <<partial>> {\n    + {static} int4x3(c0:int4, c1:int4, c2:int4) : int4x3\n    + {static} int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int) : int4x3\n    + {static} int4x3(v:int) : int4x3\n    + {static} int4x3(v:bool) : int4x3\n    + {static} int4x3(v:bool4x3) : int4x3\n    + {static} int4x3(v:uint) : int4x3\n    + {static} int4x3(v:uint4x3) : int4x3\n    + {static} int4x3(v:float) : int4x3\n    + {static} int4x3(v:float4x3) : int4x3\n    + {static} int4x3(v:double) : int4x3\n    + {static} int4x3(v:double4x3) : int4x3\n    + {static} transpose(v:int4x3) : int3x4\n    + {static} hash(v:int4x3) : uint\n    + {static} hashwide(v:int4x3) : uint4\n}\nIFormattable <|-- int4x3\nint4x3 --> \"c0\" int4\nint4x3 --> \"c1\" int4\nint4x3 --> \"c2\" int4\nint4x3 --> \"zero\" int4x3\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "PlantUML", "struct", "class", "math"],
    "description": "Définition d'une structure de données et de classes mathématiques, notamment la classe int4x3 et les méthodes statiques de la classe math.",
    "source": ""
  },
  {
    "prompt": "Diagramme UML représentant int4x3 avec constructeurs et méthodes, et la classe math avec méthodes statiques",
    "code": "@startuml\nstruct int4x3 {\n    + int4x3(c0:int4, c1:int4, c2:int4)\n    + int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int)\n    + int4x3(v:int)\n    + int4x3(v:bool)\n    + int4x3(v:bool4x3)\n    + int4x3(v:uint)\n    + int4x3(v:uint4x3)\n    + int4x3(v:float)\n    + int4x3(v:float4x3)\n    + int4x3(v:double)\n    + int4x3(v:double4x3)\n    + Equals(rhs:int4x3) : bool\n    + <<override>> Equals(o:object) : bool\n    + <<override>> GetHashCode() : int\n    + <<override>> ToString() : string\n    + ToString(format:string, formatProvider:IFormatProvider) : string\n}\nclass math <<static>> <<partial>> {\n    + {static} int4x3(...) : int4x3\n    + {static} transpose(v:int4x3) : int3x4\n    + {static} hash(v:int4x3) : uint\n    + {static} hashwide(v:int4x3) : uint4\n}\nIFormattable <|-- int4x3\nint4x3 --> \"c0\" int4\nint4x3 --> \"c1\" int4\nint4x3 --> \"c2\" int4\nint4x3 --> \"zero\" int4x3\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["struct", "class", "static", "partial"],
    "description": "Définition d'une classe mathématique avec des méthodes statiques pour manipuler des matrices 4x3.",
    "source": ""
  },
  {
    "prompt": "Diagramme UML montrant la structure int4x3 avec ses constructeurs et méthodes, et la classe math avec méthodes statiques",
    "code": "@startuml\nstruct int4x3 {\n    + int4x3(c0:int4, c1:int4, c2:int4)\n    + int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int)\n    + int4x3(v:int)\n    + int4x3(v:bool)\n    + int4x3(v:bool4x3)\n    + int4x3(v:uint)\n    + int4x3(v:uint4x3)\n    + int4x3(v:float)\n    + int4x3(v:float4x3)\n    + int4x3(v:double)\n    + int4x3(v:double4x3)\n    + Equals(rhs:int4x3) : bool\n    + <<override>> Equals(o:object) : bool\n    + <<override>> GetHashCode() : int\n    + <<override>> ToString() : string\n    + ToString(format:string, formatProvider:IFormatProvider) : string\n}\nclass math <<static>> <<partial>> {\n    + {static} int4x3(...) : int4x3\n    + {static} transpose(v:int4x3) : int3x4\n    + {static} hash(v:int4x3) : uint\n    + {static} hashwide(v:int4x3) : uint4\n}\nIFormattable <|-- int4x3\nint4x3 --> \"c0\" int4\nint4x3 --> \"c1\" int4\nint4x3 --> \"c2\" int4\nint4x3 --> \"zero\" int4x3\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "PlantUML", "diagramme de classe"],
    "description": "Ce diagramme UML représente une structure de données nommée int4x3 et sa relation avec la classe math. La structure int4x3 possède plusieurs constructeurs, ainsi que des méthodes pour l'égalité, le hachage et la représentation en chaîne.",
    "source": ""
  },
  {
    "prompt": "Diagramme UML représentant la classe FieldExtensions avec ses méthodes statiques",
    "code": "@startuml\nclass FieldExtensions <<static>> {\n    + {static} HasPreprocessor(descriptor:FieldDescriptor) : bool\n    + {static} HasSemantic(descriptor:FieldDescriptor) : bool\n    + {static} HasFlag(descriptor:FieldDescriptor, options:StructFieldOptions) : bool\n    + {static} ToFieldString(descriptor:FieldDescriptor) : string\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["uml", "diagramme de classe", "plantuml"],
    "description": "Le diagramme décrit les méthodes statiques d'une classe nommée FieldExtensions.",
    "source": "https://github.com/plantuml/plantuml/blob/master/diagrams/class.pu"
  },
  {
    "prompt": "Diagramme UML de classe FieldExtensions avec méthodes statiques et paramètres",
    "code": "@startuml\nclass FieldExtensions <<static>> {\n    + {static} HasPreprocessor(descriptor:FieldDescriptor) : bool\n    + {static} HasSemantic(descriptor:FieldDescriptor) : bool\n    + {static} HasFlag(descriptor:FieldDescriptor, options:StructFieldOptions) : bool\n    + {static} ToFieldString(descriptor:FieldDescriptor) : string\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["uml", "plantuml", "diagramme", "class"],
    "description": "Diagrame UML représentant une classe avec des méthodes statiques.",
    "source": ""
  },
  {
    "prompt": "Diagramme UML représentant la hiérarchie entre NoneChunk et BaseChunk",
    "code": "@startuml\nclass BaseChunk {\n}\nclass NoneChunk {\n}\nBaseChunk <|-- NoneChunk\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classes"],
    "description": "Diagramme de classes définissant la hiérarchie entre les classes \"NoneChunk\" et \"BaseChunk\"",
    "source": "@startuml\nclass NoneChunk {\n}\nBaseChunk <|-- NoneChunk\n@enduml"
  }
,{
    "prompt": "Définition d'un sprite UML nommé $google-developers avec dimensions 102x11/16",
    "code": "@startuml\nsprite $google-developers [102x11/16] {\n    ...\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["sprite", "Google Developers", "image"],
    "description": "Diagramme UML représentant une image de sprite pour Google Developers.",
    "source": "https://plantuml.com/fr/"
  },
  {
    "prompt": "Diagramme de séquence UML illustrant la gestion des sprites graphiques",
    "code": "@startuml\nsprite $google-developers [102x11/16] {\n001999009997000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n... (trunc.) ...\n}\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "PlantUML", "Sequence"],
    "description": "Diagramme de séquence représentant la méthode de gestion des sprites graphiques du langage PlantUML.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme UML pour définir un sprite nommé $google-developers avec dimensions spécifiques",
    "code": "@startuml\nsprite $google-developers [102x11/16] {\n    ...\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["uml", "plantuml", "sprite"],
    "description": "Ce diagramme définit un sprite UML nommé $google-developers avec des dimensions spécifiques.",
    "source": "@startuml\nsprite $google-developers [102x11/16] {\n...}\n@enduml"
  },
  {
    "prompt": "Diagramme UML représentant un sprite pour développeur Google",
    "code": "@startuml\nsprite $google-developers [102x11/16] {\n001999009997000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n... (trunc.) ...\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["plantuml", "sprite"],
    "description": "Diagramme UML représentant un sprite de développeur Google",
    "source": "@startuml\nsprite $google-developers [102x11/16] {\n...}\n@enduml"
  },
  {
    "prompt": "Diagramme UML de la structure GraphDataReadOnly avec ses méthodes et attributs",
    "code": "@startuml\nstruct GraphDataReadOnly {\n    + GraphDataReadOnly(graph:GraphData)\n    + AnyVertexAnimationActive() : bool\n    + IsVFXCompatible() : bool\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["diagramme", "uml", "struct", "graph"],
    "description": "Décrit une structure de données nommée GraphDataReadOnly avec ses méthodes et attributs.",
    "source": "@startuml\nstruct GraphDataReadOnly {\n    + GraphDataReadOnly(graph:GraphData)\n    + AnyVertexAnimationActive() : bool\n    + IsVFXCompatible() : bool\n}\n@enduml"
  },
  {
    "prompt": "Diagramme UML compact de la structure GraphDataReadOnly",
    "code": "@startuml\nstruct GraphDataReadOnly {\n    + GraphDataReadOnly(graph:GraphData)\n    + AnyVertexAnimationActive() : bool\n    + IsVFXCompatible() : bool\n}\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["GraphDataReadOnly", "GraphData", "AnyVertexAnimationActive", "IsVFXCompatible"],
    "description": "Diagramme de classe décrivant les méthodes d'un objet GraphDataReadOnly",
    "source": "PlantUML"
  },
  {
    "prompt": "Diagramme UML représentant les relations entre les classes Proyecto, Empresa et Empleado avec style graphique amélioré",
    "code": "@startuml\nhide circle\nskinparam classAttributeIconSize 0\nskinparam backgroundColor White\nskinparam RoundCorner 10\nskinparam Shadowing true\nclass Proyecto {\n    + nombre: string\n    + fechaInicio: Date\n}\nclass Empresa {\n    + nombre: string\n}\nclass Empleado {\n    + nombre: string\n    + cargo: string\n}\nProyecto --> Empleado\nEmpleado --> Empresa\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme de classes", "PlantUML"],
    "description": "Diagramme de classes représentant les relations entre les classes Proyecto, Empresa et Empleado.",
    "source": "https://github.com/plantuml/plantuml-include"
  }
,  {
    "prompt": "Diagramme UML représentant les classes UnitEditor, GraphElementEditor`1` et Styles avec leurs relations",
    "code": "@startuml\nclass UnitEditor {\n    + UnitEditor(metadata:Metadata)\n}\nclass \"GraphElementEditor`1\"<T> {\n}\nclass Styles <<new>> <<static>> {\n    + {static} <<readonly>> spaceBetweenPorts : float = 5\n}\n\"GraphElementEditor`1\" <|-- UnitEditor\nUnitEditor +-- Styles\nStyles --> \"portsBackground\" GUIStyle\nStyles --> \"portsLabel\" GUIStyle\nStyles --> \"portLabel\" GUIStyle\nStyles --> \"portDescription\" GUIStyle\nStyles --> \"portIcon\" GUIStyle\nStyles --> \"inspectorBackground\" GUIStyle\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UnitEditor", "GraphElementEditor`1`", "Styles", "FlowGraphContext"],
    "description": "Diagramme UML représentant les classes UnitEditor, GraphElementEditor`1` et Styles, ainsi que leurs relations.",
    "source": ""
  },
  {
    "prompt": "Diagramme UML montrant Texture2DArrayShaderProperty héritant de AbstractShaderProperty`1",
    "code": "@startuml\nclass Texture2DArrayShaderProperty {\n}\nclass \"AbstractShaderProperty`1\"<T> {\n}\n\"AbstractShaderProperty`1\" <|-- Texture2DArrayShaderProperty\nTexture2DArrayShaderProperty --> \"propertyType\" PropertyType\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["shader", "property", "texture", "array"],
    "description": "Diagramme de classe montrant les relations entre Texture2DArrayShaderProperty et AbstractShaderProperty`1",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme UML représentant Texture2DArrayShaderProperty et AbstractShaderProperty`1 avec une relation héritage et un attribut PropertyType",
    "code": "@startuml\nclass Texture2DArrayShaderProperty {\n}\nclass \"AbstractShaderProperty`1\"<T> {\n}\n\"AbstractShaderProperty`1\" <|-- Texture2DArrayShaderProperty\nTexture2DArrayShaderProperty --> \"propertyType\" PropertyType\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["UML", "diagramme", "classe"],
    "description": "Un diagramme de classe UML représentant les relations entre les classes Texture2DArrayShaderProperty et AbstractShaderProperty`1",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme UML représentant un sprite Pied Piper et sa définition d'entité avec skinparam",
    "code": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n    ...\n}\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\nskinparam folderBackgroundColor<<FA_PIED_PIPER_PP>> White\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["sprite", "pied-piper", "rectangle", "entity", "black"],
    "description": "Diagramme UML représentant un pied-piper en tant que composant avec une entité rectangle noire et fond de dossier blanc.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme UML Pied Piper avec définition d'entité et skinparam pour couleur de fond blanche",
    "code": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n    ...\n}\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\nskinparam folderBackgroundColor<<FA_PIED_PIPER_PP>> White\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["pied_piper", "sprite", "entity", "rectangle", "black"],
    "description": "Ce diagramme UML représente un sprite personnalisé pour le pied-piper. Il définit une entité rectangle avec une couleur noire, étiquetée « FA PIED_PIPER_PP ». Le skinparam définit également la couleur de fond des dossiers en blanc.",
    "source": "https://github.com/plantuml/plantuml/blob/master/src/main/resources/diagrams/component/FA_PiedPiperPP.pu"
  },
  {
    "prompt": "Diagramme UML Pied Piper avec multiples définitions d'entité et skinparam blanc",
    "code": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n    ...\n}\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label) ENTITY(rectangle,black,pied_piper_pp,_label,_alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label, _shape) ENTITY(_shape,black,pied_piper_pp,_label,_alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label, _shape, _color) ENTITY(_shape,_color,pied_piper_pp,_label,_alias,FA PIED_PIPER_PP)\nskinparam folderBackgroundColor<<FA_PIED_PIPER_PP>> White\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["sprite", "entity", "rectangle", "black", "pied_piper_pp"],
    "description": "Diagramme de component représentant un sprite avec des définitions d'entité et de skinparam.",
    "source": "@startuml"
  },
  {
    "prompt": "Diagramme UML Pied Piper avec sprite et entité, fond blanc",
    "code": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n    ...\n}\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\nskinparam folderBackgroundColor<<FA_PIED_PIPER_PP>> White\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["pied-piper", "entity", "rectangle", "black", "white"],
    "description": "Diagramme UML représentant un pied-piper avec des personnages et des entités",
    "source": "PlantUML"
  }
,
{
    "prompt": "Diagramme UML représentant les différentes couches d'une application Motorblok, incluant publicités, services, intégration et API",
    "code": "@startuml\ntitle Motorblok\nfooter: OpenWoo.app\nheader: OpenWoo.app\npackage \"Publicatie platformen (UI)\" {\n}\npackage \"Services\" {\n}\npackage \"Integratie\" {\n}\npackage \"API\" {\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["uml", "plantuml", "component", "diagramme"],
    "description": "Diagramme montrant les différentes couches d'une application, notamment les publicités, les services, l'intégration et les API.",
    "source": ""
  },
  {
    "prompt": "Diagramme UML représentant les couches d'une application incluant la couche de publication, services, intégration et API",
    "code": "@startuml\npackage \"Publicatie platformen\" {\n}\npackage \"Services\" {\n}\npackage \"Integratie\" {\n}\npackage \"Bronnen / API\" {\n}\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["Publicatie platformen", "Services", "Integratie", "Bronnen", "API"],
    "description": "Diagramme UML montrant les différentes couches d'une application, notamment la couche de publicatie, la couche des services, la couche d'intégration et la couche des API.",
    "source": "https://example.com"
  },
  {
    "prompt": "Diagramme de cas d'utilisation montrant l'architecture Motorblok avec ses différentes couches",
    "code": "@startuml\ntitle Motorblok\nfooter: OpenWoo.app\nheader: OpenWoo.app\nusecase \"Publicatie platformen\" as UI\nusecase \"Services\" as Services\nusecase \"Integratie\" as Integratie\nusecase \"API\" as API\nUI --> Services\nServices --> Integratie\nIntegratie --> API\n@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": ["Publicatie platformen", "Services", "Integratie", "API", "Bronnen", "Searchsite", "OpenWoo Service", "Open Index"],
    "description": "Le diagramme décrit les différentes couches d'une architecture, notamment la couche de publicité, les services, l'intégration et les API.",
    "source": "@startuml\ntitle Motorblok\nfooter: OpenWoo.app\nheader: OpenWoo.app..."
  },
  {
    "prompt": "Diagramme de séquence UML décrivant l'interaction entre un acteur et deux participants : SPA et GestaoInfoAPI",
    "code": "@startuml\nactor Actor as Actor\nparticipant \"SPA\" as Container <<Container (C4)>>\nparticipant \"GestaoInfoAPI\" as API <<Container (C4)>>\nActor -> Container: Créer nouveau type de robot\nContainer --> Actor: Retourne les données du nouveau type de robot\nContainer -> API: Requête d'informations supplémentaires\nAPI --> Container: Réponse des données\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": ["UML", "diagramme de séquence", "actor", "participant", "communication"],
    "description": "Ce diagramme UML décrit une interaction entre un acteur et deux participants : le SPA (Simple Public Access) et l'API GestaoInfo.",
    "source": ""
  },
  {
    "prompt": "Diagramme de classes UML montrant une classe abstraite GraphElementDescription héritant de plusieurs interfaces",
    "code": "@startuml\nabstract class GraphElementDescription {\n}\ninterface Description {\n}\ninterface IGraphElementDescription {\n}\nDescription <|-- GraphElementDescription\nIGraphElementDescription <|-- GraphElementDescription\n@enduml",
    "langage": "PlantUML",
    "type": "class",
    "tags": ["uml", "plantuml", "diagramme", "classe"],
    "description": "Définition d'une classe abstraite qui hérite de plusieurs interfaces.",
    "source": "@startuml"
  }
]