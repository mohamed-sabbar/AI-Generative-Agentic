[
{
  "prompt": "",
  "code": "@startuml\nstruct v128 {\n    + Byte0 : byte\n    + Byte1 : byte\n    + Byte2 : byte\n    + Byte3 : byte\n    + Byte4 : byte\n    + Byte5 : byte\n    + Byte6 : byte\n    + Byte7 : byte\n    + Byte8 : byte\n    + Byte9 : byte\n    + Byte10 : byte\n    + Byte11 : byte\n    + Byte12 : byte\n    + Byte13 : byte\n    + Byte14 : byte\n    + Byte15 : byte\n    + SByte0 : sbyte\n    + SByte1 : sbyte\n    + SByte2 : sbyte\n    + SByte3 : sbyte\n    + SByte4 : sbyte\n    + SByte5 : sbyte\n    + SByte6 : sbyte\n    + SByte7 : sbyte\n    + SByte8 : sbyte\n    + SByte9 : sbyte\n    + SByte10 : sbyte\n    + SByte11 : sbyte\n    + SByte12 : sbyte\n    + SByte13 : sbyte\n    + SByte14 : sbyte\n    + SByte15 : sbyte\n    + UShort0 : ushort\n    + UShort1 : ushort\n    + UShort2 : ushort\n    + UShort3 : ushort\n    + UShort4 : ushort\n    + UShort5 : ushort\n    + UShort6 : ushort\n    + UShort7 : ushort\n    + SShort0 : short\n    + SShort1 : short\n    + SShort2 : short\n    + SShort3 : short\n    + SShort4 : short\n    + SShort5 : short\n    + SShort6 : short\n    + SShort7 : short\n    + UInt0 : uint\n    + UInt1 : uint\n    + UInt2 : uint\n    + UInt3 : uint\n    + SInt0 : int\n    + SInt1 : int\n    + SInt2 : int\n    + SInt3 : int\n    + ULong0 : ulong\n    + ULong1 : ulong\n    + SLong0 : long\n    + SLong1 : long\n    + Float0 : float\n    + Float1 : float\n    + Float2 : float\n    + Float3 : float\n    + Double0 : double\n    + Double1 : double\n    + v128(b:byte)\n    + v128(a:byte, b:byte, c:byte, d:byte, e:byte, f:byte, g:byte, h:byte, i:byte, j:byte, k:byte, l:byte, m:byte, n:byte, o:byte, p:byte)\n    + v128(b:sbyte)\n    + v128(a:sbyte, b:sbyte, c:sbyte, d:sbyte, e:sbyte, f:sbyte, g:sbyte, h:sbyte, i:sbyte, j:sbyte, k:sbyte, l:sbyte, m:sbyte, n:sbyte, o:sbyte, p:sbyte)\n    + v128(v:short)\n    + v128(a:short, b:short, c:short, d:short, e:short, f:short, g:short, h:short)\n    + v128(v:ushort)\n    + v128(a:ushort, b:ushort, c:ushort, d:ushort, e:ushort, f:ushort, g:ushort, h:ushort)\n    + v128(v:int)\n    + v128(a:int, b:int, c:int, d:int)\n    + v128(v:uint)\n    + v128(a:uint, b:uint, c:uint, d:uint)\n    + v128(f:float)\n    + v128(a:float, b:float, c:float, d:float)\n    + v128(f:double)\n    + v128(a:double, b:double)\n    + v128(f:long)\n    + v128(a:long, b:long)\n    + v128(f:ulong)\n    + v128(a:ulong, b:ulong)\n    + v128(lo:v64, hi:v64)\n}\nv128 --> \"Lo64\" v64\nv128 --> \"Hi64\" v64\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["struct", "v128"],
  "description": "Définition d'une structure v128 avec divers types de données",
  "source": "https://plantuml.com/"
}
,
{
  "prompt": "",
  "code": "@startuml\nstruct v128 {\n    ... (le reste du code)\n} \nv128 --> \"Lo64\" v64 \nv128 --> \"Hi64\" v64 \n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["v128", "struct", " PlantUML"],
  "description": "Diagramme de classe décrivant une structure bit à bit (v128) et ses constructeurs.",
  "source": ""
}
,
{
  "prompt": "Diagramme de classe pour SelectionManager",
  "code": "@startuml\nclass SelectionManager <<static>> {\n    + {static} AddObject(obj:Object) : void\n    + {static} Add(obj:TrackAsset) : void\n    + {static} Add(item:TimelineClip) : void\n    + {static} Add(marker:IMarker) : void\n    + {static} Add(item:ITimelineItem) : void\n    + {static} SelectOnly(track:TrackAsset) : void\n    + {static} SelectOnly(clip:TimelineClip) : void\n    + {static} SelectOnly(item:IMarker) : void\n    + {static} SelectOnly(item:ITimelineItem) : void\n    + {static} SelectInlineCurveEditor(selection:IClipCurveEditorOwner) : void\n    + {static} GetCurrentInlineEditorCurve() : IClipCurveEditorOwner\n    + {static} IsCurveEditorFocused(selection:IClipCurveEditorOwner) : bool\n    + {static} Contains(item:TrackAsset) : bool\n    + {static} Contains(item:TimelineClip) : bool\n    + {static} Contains(obj:Object) : bool\n    + {static} Contains(marker:IMarker) : bool\n    + {static} Contains(item:ITimelineItem) : bool\n    + {static} Clear() : void\n    + {static} UnSelectTracks() : void\n    + {static} Remove(item:TimelineClip) : void\n    + {static} Remove(marker:IMarker) : void\n    + {static} Remove(item:TrackAsset) : void\n    + {static} Remove(item:ITimelineItem) : void\n    + {static} RemoveTimelineSelection() : void\n    + {static} RemoveAllClips() : void\n    + {static} Count() : int\n    + {static} SelectedClipGUI() : IEnumerable<TimelineClipGUI>\n    + {static} SelectedClips() : IEnumerable<TimelineClip>\n    + {static} SelectedMarkers() : IEnumerable<IMarker>\n    + {static} SelectedTracks() : IEnumerable<TrackAsset>\n    + {static} SelectedItemOfType() : IEnumerable<T>\n    + {static} SelectedTrackGUI() : IEnumerable<TimelineTrackBaseGUI>\n    + {static} SelectedItems() : IEnumerable<ITimelineItem>\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme de classe", "uml"],
  "description": "Le diagramme de classe représente les propriétés et méthodes du SelectionManager, qui est un objet statique.",
  "source": "https://www.plantuml.com/"
}
,
{
  "prompt": "Dessiner un diagramme UML de classe",
  "code": "@startuml\nclass SelectionManager <<static>> {\n    ...\n} @enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme", "UML", "classe", "PlantUML"],
  "description": "Ce diagramme UML décrit une classe statique appelée SelectionManager qui gère les sélections dans un logiciel de montage vidéo.",
  "source": "@startuml\nclass SelectionManager <<static>> {\n    ...\n} @enduml"
}
,
{
  "prompt": "@startuml\nclass SelectionManager <<static>> {\n",
  "code": "@startuml\nclass SelectionManager <<static>> {\n    + {static} AddObject(obj:Object) : void\n    + {static} Add(obj:TrackAsset) : void\n    + {static} Add(item:TimelineClip) : void\n    + {static} Add(marker:IMarker) : void\n    + {static} Add(item:ITimelineItem) : void\n    + {static} SelectOnly(track:TrackAsset) : void\n    + {static} SelectOnly(clip:TimelineClip) : void\n    + {static} SelectOnly(item:IMarker) : void\n    + {static} SelectOnly(item:ITimelineItem) : void\n    + {static} SelectInlineCurveEditor(selection:IClipCurveEditorOwner) : void\n    + {static} GetCurrentInlineEditorCurve() : IClipCurveEditorOwner\n    + {static} IsCurveEditorFocused(selection:IClipCurveEditorOwner) : bool\n    + {static} Contains(item:TrackAsset) : bool\n    + {static} Contains(item:TimelineClip) : bool\n    + {static} Contains(obj:Object) : bool\n    + {static} Contains(marker:IMarker) : bool\n    + {static} Contains(item:ITimelineItem) : bool\n    + {static} Clear() : void\n    + {static} UnSelectTracks() : void\n    + {static} Remove(item:TimelineClip) : void\n    + {static} Remove(marker:IMarker) : void\n    + {static} Remove(item:TrackAsset) : void\n    + {static} Remove(item:ITimelineItem) : void\n    + {static} RemoveTimelineSelection() : void\n    + {static} RemoveAllClips() : void\n    + {static} Count() : int\n    + {static} SelectedClipGUI() : IEnumerable<TimelineClipGUI>\n    + {static} SelectedClips() : IEnumerable<TimelineClip>\n    + {static} SelectedMarkers() : IEnumerable<IMarker>\n    + {static} SelectedTracks() : IEnumerable<TrackAsset>\n    + {static} SelectedItemOfType() : IEnumerable<T>\n    + {static} SelectedTrackGUI() : IEnumerable<TimelineTrackBaseGUI>\n    + {static} SelectedItems() : IEnumerable<ITimelineItem>\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["SelectionManager", "class", "UML"],
  "description": "Diagramme d'une classe nommée SelectionManager avec des méthodes statiques définies.",
  "source": "https://github.com/plantuml-stdlib/Clean-Architecture/blob/master/PlantUml/Usecases/Usecase%2001.puml"
}
,
{
  "prompt": "PlantUML code pour diagramme de classe",
  "code": "@startuml\nclass SelectionManager <<static>> {\n    + {static} AddObject(obj:Object) : void\n    + {static} Add(obj:TrackAsset) : void\n    + {static} Add(item:TimelineClip) : void\n    + {static} Add(marker:IMarker) : void\n    + {static} Add(item:ITimelineItem) : void\n    + {static} SelectOnly(track:TrackAsset) : void\n    + {static} SelectOnly(clip:TimelineClip) : void\n    + {static} SelectOnly(item:IMarker) : void\n    + {static} SelectOnly(item:ITimelineItem) : void\n    + {static} SelectInlineCurveEditor(selection:IClipCurveEditorOwner) : void\n    + {static} GetCurrentInlineEditorCurve() : IClipCurveEditorOwner\n    + {static} IsCurveEditorFocused(selection:IClipCurveEditorOwner) : bool\n    + {static} Contains(item:TrackAsset) : bool\n    + {static} Contains(item:TimelineClip) : bool\n    + {static} Contains(obj:Object) : bool\n    + {static} Contains(marker:IMarker) : bool\n    + {static} Contains(item:ITimelineItem) : bool\n    + {static} Clear() : void\n    + {static} UnSelectTracks() : void\n    + {static} Remove(item:TimelineClip) : void\n    + {static} Remove(marker:IMarker) : void\n    + {static} Remove(item:TrackAsset) : void\n    + {static} Remove(item:ITimelineItem) : void\n    + {static} RemoveTimelineSelection() : void\n    + {static} RemoveAllClips() : void\n    + {static} Count() : int\n    + {static} SelectedClipGUI() : IEnumerable<TimelineClipGUI>\n    + {static} SelectedClips() : IEnumerable<TimelineClip>\n    + {static} SelectedMarkers() : IEnumerable<IMarker>\n    + {static} SelectedTracks() : IEnumerable<TrackAsset>\n    + {static} SelectedItemOfType() : IEnumerable<T>\n    + {static} SelectedTrackGUI() : IEnumerable<TimelineTrackBaseGUI>\n    + {static} SelectedItems() : IEnumerable<ITimelineItem>\n}\n@enduml",
  "langage": "UML",
  "type": "class",
  "tags": ["diagramme de classe", "uml", "plantuml"],
  "description": "Le diagramme représente une classe nommée SelectionManager avec des méthodes statiques pour gérer les éléments sélectionnés dans un éditeur de timeline.",
  "source": "https://github.com/plantuml/plantuml-examples/blob/master/diagrams/class/selectionmanager.puml"
}
,
{
  "prompt": "@startuml\nclass AuthClient <<static>> {\n    - <<const>> _serviceHttp : string = \"AUTHENTICATION_SERVICE_HTTP\"\n    - <<const>> _serviceHttps : string = \"AUTHENTICATION_SERVICE_HTTPS\"\n    + {static} <<async>> Register(factory:IClient, data:AuthRegisterData) : Task<AuthRegisteredData>\n    + {static} <<async>> Authenticate(factory:IClient, data:AuthData) : Task<AuthenticatedData>\n    - {static} GetAuthServiceHost() : string\n}\n@enduml",
  "code": "@startuml\nclass AuthClient <<static>> {\n    - <<const>> _serviceHttp : string = \"AUTHENTICATION_SERVICE_HTTP\"\n    - <<const>> _serviceHttps : string = \"AUTHENTICATION_SERVICE_HTTPS\"\n    + {static} <<async>> Register(factory:IClient, data:AuthRegisterData) : Task<AuthRegisteredData>\n    + {static} <<async>> Authenticate(factory:IClient, data:AuthData) : Task<AuthenticatedData>\n    - {static} GetAuthServiceHost() : string\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "authentification",
    "client",
    "serveur"
  ],
  "description": "Diagramme de classe décrivant la classe AuthClient, qui représente un client d'authentification.",
  "source": "@startuml"
}
,
{
  "prompt": "",
  "code": "@startuml\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "UML",
    "diagramme de séquence",
    "analyse de code",
    "modélisation"
  ],
  "description": "Ce diagramme UML représente une séquence de fonctionnement pour un jeu d'aventure. Il décrit les interactions entre différents objets, tels que le joueur, la nave aliada et l'ennemi.",
  "source": ""
}
,
{
  "prompt": "@startuml\nclass UIFoldoutEditor <<sealed>> {\n    + \"<override>\" OnInspectorGUI() : void\n}\nEditor <|-- UIFoldoutEditor\n@enduml",
  "code": "@startuml\nclass UIFoldoutEditor <<sealed>> {\n    + \"<override>\" OnInspectorGUI() : void\n}\nEditor <|-- UIFoldoutEditor\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "uml",
    "plantuml",
    "diagramme",
    "uml-class",
    "sealed",
    "override"
  ],
  "description": "Diagramme UML représentant une classe secrue UIFoldoutEditor avec une méthode override OnInspectorGUI()",
  "source": "@startuml\nclass UIFoldoutEditor <<sealed>> {\n    + \"<override>\" OnInspectorGUI() : void\n}\nEditor <|-- UIFoldoutEditor\n@enduml"
}
,
{
  "prompt": "@startuml\nclass UIFoldoutEditor \\u003c\\u003csealed\\u003e {\\n    + \\u003c\\u003coverride\\u003e OnInspectorGUI() : void\\n}\\nEditor \\u003c|--\\u003e UIFoldoutEditor\\n@enduml",
  "code": "@startuml\nclass UIFoldoutEditor <<sealed>> {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <- UIFoldoutEditor\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["uml", "plantuml", "diagramme", "uml-diagramme"],
  "description": "Diagramme de classe UML représentant la relation d'héritage entre Editor et UIFoldoutEditor.",
  "source": "@startuml\nclass UIFoldoutEditor <<sealed>> {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <- UIFoldoutEditor\n@enduml"
}
,
{
  "prompt": "@startuml\ndefault skinparam sequenceMessageAlign center\n... (code entier)\n@enduml",
  "code": "@startuml\ndefault skinparam sequenceMessageAlign center\nparticipant \"TLS A\" as tls_a order 10\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "TLS",
    "Veraison XYZ",
    "KAS",
    "PARSEC",
    "sequence diagram"
  ],
  "description": "Ce diagramme UML décrit la communication entre différentes parties prenantes dans un protocole TLS. Il montre les interactions entre le client (TLS A) et le serveur (TLS B) ainsi que les étapes de vérification et d'attestation.",
  "source": "PlantUML"
}
,
{
  "prompt": "@startuml\nclass WidgetProvider {\n    + WidgetProvider(canvas:ICanvas)\n    + <<override>> IsValid(item:IGraphItem) : bool\n}\nclass \"SingleDecoratorProvider`3\"<T1,T2,T3> {\n}\n\"SingleDecoratorProvider`3\" \"<IGraphItem,IWidget,WidgetAttribute>\" <|-- WidgetProvider\nWidgetProvider --> \"canvas\" ICanvas\n@enduml",
  "code": "@startuml\nclass WidgetProvider {\n    + WidgetProvider(canvas:ICanvas)\n    + <<override>> IsValid(item:IGraphItem) : bool\n}\nclass \"SingleDecoratorProvider`3\"<T1,T2,T3> {\n}\n\"SingleDecoratorProvider`3\" \"<IGraphItem,IWidget,WidgetAttribute>\" <|-- WidgetProvider\nWidgetProvider --> \"canvas\" ICanvas\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "uml",
    "plantuml",
    "diagramme",
    "décoration"
  ],
  "description": "Le diagramme décrit la classe WidgetProvider et son lien avec la classe SingleDecoratorProvider`3. Il montre également le type de canvas associé à l'instance de WidgetProvider.",
  "source": "https://plantuml.com/"
}
,
{
  "prompt": "Créer un diagramme UML pour les classes WidgetProvider et SingleDecoratorProvider",
  "code": "@startuml\nclass WidgetProvider {\n    + WidgetProvider(canvas:ICanvas)\n    + <<override>> IsValid(item:IGraphItem) : bool\n}\n\nclass \"SingleDecoratorProvider`3\"<T1,T2,T3> {\n}\n\"SingleDecoratorProvider`3\" \n    <IGraphItem,IWidget,WidgetAttribute> \n <|-- WidgetProvider\n\nWidgetProvider --> \n    \"canvas\" ICanvas\n@enduml",
  "langage": "UML (PlantUML)",
  "type": "class",
  "tags": ["class", "diagramme UML", "PlantUML"],
  "description": "Le diagramme représente les classes WidgetProvider et SingleDecoratorProvider, avec leur structure et leurs relations. Il s'agit d'un diagramme de classes qui montre comment ces deux classes sont liées.",
  "source": "https://fr.plantuml.com/"
}
,
{
  "prompt": "",
  "code": "@startuml\nclass WidgetProvider {\n    + WidgetProvider(canvas:ICanvas)\n    + \\<<override>>\\ IsValid(item:IGraphItem) : bool\n}\n\nclass \"SingleDecoratorProvider`3\"<T1,T2,T3> {\n}\n\"SingleDecoratorProvider`3\" \"<IGraphItem,IWidget,WidgetAttribute>\" <|-- WidgetProvider\nWidgetProvider --> \\\"canvas\\\" ICanvas\n@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": ["uml", "diagramme", "classe"],
  "description": "Définition d'une classe `WidgetProvider` avec une méthode `IsValid` et une association avec la classe `ICanvas`. Définition également d'une classe générique `SingleDecoratorProvider`.",
  "source": "https://example.com/source" 
}
,
{
  "prompt": "@startuml",
  "code": "@startuml\nMCU -> Bootloader: reset\nactivate Bootloader\nBootloader -> Bootloader: Recover? (no)\nBootloader -> Bootloader: New version? (no)\nBootloader -> Application: Jump to primary slot\ndeactivate Bootloader\n\nactivate Application\nnote right: This is the current version of the firmware\nApplication -> Application: OTA procedure\nnote right: Download a new firmware version and\\n store it in secondary slot\nApplication -> MCU: Reset\ndea\nactivate Application",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "uml", 
    "sequence", 
    "diagramme", 
    "plantuml"
  ],
  "description": "Diagramme de séquence montrant le processus d'upgrade du firmware. Le bootloader vérifie si une nouvelle version est disponible, puis fait sauter vers la nouvelle version et déactive l'application. L'application effectue ensuite un OTS pour télécharger et stocker la nouvelle version.",
  "source": "https://plantuml.com/"
}
,
{
  "prompt": "",
  "code": "@startuml\nsprite $skip_next [48x48/16] {\n...\n}\ndefine MATERIAL_SKIP_NEXT(_alias) ENTITY(rectangle,black,skip_next,_alias,MATERIAL SKIP_NEXT)\ndefine MATERIAL_SKIP_NEXT(_alias, _label) ENTITY(rectangle,black,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\ndefine MATERIAL_SKIP_NEXT(_alias, _label, _shape) ENTITY(_shape,black,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\ndefine MATERIAL_SKIP_NEXT(_alias, _label, _shape, _color) ENTITY(_shape,_color,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\nskinparam folderBackgroundColor<<MATERIAL SKIP_NEXT>> White\n@enduml",
  "langage": "plantuml",
  "type": "component",
  "tags": [
    "sprite",
    "ENTITY",
    "rectangle",
    "black",
    "skip_next"
  ],
  "description": "Diagramme de composant utilisant des définitions et paramètres pour customiser l'apparence d'entités.",
  "source": ""
}
,
{
  "prompt": "",
  "code": "@startuml\nsprite $ebanx [102x18/16] {\n...\n}\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", " PlantUML"],
  "description": "Diagramme de séquence d'un sprite ebanx.",
  "source": "https://plantuml.com/fr/"
}
,
{
  "prompt": "# Generate with java -jar plantuml.jar -txt telemetry-seq.puml",
  "code": "@startuml\ntitle Chef Workstation App - Telemetry Service\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "UML",
    "plantuml",
    "sequence",
    "diagramme",
    "chef",
    "workstation",
    "telemetry"
  ],
  "description": "Ce diagramme UML représente la séquence d'appel entre les différents composants de l'application Chef Workstation et le service Telemetry.",
  "source": "# plantuml.jar can be downloaded from plantuml.com"
}
,
{
  "prompt": "",
  "code": "@startuml\nhide empty fields\nhide empty methods\nlegend\n|= |= line |\n|<back:black>   </back>| inheritance |\n|<back:green>   </back>| property reference |\n|<back:blue>   </back>| discriminated class |\nendlegend\ninterface SearchNotExpression [[SearchNotExpression.svg]] extends SearchCompoundExpression {\n    not: [[SearchQuery.svg List<SearchQuery>]]\n}\ninterface SearchCompoundExpression [[SearchCompoundExpression.svg]]  {\n}\n@enduml",
  "langage": "",
  "type": "component",
  "tags": ["search", "expression", "compound"],
  "description": "Ce diagramme UML représente deux interfaces : SearchNotExpression et SearchCompoundExpression. La première interface étend la seconde.",
  "source": ""
}
,
{
  "prompt": "@startuml\n\ndatabase \"Main database\" as main\ndatabase \"Replica database 1\" as replica\ndatabase \"Replica database 2\"  as replica2\ndatabase \"Replica database n\"  as replica3\n\nnode \"Application\" {\n    package Connection {\n        package DualConnection {\n            [ConnectionProvider]\n        }\n    }\n    [Business logic] --> Connection : database call\n    [ConnectionProvider] --> [Main Connection] : provides\n    [ConnectionProvider] --> [Replica Connection] : provides\n}\n[Main Connection] --> main\n[Replica Connection] --> replica\n[Replica Connection] --> replica2\n[Replica Connection] --> replica3\n@enduml",
  "code": "@startuml\ndatabase \"Main database\" as main\ndatabase \"Replica database 1\" as replica\ndatabase \"Replica database 2\"  as replica2\ndatabase \"Replica database n\"  as replica3\nnode \"Application\" {\n    package Connection {\n        package DualConnection {\n            [ConnectionProvider]\n        }\n    }\n    [Business logic] --> Connection : database call\n    [ConnectionProvider] --> [Main Connection] : provides\n    [ConnectionProvider] --> [Replica Connection] : provides\n}\n[Main Connection] --> main\n[Replica Connection] --> replica\n[Replica Connection] --> replica2\n[Replica Connection] --> replica3\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "database",
    "replica",
    "connection",
    "business logic"
  ],
  "description": "Ce diagramme UML représente une architecture de bases de données avec une base principale et des répliques.",
  "source": "https://github.com/plantuml-stdlib/Diagrams/blob/master/src/Database.puml"
}
,
{
  "prompt": "@startuml\n!theme aws-orange\nautonumber\ntitle Reverse Proxy Flow\n",
  "code": "@startuml\n!theme aws-orange\nautonumber\ntitle Reverse Proxy Flow\nautonumber\n\nparticipant localProxiedService as \"Local Proxied Service\"\nparticipant localAgent    as \"Local Agent\"\nparticipant remoteServer  as \"Remote Server\"\nparticipant remoteClient        as \"Remote Client\"\n\nlocalAgent -> remoteServer: Dials new dedicated connection for Reversing Conns\nremoteServer -> remoteServer: Creates listener, awaits remote conns\nremoteClient -> remoteServer: Dials in\nremoteServer -> localAgent: Sends RevProxyWorkRequest\nlocalAgent -> remoteServer: Creates dedicate connection, to proxy remote connections\nlocalAgent <- remoteServer: Accepts conn, identify pending remote connection\nremoteServer <- remoteServer: Loops copying data back and forth\nlocalAgent -> localProxiedService: Creates dedicated connection\nlocalAgent -> localAgent: Loops copying data back and forth\nremoteClient <--> localProxiedService: Data Exchange\ndisplay\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["Reverse Proxy", "Sequence Diagram"],
  "description": "Ce diagramme décrit le flux de communication entre un client distant, un serveur distant et un agent local.",
  "source": "https://plantuml.com/"
}
,
{
  "prompt": "@startuml...@enduml",
  "code": "@startuml\nleft to right direction\nskinparam shadowing false\ninterface Struct\ninterface Atom\ninterface Empty {\n  + {static} list(): EmptyList\n  + {static} set(): EmptySet\n}\ninterface EmptySet {\n  + {static} invoke(): EmptySet\n}\ninterface Set {\n  + unfoldedArray: Array<Term>\n  + unfoldedList: List<Term>\n  + unfoldedSequence: Sequence<Term>\n  + toArray(): Array<Term>\n  + toList(): List<Term>\n  + toSequence(): Sequence<Term>\n  + {static} empty(): Set\n  + {static} of(**varargs** items: Term): Set\n  + {static} of(items: Iterable<Term>): Set\n}\nStruct <|-- Atom\nStruct <|-- Set\nAtom <|-- Empty\nEmpty <|-- EmptySet\nSet <|-- EmptySet\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "interface",
    "héritage",
    "association"
  ],
  "description": "Diagramme UML représentant les interfaces Struct, Atom, Empty et Set avec leurs méthodes et leurs relations d'héritage.",
  "source": "https://github.com/plantuml/plantuml/blob/master/diagram-definition PlantUML"
}
,
{
  "prompt": "Code UML pour modéliser des stratégies de tir en jeu vidéo",
  "code": "@startuml\ninterface ShootStrategy {\n    + {abstract} shoot(Class<? extends BaseBullet>, int, int, int, int, int, int): void\n}\nclass StraightShootStrategy {\n    + shoot(Class<? extends BaseBullet>, int, int, int, int, int, int): void\n}\nclass ScatteringShootStrategy {\n    + shoot(Class<? extends BaseBullet>, int, int, int, int, int, int):void\n}\nShootStrategy <|.. ScatteringShootStrategy\nShootStrategy <|.. StraightShootStrategy\nclass AbstractAircraft {\n    # ShootStrategy shootStrategy\n    + setShootStrategy(ShootStrategy shootStrategy):void\n}\nAbstractAircraft o--> ShootStrategy\nclass Game {\n    - HeroAircraft: heroAircraft\n    - List<AbstractAircraft>: enemyAircrafts\n    - AbstractAircraft: boss\n    + action():void\n}\nGame o--> AbstractAircraft\nGame ..> ShootStrategy\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["uml", "sequence", "game", "jeu vidéo", "stratégie de tir"],
  "description": "Ce diagramme UML modélise les stratégies de tir d'un jeu vidéo. Il définit des interfaces et classes pour gérer le tir, ainsi que leur relation avec un jeu.",
  "source": "https://github.com/plantuml-stdlib/design-patterns"
}

,
{
        "prompt": "@startuml sequencedemo",
        "code": "@startuml sequencedemo\nUser -> Server: HTTP request\nServer -> DB: SQL request\nDB --> Server: SQL response\nServer --> User: HTTP response\n@enduml",
        "langage": "PlantUML",
        "type": "sequence",
        "tags": ["diagramme UML", "séquence"],
        "description": "Diagramme UML de séquence décrivant une requête HTTP et une requête SQL entre un serveur et une base de données.",
        "source": "https://github.com/plantuml-stdlib/diagrams/blob/master/examples/sequencedemo.pu"
    },
    {
  "prompt": "@startuml sequencedemo2",
  "code": "@startuml sequencedemo2 \nactor User as Foo\nparticipant \"Finance App\" as Foo2\ndatabase Database as Foo3\nautonumber \"<b>.\">\nautonumber 1.1\nFoo -[#red]> Foo2: HTTP request\nnote left: we are sending an HTTP request \nFoo2 -> Foo3: SQL request\nnote right\nwe are making a \nrequest to the database\nend note\nFoo3 --> Foo2: SQL response\nFoo2 --> Foo: HTTP response\nautonumber inc A\nFoo -> Foo2: Authentication request\nalt valid credentials\nFoo2 --> Foo: Authentication success\nelse wrong credentials\nFoo2 --> Foo: Invalid credentials\nend\nFoo2 --> Foo: Authentication response\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["diagramme UML", "séquence", "authentification"],
  "description": "Diagramme UML de séquence décrivant une requête HTTP, une requête SQL et l'authentification entre un utilisateur, une application financière et une base de données.",
  "source": "https://github.com/plantuml-stdlib/diagrams/blob/master/examples/sequencedemo2.pu"
}
,
    {
  "prompt": "@startuml sequencedemo3",
  "code": "@startuml sequencedemo3\nactor User as Foo\nparticipant \"Finance App\" as Foo2\ndatabase Database as Foo3\nautonumber \"<b>.\"\nautonumber 1.1\nFoo -[#red]> Foo2: HTTP request\nnote left: we are sending an HTTP request \nFoo2 -> Foo3: SQL request\nnote right \nwe are making a \nrequest to the database\nend note\nFoo3 --> Foo2: SQL response\nFoo2 --> Foo: HTTP response\nautonumber inc A\nFoo -> Foo2: Authentication request\nalt valid credentials\nFoo2 --> Foo: Authentication success\nelse wrong credentials\nFoo2 --> Foo: Authentication failure\ngroup forgot password\nFoo -> Foo2: Request forgot password\nFoo2 --> Foo: Sent forgot password OTP\nend\ngroup\nelse server timeout\nloop 3 times\nFoo -> Foo2: Ping server\nend\nFoo2 --> Foo: Server available\nend\nFoo2 --> Foo: Authentication response\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["diagramme UML", "séquence", "authentification"],
  "description": "Diagramme UML de séquence décrivant une requête HTTP, une requête SQL et l'authentification entre un utilisateur, une application financière et une base de données, ainsi que le traitement d'un mot de passe oublié.",
  "source": "https://github.com/plantuml-stdlib/diagrams/blob/master/examples/sequencedemo3.pu"
}

,
{
  "prompt": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^\\n}\n@enduml",
  "code": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^\\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [" PlantUML", "uml"],
  "description": "Diagramme UML contenant des exemples de texte, boutons et listes déroulantes.",
  "source": "https://www.plantuml.com/"
}
,
{
  "prompt": "@startuml",
  "code": "@startuml\n\nframe app {\n  ' rectangle Commands\n  rectangle CommandPanelHandler\n  rectangle ViewInterface\n}\n' HTML\n' frame content {\n'   rectangle DocumentElement\n'   rectangle VscodeMessager\n'   control main\n' }\nframe lib {\n  rectangle CommandRunner\n  rectangle EnvironmentContext\n  rectangle RunnerManager\n}\nframe view {\n  rectangle HTMLResourceView\n  rectangle ViewViewProvider\n}\ncontrol extension\nEnvironmentContext ..down..> vscode.workspace\nRunnerManager -down-> CommandRunner\nRunnerManager -down-> EnvironmentContext\nCommandRunner -down-> EnvironmentContext\nCommandRunner ..down..> child_process\nViewViewProvider -up-|> WebviewViewProvider\nViewViewProvider -down-> HTMLResourceView\nHTMLResourceView -up-|> ViewInterface\nCommandPanelHandler -down-> RunnerManager\nCommandPanelHandler -down-> ViewInterface\nextension -down-> CommandPanelHandler\n@enduml",
  "langage": "plantuml",
  "type": "component",
  "tags": [
    "PlantUML",
    "component",
    "diagramme UML"
  ],
  "description": "Diagramme de composants représentant les relations entre différents éléments d'une application.",
  "source": "https://github.com/plantuml/plantuml-source/blob/master/diagrams/components.pu"
}
,
{
  "prompt": "Manage Booking (PUT)",
  "code": "@startuml Manage Booking (PUT)\nheader Booking Sequence Diagram\nfooter Page %page% of %lastpage%\ntitle \"Manage Booking (PUT)\"\nparticipant \"Client\" as client\nparticipant \"<<javaScript>>\\n:server\" as server\nparticipant \"<<router>>\\n:bookings\" as routerBookings\nparticipant \"<<controllers>>\\n:bookings\" as controllersBookings\nparticipant \"<<model>>\\n:Booking\" as modelBooking\ndatabase \"<<MongoDB>>\\n:bookings\" as BookingsDatabase\nclient->server ++:req.put('/bookings/:id')\nserver->routerBookings ++:app.use('/bookings',bookings)\nroutingBookings -> controllersBookings ++:updateBooking()\ncontrollersBookings->modelBooking ++:findByIdAndUpdate(req.params.id, req.body)\nmodelBooking ->BookingsDatabase ++:BookingSchema\nBookingsDatabase --> modelBooking --:booking\ncontrollersBookings <-- modelBooking --:booking\ncontrollersBookings->client --:response\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "diagramme", "UML", "PlantUML", "MongoDB"],
  "description": "Ce diagramme UML représente la séquence des événements lors de la mise à jour d'une réservation. Il montre les différents participants impliqués et les échanges entre eux.",
  "source": "https://github.com/plantuml-stdlib/diagrams"
}
,
{
  "prompt": "@startuml\n!include ../../../plantuml-styles/plantuml-ae-skinparam-ex.iuml\n\nskinparam FileBackgroundColor lawnGreen\ntitle FileBackgroundColor lawnGreen\n\nfile File \n@enduml",
  "code": "@startuml\n!include ../../../plantuml-styles/plantuml-ae-skinparam-ex.iuml\n\nskinparam FileBackgroundColor lawnGreen\ntitle FileBackgroundColor lawnGreen\n\nfile File \n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["component", "plantuml"],
  "description": "Diagramme UML représentant un composant nommé File avec une couleur de fond verte.",
  "source": "@startuml\n!include ../../../plantuml-styles/plantuml-ae-skinparam-ex.iuml\n\nskinparam FileBackgroundColor lawnGreen\ntitle FileBackgroundColor lawnGreen\n\nfile File \n@enduml"
}
,
{
  "prompt": "@startuml\nactor admin\ncontrol ga as \"gateway-agent\"\ncontrol apiserver\ndatabase db...\n@enduml",
  "code": "@startuml\nactor admin\ncontrol ga as \"gateway-agent\"\ncontrol apiserver\ndatabase db\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["gateway", "enrollment", "ssh", "secure connection"],
  "description": "Diagramme de séquence décrivant le processus d'enregistrement et la configuration d'un gateway. Le diagramme montre les interactions entre l'administrateur, le gateway-agent, l'API server et la base de données.",
  "source": "@startuml\nactor admin\ncontrol ga as \"gateway-agent\"\ncontrol apiserver\ndatabase db...\n@enduml"
}
,
{
  "prompt": "",
  "code": "@startuml UI\n...\n@enduml",
  "langage": "plantuml",
  "type": "component",
  "tags": [
    "uml",
    "component",
    "dependency",
    "graph"
  ],
  "description": "Diagramme UML représentant les dépendances entre des composants.",
  "source": "https://plantuml.com/"
}
,
{
  "prompt": "@startuml\nactor HR as \"HR Advisor\"\nrectangle Database\nrectangle \"HR System\" {\nusecase UC5 as \"Add new employee details\"\n\nHR - UC5\nUC5 - Database\n}\n@enduml",
  "code": "@startuml\ndefine actor HR as \"HR Advisor\"\nrectangle Database\nrectangle \"HR System\" {\nusecase UC5 as \"Add new employee details\"\n\nHR - UC5\nUC5 - Database\n}\n@enduml",
  "langage": "PlantUML",
  "type": "usecase",
  "tags": ["actor", "usecase", "rectangle", "hr-system"],
  "description": "Le diagramme décrit le système de gestion des ressources humaines avec un acteur HR Advisor et une base de données. L'ajout d'un nouveau employé est modélisé comme une fonctionnalité du système.",
  "source": "@startuml"
}
,
{
  "prompt": "",
  "code": "@startuml\n... (code entier)\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "persistencia",
    "gestorCSVFile",
    "gestorPartidesActuals",
    "gestorUsuaris",
    "controladorPersistencia"
  ],
  "description": "Diagramme UML représentant les classes et leurs relations dans une application de gestion de données.",
  "source": ""
}
,
{
  "prompt": "@startuml\nactor dostawca\nactor klient\nactor klient_detaliczny\nactor klient_hurtowy\nrectangle \"sklep\" {\n    actor konsultant\n    actor specjalista_logistyki\n    actor ksiegowy\n\n    (kupno produktu) as kupno\n    (dostawa produktu) as dostawa\n}\nklient_detaliczny ..> klient : \"extends\"\nklient_hurtowy ..> klient : \"extends\"\nklient --> kupno\ncupno .> konsultant\ncupno .> ksiegowy\ndostawa .> specjalista_logistyki\ndostawca --> dostawa\ndostawa ..> kupno : \"extends\"\nklient --> konsultant\ndostawca --> specjalista_logistyki\n@enduml",
  "code": "@startuml\nactor dostawca\nactor klient\nactor klient_detaliczny\nactor klient_hurtowy\nrectangle \"sklep\" {\n    actor konsultant\n    actor specjalista_logistyki\n    actor ksiegowy\n\n    (kupno produktu) as kupno\n    (dostawa produktu) as dostawa\n}\nklient_detaliczny ..> klient : \"extends\"\nklient_hurtowy ..> klient : \"extends\"\nklient --> kupno\ncupno .> konsultant\ncupno .> ksiegowy\ndostawa .> specjalista_logistyki\ndostawca --> dostawa\ndostawa ..> kupno : \"extends\"\nklient --> konsultant\ndostawca --> specjalista_logistyki\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "actor",
    "rectangle",
    "extends",
    "klient_detaliczny",
    "klient_hurtowy"
  ],
  "description": "Diagramme UML représentant les acteurs d'un système de vente et leurs relations.",
  "source": "https://plantuml.com/"
}
,
{
  "prompt": "@startuml...@enduml",
  "code": "@startuml...\npackage \"Model\" {...}\npackage \"GameLaunch\" {...} ...\n@enduml",
  "langage": "PlantUML",
  "type": "class diagram",
  "tags": ["java", "spring-boot", "uml"],
  "description": "Diagramme de classes représentant les entités d'une application web avec des fonctionnalités de gestion de jeux et de sécurité.",
  "source": "https://github.com/your-repo"
}
,
{
  "prompt": "@startuml\n'https://plantuml.com/use-case-diagram\n:Manager: as Admin\nAdmin ---> (Create the Course)\n@enduml",
  "code": "@startuml\n'https://plantuml.com/use-case-diagram\n:Manager: as Admin\nAdmin ---> (Create the Course)\n@enduml",
  "langage": "PlantUML",
  "type": "usecase",
  "tags": ["use_case", "diagramme"],
  "description": "Ce diagramme représente un cas d'utilisation pour la création d'un cours. Il montre l'interaction entre le gestionnaire (Admin) et la création du cours.",
  "source": "https://plantuml.com/use-case-diagram"
}
,
{
  "prompt": "",
  "code": "@startuml\ntitle DocumentDb Oriented -  User–VL Context\nentity \"User\" {\n  * _id : UUID\n  * reference_id : String\n  --\nglobal_roles : [RoleCode]\n}\nentity \"VirtualLab\" {\n  * _id : UUID\n  * name : String\n  maturity_level : Int\n  --\nassigned_users : [ { user_id, role_code, assigned_at } ]\n}\nentity \"RoleDefinition\" {\n  * code : String\n  name : String\n  is_global : Bool\n}\nUser --> RoleDefinition : global_roles references\nVirtualLab --> RoleDefinition : assigned_users.role_code\nVirtualLab --> User : assigned_users.user_id\n@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": ["entity", "association"],
  "description": "Le diagramme décrit les entités \"User\", \"VirtualLab\" et \"RoleDefinition\" et leurs relations.",
  "source": ""
}
,
{
  "prompt": "@startuml\n'skinparam linetype polyline\n\nclass Pharmacy {\n  -String pharmacyName\n  -String companyName\n  -int NIF\n}\nclass Order {\n    -String id\n    -list of products\n}\nclass Client {\n    -String name\n    -String email\n    -int NIF\n    -int credits\n}\nclass Product{\n    -String productType\n    -String productName\n    -double price\n    -double weight\n}\nProduct }o--o| Pharmacy\nOrder |o--o{ Product\nOrder |o--o| Client\n@enduml",
  "code": "@startuml\ntexte non codé...\nclass Pharmacy {\n  -String pharmacyName\n  -String companyName\n  -int NIF\n}\nclass Order {\n    -String id\n    -list of products\n}\nclass Client {\n    -String name\n    -String email\n    -int NIF\n    -int credits\n}\nclass Product{\n    -String productType\n    -String productName\n    -double price\n    -double weight\n}\nProduct }o--o| Pharmacy\nOrder |o--o{ Product\nOrder |o--o| Client\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme UML", "classes", "associations"],
  "description": "Ce diagramme représente les classes et leurs associations. Il montre comment les classes Pharmacy, Order, Client et Product sont liées entre elles.",
  "source": "https://plantuml.com/"
}
,
{
  "prompt": "@startuml\nscale 350 width\n[*] --> NotRunning\nstate NotRunning {\n  [*] --> Idle\n  Idle --> Configuring : EvConfig\n  Configuring --> Idle : EvConfig\n}\nstate Configuring {\n  [*] --> NewValueSelection\n  NewValueSelection --> NewValuePreview : EvNewValue\n  NewValuePreview --> NewValueSelection : EvNewValueRejected\n  NewValuePreview --> NewValueSelection : EvNewValueSaved\n\n  state NewValuePreview {\n     State1 -> State2\n  }\n}\n@enduml",
  "langage": "PlantUML",
  "type": "state machine",
  "tags": ["statemachine", "état", "transition"],
  "description": "Diagramme d'état montrant les états NotRunning, Configuring et NewValueSelection, ainsi que leurs transitions.",
  "source": "@startuml\nscale 350 width\n[*] --> NotRunning\nstate NotRunning {\n  [*] --> Idle\n  Idle --> Configuring : EvConfig\n  Configuring --> Idle : EvConfig\n}\nstate Configuring {\n  [*] --> NewValueSelection\n  NewValueSelection --> NewValuePreview : EvNewValue\n  NewValuePreview --> NewValueSelection : EvNewValueRejected\n  NewValuePreview --> NewValueSelection : EvNewValueSaved\n\n  state NewValuePreview {\n     State1 -> State2\n  }\n}\n@enduml"
}
,
{
  "prompt": "",
  "code": "@startuml\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["diagramme de sequence", "modèle d'interaction", "sécurité"],
  "description": "Modèle d'interaction entre les participants du système pour la mise en partage d'une board.",
  "source": ""
}
,
{
  "prompt": "@startuml\n... (le code entier)\n@enduml",
  "code": "@startuml\ncomponent \"Loculus Website\" as Website\n\ntogether {\n    component \"Loculus Backend\" as Backend\n    component Keycloak\n}\n\ncomponent \"Postgres DB\" as Postgres\ncomponent S3\n\ncomponent \"Preprocessing Pipeline\" as Preprocessing\ncomponent \"Ingest Pipeline\" as Ingest\n\nframe SILO-LAPIS {\n    component SILO\n    component LAPIS\n}\n\nWebsite --> Keycloak : authenticate\nBackend -left-> Keycloak : authenticate\n\nWebsite -down-> Backend : upload\\nsequence data\nBackend --> Preprocessing : fetch new\\nsequence entries\nBackend <-- Preprocessing : submit enriched\\nsequence entries\nBackend <--> Postgres : persist\\nsequence entries\nIngest --> Backend : new Genbank\\nsequences\n\nBackend -up-> SILO: provide\\nsequence entries\nLAPIS -left-> Website : sequence query\\nresults\nLAPIS <-right- SILO : sequence query\\nresults\n\nWebsite -> S3: upload\\nextra files\nBackend --> S3: set files\\nto public\nS3 -right-> Preprocessing: provide user submitted files\nPreprocessing -left-> S3: upload processed files\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["Loculus", "website", "backend", "keycloak", "postgres", "s3", "preprocessing", "ingest"],
  "description": "Ce diagramme UML décrit l'architecture de l'application Loculus, y compris les différents composants tels que le site web, le backend, la base de données Postgres, S3, ainsi que les pipelines de prétraitement et d'ingestion.",
  "source": "@startuml\n... (le code entier)\n@enduml"
}
,
{
  "prompt": "@startuml\n\nclass Patron {\n    -name: String\n    -age: int\n    -libraryCards: List<LibraryCard>\n}\nclass Library {\n    -name: String\n    -libraryCards: List<LibraryCard>\n    -checkableAmounts: List<CheckableAmount>\n}\nabstract class Checkable {\n    -isbn: String\n    -title: String\n}\nclass CheckableAmount {\n    -amount: int\n    -checkable: Checkable\n}\nclass LibraryCard {\n    -patron: Patron\n    -library: Library\n    -checkouts: List<Checkout>\n}\nclass Checkout {\n    -checkable: Checkable\n    -dueDate: LocalDateTime\n}\nclass Media {\n-mediaType: MediaType\n-author: String\n}\nenum MediaType {\n    BOOK\n    MUSIC\n    VIDEO\n}\nclass ScienceKit {\n}\nclass Ticket {\n}LibraryCard \"0..\" --o \"1\" Patron\nLibraryCard \"0..\" --o \"1\" Library\nLibraryCard \"1\" o-- \"0..\" Checkout\nLibrary \"1\" o-- \"0..\" CheckableAmount\nCheckableAmount *- Checkable\nCheckout *--- Checkable\nCheckable <|-- Media\nCheckable <|-- ScienceKit\nCheckable <|-- Ticket\nMedia -- MediaType\n@enduml",
  "code": "@startuml\n\nclass Patron {\n    -name: String\n    -age: int\n    -libraryCards: List<LibraryCard>\n}\nclass Library {\n    -name: String\n    -libraryCards: List<LibraryCard>\n    -checkableAmounts: List<CheckableAmount>\n}\nabstract class Checkable {\n    -isbn: String\n    -title: String\n}\nclass CheckableAmount {\n    -amount: int\n    -checkable: Checkable\n}\nclass LibraryCard {\n    -patron: Patron\n    -library: Library\n    -checkouts: List<Checkout>\n}\nclass Checkout {\n    -checkable: Checkable\n    -dueDate: LocalDateTime\n}\nclass Media {\n-mediaType: MediaType\n-author: String\n}\nenum MediaType {\n    BOOK\n    MUSIC\n    VIDEO\n}\nclass ScienceKit {\n}\nclass Ticket {\n}LibraryCard \"0..\" --o \"1\" Patron\nLibraryCard \"0..\" --o \"1\" Library\nLibraryCard \"1\" o-- \"0..\" Checkout\nLibrary \"1\" o-- \"0..\" CheckableAmount\nCheckableAmount *- Checkable\nCheckout *--- Checkable\nCheckable <|-- Media\nCheckable <|-- ScienceKit\nCheckable <|-- Ticket\nMedia -- MediaType\n@enduml",
  "langage": "PlantUML",
  "type": "class diagramme",
  "tags": [
    "Patron",
    "Library",
    "CheckableAmount",
    "LibraryCard",
    "Checkout",
    "Media",
    "ScienceKit",
    "Ticket"
  ],
  "description": "Ce diagramme représente la structure des classes et leurs relations dans un système de bibliothèque. Il montre les classes Patron, Library, CheckableAmount, LibraryCard, Checkout, Media, ScienceKit et Ticket ainsi que leurs associations.",
  "source": "@startuml\n\nclass Patron {\n    -name: String\n    -age: int\n    -libraryCards: List<LibraryCard>\n}\nclass Library {\n    -name: String\n    -libraryCards: List<LibraryCard>\n    -checkableAmounts: List<CheckableAmount>\n}\nabstract class Checkable {\n    -isbn: String\n    -title: String\n}\nclass CheckableAmount {\n    -amount: int\n    -checkable: Checkable\n}\nclass LibraryCard {\n    -patron: Patron\n    -library: Library\n    -checkouts: List<Checkout>\n}\nclass Checkout {\n    -checkable: Checkable\n    -dueDate: LocalDateTime\n}\nclass Media {\n-mediaType: MediaType\n-author: String\n}\nenum MediaType {\n    BOOK\n    MUSIC\n    VIDEO\n}\nclass ScienceKit {\n}\nclass Ticket {\n}LibraryCard \"0..\" --o \"1\" Patron\nLibraryCard \"0..\" --o \"1\" Library\nLibraryCard \"1\" o-- \"0..\" Checkout\nLibrary \"1\" o-- \"0..\" CheckableAmount\nCheckableAmount *- Checkable\nCheckout *--- Checkable\nCheckable <|-- Media\nCheckable <|-- ScienceKit\nCheckable <|-- Ticket\nMedia -- MediaType\n@enduml"
}
,
{
  "prompt": "@startuml\nparticipant Consumer as consumer\nactor \"Web Interface\" as web_interface\nactor \"Back-end Server\" as backend_server\ndatabase \"Database\" as database\n== Example Data Package Viewing ==\nconsumer -> web_interface : Navigate to home page\nweb_interface -> backend_server : Request featured data packages\nbackend_server -> database : Query for example data packages\ndatabase --> backend_server : Return example data package metadata\nbackend_server --> web_interface : Display example data packages\nweb_interface --> consumer : Present example data packages\n@enduml",
  "code": "@startuml\nparticipant Consumer as consumer\nactor \"Web Interface\" as web_interface\nactor \"Back-end Server\" as backend_server\ndatabase \"Database\" as database\n== Example Data Package Viewing ==\nconsumer -> web_interface : Navigate to home page\nweb_interface -> backend_server : Request featured data packages\nbackend_server -> database : Query for example data packages\ndatabase --> backend_server : Return example data package metadata\nbackend_server --> web_interface : Display example data packages\nweb_interface --> consumer : Present example data packages\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "diagramme UML"],
  "description": "Ce diagramme décrit le processus de visualisation de paquets de données. Un client navigate sur la page d'accueil, puis demande des données de paquets à un serveur qui les récupère dans une base de données et les affiche au client.",
  "source": "https://github.com/plantuml/plantuml"
}

,
{
  "prompt": "@startuml CompositePattern",
  "code": "@startuml CompositePattern\n...\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "Composite Pattern",
    "Design Pattern"
  ],
  "description": "Le diagramme illustre le Composite Design Pattern, qui permet de traiter des objets indifféremment que ils soient simples ou composés.",
  "source": "@startuml CompositePattern"
}
,
{
  "prompt": "vcmi-git-flow",
  "code": "@startuml \"vcmi-git-flow\"\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["git", "flow", "VCMI", "release", "process"],
  "description": "Diagramme UML représentant le processus de gestion du code source et de publication de nouvelles versions de l'application VCMI.",
  "source": "https://example.com/vcmi-git-flow"
}
,
{
  "prompt": "@startuml SD Lv1",
  "code": "@startuml SD Lv1\nparticipant RobDroneGo as system\n[o-> system : PUT /building/{code}/elevator\nactivate system\n... (restant du code)\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["diagramme UML", "séquence", "participant"],
  "description": "Ce diagramme décrit une séquence de traitement pour mettre à jour les informations d'un ascenseur dans un bâtiment.",
  "source": "@startuml SD Lv1"
}
,
{
  "prompt": "Diagramme de classes pour le module Arrays",
  "code": "@startuml\ntitle Диаграмма классов модуля \"Arrays\"\nend title\n...\n@enduml",
  "langage": "C++",
  "type": "class",
  "tags": [
    "diagrammeUML",
    "classes",
    "moduleArrays",
    "C++"
  ],
  "description": "Ce diagramme décrit les classes du module Arrays, qui fournit des méthodes pour le traitement d'arrays sur CPU et GPU.",
  "source": "https://github.com/... (lien vers le code source)"
}
,
{
  "prompt": "@startuml\nparticipant User\nparticipant \"UI Interface\" as UI\nparticipant \"Search Controller\" as Controller\ndatabase \"DIMS Database\" as Database\nparticipant \"Results Handler\" as Results\n...\n@enduml",
  "code": "@startuml\nparticipant User\nparticipant \"UI Interface\" as UI\nparticipant \"Search Controller\" as Controller\ndatabase \"DIMS Database\" as Database\nparticipant \"Results Handler\" as Results\nUser -> UI : Enter search query (name)\nUI -> Controller : Process search request\nController -> Database : Query collections/objects by name\nDatabase --> Controller : Return query results\nController -> Results : Process and format results\nResults --> UI : Display search results\nUI --> User : Show search outcome\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "diagramme", "UML", "plantuml"],
  "description": "Ce diagramme UML représente la séquence des événements lors d'une recherche. Il montre comment les différents composants interagissent pour afficher les résultats de la recherche.",
  "source": "Code PlantUML fourni"
}

,{
  "prompt": "@startuml remote_attestation\ntitle\nRemote Attestation protocol\nend title\nautonumber\nbox \"IoT Platform\"\nparticipant TPM\nparticipant \"EMBRAVE\\nAgent\" as attester_agent\nendbox\nparticipant \"Verifier\" as verifier\nparticipant \"Join Service\" as join_service\nloop\nverifier->attester_agent: GET /api/quote: PCRs, nonce\nattester_agent->TPM: Load EK\nTPM->attester_agent: (EK_handle, EK_pub)\nattester_agent->TPM: Load AK\nTPM->attester_agent: (AK_handle, AK_pub)\nattester_agent->TPM: TPM2_Quote (PCRs, nonce)\nTPM->attester_agent: Quote\nattester_agent->TPM: Request quoted PCRs\nTPM->attester_agent: Values of quoted PCRs\nattester_agent<-attester_agent: Collect IMA log\nattester_agent->verifier: Quote, PCRs, IMA log\nverifier->verifier: Verify quote\nverifier->verifier: Verify IMA log integrity\nverifier->verifier: Verify IMA log against the whitelist\ngroup if Verification fails\n  verifier -> join_service: Notify the failure\n  verifier -> verifier: Stop RA\nelse\n  verifier -> verifier: Continue RA\nend",
  "code": "@startuml remote_attestation\ntitle\nRemote Attestation protocol\nend title\nautonumber\nbox \"IoT Platform\"\nparticipant TPM\nparticipant \"EMBRAVE\\nAgent\" as attester_agent\nendbox\nparticipant \"Verifier\" as verifier\nparticipant \"Join Service\" as join_service\nloop\nverifier->attester_agent: GET /api/quote: PCRs, nonce\nattester_agent->TPM: Load EK\nTPM->attester_agent: (EK_handle, EK_pub)\nattester_agent->TPM: Load AK\nTPM->attester_agent: (AK_handle, AK_pub)\nattester_agent->TPM: TPM2_Quote (PCRs, nonce)\nTPM->attester_agent: Quote\nattester_agent->TPM: Request quoted PCRs\nTPM->attester_agent: Values of quoted PCRs\nattester_agent<-attester_agent: Collect IMA log\nattester_agent->verifier: Quote, PCRs, IMA log\nverifier->verifier: Verify quote\nverifier->verifier: Verify IMA log integrity\nverifier->verifier: Verify IMA log against the whitelist\ngroup if Verification fails\n  verifier -> join_service: Notify the failure\n  verifier -> verifier: Stop RA\nelse\n  verifier -> verifier: Continue RA\nend",
  "langage": "plantuml",
  "type": "sequence",
  "tags": [
    "UML",
    "Sequence",
    "Remote Attestation",
    "IoT"
  ],
  "description": "Le diagramme décrit le protocole d'attestation à distance. Il montre les interactions entre l'agent attester, la plateforme IoT et le verificateur.",
  "source": "https://github.com/plantuml-stdlib/diagrams/blob/master/src/remote_attestation.puml"
}

,
{
  "prompt": "@startuml nduleDiag",
  "code": "@startuml nduleDiag\n...\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "client",
    "Utilisateur",
    "musicien",
    "musique",
    "downloads",
    "Abonnement",
    "notification",
    "playList",
    "admin",
    "Album",
    "favoris",
    "signalemnt"
  ],
  "description": "Modèle de classes pour une application de musique avec des utilisateurs, musiciens, musique, notifications et plus.",
  "source": "Code PlantUML original"
}
,
{
  "prompt": "SQ",
  "code": "@startuml SQ\nautonumber\ntitle SD10.5. Xuất tệp Excel\nactor \"Actor\" as actor\nboundary \"Transaction\\nView\" as view\ncontrol \"Transaction\\nController\" as controller\ncontrol \"ExcelService\" as service\nentity \"Transaction\\nRepository\" as model\ndatabase \"Database\" as database\nactivate actor\nactor -> view : click export button\nactivate view\nview -> view: open confirmation dialog\nalt click confirm\nview -> controller : call api POST /export-excel\nactivate controller\ncontroller -> model : inject repository\nactivate model\nmodel -> database : find data\nactivate database\ndatabase --> model : return data\ndeactivate database\nmodel --> controller : return list objects\ndeactivate model\ncontroller -> service: process data\nactivate service\nservice --> controller : callback\ndeactivate service\ncontroller --> view : return file Excel\ndeactivate controller\nview -> actor: download file Excel\ndeactivate actor\nelse click cancel\nview -> view: close dialog\nactivate view\ndeactivate view\ndeactivate view\ndeactivate actor\nend\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "diagramme UML"],
  "description": "Le diagramme représente la séquence d'actions pour exporter un fichier Excel. Il montre l'interaction entre les différents acteurs, contrôleurs et services.",
  "source": "https://plantuml.com/"
}
,
{
  "prompt": "@startuml kizzy\n(*)-->\"input email\"\n-->\"send code to email\"\nif \"recieve code\" then\n    -->[yes]\"input code\"\n    if \"verify\" then \n      -->[yes]\"reset successfully\"\n      -->(*)\n    else\n      -->[no]\"input email\"\n    endif\nelse\n    --->[no]\"send code to email\"\nendif\n@enduml",
  "code": "@startuml kizzy\n(*)-->\"input email\"\n-->\"send code to email\"\nif \"recieve code\" then\n    -->[yes]\"input code\"\n    if \"verify\" then \n      -->[yes]\"reset successfully\"\n      -->(*)\n    else\n      -->[no]\"input email\"\n    endif\nelse\n    --->[no]\"send code to email\"\nendif\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["authentification", "code de vérification", "email"],
  "description": "Diagramme UML représentant un processus d'authentification par code de vérification envoyé par email.",
  "source": "@startuml kizzy"
}
,
{
  "prompt": "Diagramme de classe UML pour un Patient Profile",
  "code": "@startuml Patient Profile Class Diagram\n...\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["Patient", "Profile", "Service", "MedicalRecord", "Condition", "Allergy"],
  "description": "Le diagramme représente les classes et leurs relations pour un Patient Profile, y compris la navigation entre les classes.",
  "source": "https://plantuml.com/"
}
,
{
  "prompt": "",
  "code": "@startuml\nparticipant \"Aplication\" as CCode\nparticipant \"Assembly Code\" as AssemblyCode\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "uml", "assembly code", "token extraction"],
  "description": "Diagramme de séquence montrant l'extraction d'un token à partir d'une chaîne d'entrée en Assembly.",
  "source": ""
}
,
{
  "prompt": "@startuml\nskinparam Activity { FontSize 12\n\nDiamond { LineColor yellow BackgroundColor burlywood FontSize 14 FontStyle bold }\n}\nskinparam Partition { BorderColor<invisiblenone FontColor<invisiblenone \ntitle Activity diagram of \\n<font name=monospace><color #5132be>DecrFor.main()</color></font> method\nstart\nclass\n:int x;;;\npartition #9bd68d for loop { note : Loop control variable \\nis decremented by \\n5 each time :x = 100;; <<task>> while(x > -100) is (<color:green>true)\n:System.out.println(x);; <<output>> backward:x -= 5;; <<task>> endwhile (<color:red>false)}\nstop\n@enduml",
  "code": "@startuml\nskinparam Activity {\n FontSize 12\n\n Diamond { LineColor yellow BackgroundColor burlywood FontSize 14 FontStyle bold }\n}\nskinparam Partition {\n BorderColor<invisiblenone\n FontColor<invisiblenone \ntitle Activity diagram of \\n<font name=monospace><color #5132be>DecrFor.main()</color></font> method\nstart\nclass\n:int x;;;\npartition #9bd68d for loop { note : Loop control variable \\nis decremented by \\n5 each time :x = 100;; <<task>> while(x > -100) is (<color:green>true)\n:System.out.println(x);; <<output>> backward:x -= 5;; <<task>> endwhile (<color:red>false)}\nstop\n@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": ["activity", "diagram", "for", "loop"],
  "description": "Diagramme d'activité représentant la méthode DecrFor.main() avec un boucle pour et une partition pour la gestion de la variable de contrôle.",
  "source": "https://github.com/plantuml/plantuml"
}
,
{
  "prompt": "@startuml\nleft to right direction\nactor Patient\nactor Admin\nrectangle \"EMR System\" {\n...",
  "code": "@startuml\nleft to right direction\nactor Patient\nactor Admin\nrectangle \"EMR System\" {\n...",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "EMR System",
    "Patient",
    "Admin",
    "Account",
    "Database",
    "ID",
    "Validation"
  ],
  "description": "Ce diagramme UML représente une séquence de traitement d'une requête de création d'un compte patient par un administrateur. Il décrit les interactions entre les différents composants du système EMR et les utilisateurs.",
  "source": "https://plantuml.com/"
}
,
{
  "prompt": "",
  "code": "@startuml\n...\n@enduml",
  "langage": "PlantUML",
  "type": "class diagramme",
  "tags": [
    "UML",
    "diagramme de classes",
    "plantuml"
  ],
  "description": "Ce diagramme représente la structure et les relations entre différentes entités du code, notamment les classes, les interfaces et les adhérences.",
  "source": ""
}
,
{
  "prompt": "@startuml",
  "code": "@startuml\nhide empty description\ntext...\n...",
  "langage": "PlantUML",
  "type": "state machine diagramme",
  "tags": ["etat", "machine à états"],
  "description": "Diagramme d'état représentant une logique de traitement avec des choix et des branches.",
  "source": "@startuml"
}
,
{
  "prompt": "@startuml\n!include <awslib/AWSCommon>\n!include <awslib/AWSSimplified.puml>\n!include <awslib/Compute/all.puml>\n!include <awslib/mobile/all.puml>\n!include <awslib/general/all.puml>\nEC2(Smadex, \"Smadex Service\", \" \")\nUsers(Users, \"Users\", \" \")\nTraditionalServer(AdExchange, \"Ad Exchange\", \" \")\nMobile(Mobile, \"Publisher app or web\", \" \")\nUsers -down-> Mobile: 1. Visits\nMobile -right-> AdExchange: 2. Start auction\nAdExchange -right-> Smadex: 3. Bid request / response\nSmadex -left-> Mobile: 4. Show Ad\nUsers -right-> Smadex: 5. Impression / click / install / event {request id}\n@enduml",
  "code": "@startuml\n!include <awslib/AWSCommon>\n!include <awslib/AWSSimplified.puml>\n!include <awslib/Compute/all.puml>\n!include <awslib/mobile/all.puml>\n!include <awslib/general/all.puml>\nEC2(Smadex, \"Smadex Service\", \" \")\nUsers(Users, \"Users\", \" \")\nTraditionalServer(AdExchange, \"Ad Exchange\", \" \")\nMobile(Mobile, \"Publisher app or web\", \" \")\nUsers -down-> Mobile: 1. Visits\nMobile -right-> AdExchange: 2. Start auction\nAdExchange -right-> Smadex: 3. Bid request / response\nSmadex -left-> Mobile: 4. Show Ad\nUsers -right-> Smadex: 5. Impression / click / install / event {request id}\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["AWS", "EC2", "Smadex", "Ad Exchange", "Publisher app", "web"],
  "description": "Diagramme de séquence représentant le processus d'affichage d'un annonce.",
  "source": "@startuml\n!include <awslib/AWSCommon>\n!include <awslib/AWSSimplified.puml>\n!include <awslib/Compute/all.puml>\n!include <awslib/mobile/all.puml>\n!include <awslib/general/all.puml>\nEC2(Smadex, \"Smadex Service\", \" \")\nUsers(Users, \"Users\", \" \")\nTraditionalServer(AdExchange, \"Ad Exchange\", \" \")\nMobile(Mobile, \"Publisher app or web\", \" \")\nUsers -down-> Mobile: 1. Visits\nMobile -right-> AdExchange: 2. Start auction\nAdExchange -right-> Smadex: 3. Bid request / response\nSmadex -left-> Mobile: 4. Show Ad\nUsers -right-> Smadex: 5. Impression / click / install / event {request id}\n@enduml"
}
,
{
  "prompt": "@startuml !theme plain ...\n@enduml",
  "code": "@startuml !theme plain\ndesigner -> tool : Start editing homepage\ndesigner -> tool : Finalize edits\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["plantuml", "diagramme de séquence", "uml"],
  "description": [
    "Ce diagramme UML montre la séquence des étapes pour effectuer des modifications sur un projet.",
    "Il détaille les interactions entre différents acteurs, tels que le designer, l'outil de conception, le système de gestion de versions, etc."
  ],
  "source": "https://github.com/plantuml/plantuml"
}
,
{
  "prompt": "@startuml\n/'la autora es imane Alouane'/\n\n",
  "code": "@startuml\n/'la autora es imane Alouane'/\n\nclass C_Conversacion<<Entity>>{ \n/'\nse deducen de la asociacion , así que no hace falta ponerlos \nParticipante1:C_Usuario \n\nParticipante2:C_Usuario \n'/\nfecha_inicio: Date \nfecha_fin: Date [0..1] \n/new_mensaje:boolean \n} \n\nclass C_Mensaje<<Entity>>{ \nInstante:datetime\n/'\nigualr que con conversaciones, creo que no hacen falta\nemisor:C_Usuario\nreceptor:C_Usuario\n'/\nTexto:String \n\n} \n\nnote as RN_conversaciones\n<b> RN-4-00 </b> Todos los datos de una conversacion y de un mensaje son obligatorios.\n<b> RN-4-01 </b> La conversación termine (fecha de finalización) despues del inicio(fecha de inicio).\n<b> RN-4-02 </b> Una conversacío solo puede crearse bajo un vínculo de amistad actvo, En caso Contrario ni se muestra la opción  ni podrá definirse en el sistema.\nend note\n\nnote as RN_mensajes\n<b> RN-4-0 </b> todos los datos de una conversadcion de un mensaje son obligatorios.\n<b> RN-4-3 </b> el instante en el que se genera ubn mensaje esté dntro del intervalo definido para una Conversación( que está activa si no tiene fecha de fin).\nNingun mensaje puede ser posterior al cierra de una conversacion.\nend note\n\nRN_conversaciones --C_Conversacion\nRN_mensajes -- C_Mensaje\n\nC_Conversacion*--\"*\"C_Mensaje:compuesta\n@enduml \n",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["Entity", "Association", "Note"],
  "description": "Diagramme UML représentant les classes C_Conversacion et C_Mensaje, ainsi que leurs associations et notes de documentation.",
  "source": "https://github.com/plantuml-stdlib/PlantUML"
}
,
{
  "prompt": "@startuml\nclass Range {\n int offset\n int size\n}\n@enduml",
  "code": "@startuml\nclass Range {\n int offset\n int size\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["uml", "plantuml", "diagramme de classe"],
  "description": "Le diagramme décrit une classe nommée 'Range' avec deux champs : 'offset' et 'size'.",
  "source": "@startuml\nclass Range {\n int offset\n int size\n}\n@enduml"
}

,{
  "prompt": "",
  "code": "@startuml\nleft to right direction\nactor :Developer: as Dev\nrectangle \"Application Stack\" #aaffaa {\nUseCase UC1 as \"Manage Applications\"\nUseCase UC2  as \"Manage Services\"\n\nDev --> UC1\nDev --> UC2\n}\n@enduml",
  "langage": "PlantUML",
  "type": "usecase",
  "tags": ["plantuml", "uml", "diagramme de cas d'utilisation"],
  "description": "Ce diagramme décrit les interactions entre un développeur et l'application, en mettant en évidence deux cas d'utilisation : la gestion des applications et la gestion des services.",
  "source": ""
}
,
{
  "prompt": "@startuml\nleft to right direction\nskinparam actorStyle awesome\n\"Admin\" as admin\nrectangle Alertas {\n    (Visualizar\\nalertas) as select_alert\n    (Ignorar\\nalerta) as ignore_alert\n    (Arquivar\\nalerta) as archive_alert\n    (Encaminhar\\nalerta) as mail_alert\n    (Copiar\\nconteúdo\\ndo alerta) as copy_alert\n}\nrectangle \"App de e-mail\\npadrão do usuário\" as external_sys\nnote right of copy_alert\n    O conteúdo do alerta\n    é copiado para o\n    corpo do e-mail\nend note\nadmin -- select_alert\nselect_alert ..> mail_alert : <<incluir>>\nmail_alert <.. copy_alert : <<estender>>\ncopy_alert -- external_sys\nselect_alert ..> ignore_alert : <<incluir>>\nignore_alert <.. archive_alert : <<estender>>\n@enduml",
  "code": "@startuml\nleft to right direction\nskinparam actorStyle awesome\n\"Admin\" as admin\nrectangle Alertas {\n    (Visualizar\\nalertas) as select_alert\n    (Ignorar\\nalerta) as ignore_alert\n    (Arquivar\\nalerta) as archive_alert\n    (Encaminhar\\nalerta) as mail_alert\n    (Copiar\\nconteúdo\\ndo alerta) as copy_alert\n}\nrectangle \"App de e-mail\\npadrão do usuário\" as external_sys\nnote right of copy_alert\n    O conteúdo do alerta\n    é copiado para o\n    corpo do e-mail\nend note\nadmin -- select_alert\nselect_alert ..> mail_alert : <<incluir>>\nmail_alert <.. copy_alert : <<estender>>\ncopy_alert -- external_sys\nselect_alert ..> ignore_alert : <<incluir>>\nignore_alert <.. archive_alert : <<estender>>\n@enduml",
  "langage": "plantuml",
  "type": "sequence",
  "tags": [
    "UML",
    "séquence",
    "diagramme"
  ],
  "description": "Le diagramme montre les interactions entre un administrateur et des alertes. L'administrateur peut visualiser, ignorer ou archiver des alertes.",
  "source": "https://github.com/plantuml/plantuml-server/wiki/Pipe-Commands#sequence-diagrams"
}

,
{
  "prompt": "Storage Net, Use Case, Move from begin",
  "code": "@startuml Storage Net, Use Case, Move from begin\\nleft to right direction\\nactor \"Administrator A\" as admin_a\\nactor \"Transporter\" as transporter\\nusecase \"Take items away\" as take_away\\npackage System {\\n  usecase \"Confirm taking items away\" as confirm\\n  usecase \"Notify\" as notify\\n}\\nadmin_a -down-> take_away\\ntake_away -down-> transporter\\nadmin_a --> confirm\\nconfirm ..> notify : include\\n@enduml",
  "langage": "PlantUML",
  "type": "usecase",
  "tags": ["utilisateur", "acteur", "processus", "système"],
  "description": "Ce diagramme UML représente un processus de gestion de stock avec des utilisateurs et des systèmes impliqués. Il décrit les interactions entre l'administrateur, le transporteur et le système.",
  "source": "https://github.com/plantuml/plantuml-samples/blob/master/usecase.puml"
}
,
{
  "prompt": "",
  "code": "@startuml\nautonumber...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "sequence", 
    "usecase", 
    "class", 
    "component"
  ],
  "description": "Ce diagramme UML représente une séquence d'actions pour créer un bâtiment et ses étages. Il montre les interactions entre différents acteurs, participants et services.",
  "source": ""
}
,
{
  "prompt": "@startuml\n'https://plantuml.com/class-diagram\n",
  "code": "@startuml\n'https://plantuml.com/class-diagram\n\ntitle List Teacher's Course Exams\n\ntop to bottom direction\nskinparam linetype ortho\n\npackage Teacher {\n    class Teacher <<root>> {\n        + courses() : Iterable<Course>\n    }\n}\n\npackage Exam {\n    class Exam <<root>>\n}\n\npackage Course {\n    class Course <<root>>\n}\n\npackage repositories {\n    interface TeacherRepository{\n        + findById() : Optional<Teacher>\n    }\n\n    interface ExamRepository{\n        + findByCourse() : Iterable<Exam>\n    }\n}\n\npackage infraestructure.persistence {\n    class PersistenceContext {\n    + repositories : RepositoryFactory\n    }\n\n    interface RepositoryFactory {\n        + teachers() : TeacherRepository\n        + exams() : ExamRepository\n    }\n}\n\nclass ListCourseExamsUI <<presentation>>\n\nclass ListCourseExamsController <<application>> {\n    + listCourses() : Iterable<Course>\n    + listCourseExams() : Iterable<Exam>\n}\n\nListCourseExamsUI ..> ListCourseExamsController\n\nListCourseExamsUI ..> Exam.Exam\n\nListCourseExamsUI ..> Course.Course\n\nListCourseExamsController ..> PersistenceContext\n\nListCourseExamsController ..> RepositoryFactory\n\nListCourseExamsController ..> TeacherRepository\n\nListCourseExamsController ..> ExamRepository\n\nListCourseExamsController ..> Teacher.Teacher\n\nTeacher.Teacher --> Course.Course\n\nExam.Exam --> Course.Course\n\nPersistenceContext --> RepositoryFactory\n\nRepositoryFactory --> TeacherRepository\n\nRepositoryFactory --> ExamRepository\n\nTeacherRepository --> Teacher.Teacher\n\nExamRepository --> Exam.Exam\n\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["plantuml", "class-diagram", "uml"],
  "description": "Diagramme de classes représentant l'architecture d'une application qui liste les examens des cours d'un enseignant.",
  "source": "@startuml\n'https://plantuml.com/class-diagram\n"
}
,
{
  "prompt": "",
  "code": "@startuml\nclass ThingCategoryDef {\n    + iconPath : string\n    + resourceReadoutRoot : bool\n    + ContainedInThisOrDescendant(thingDef:ThingDef) : bool\n    + \\<<override>> ResolveReferences() : void\n    + \\<<override>> PostLoad() : void\n    + {static} Named(defName:string) : ThingCategoryDef\n    + \\<<override>> GetHashCode() : int\n}\nclass \"List`1\"<T> {\n}\nclass \"IEnumerable`1\"<T> {\n}Def <|-- ThingCategoryDef\nThingCategoryDef --> \"parent\" ThingCategoryDef\nThingCategoryDef --> \"treeNode\" TreeNode_ThingCategory\nThingCategoryDef o-> \"childCategories<ThingCategoryDef}\" \"List`1\"\nThingCategoryDef o-> \"childThingDefs<ThingDef>\" \"List`1\"\nThingCategoryDef o-> \"childSpecialFilters<SpecialThingFilterDef>\" \"List`1\"\nThingCategoryDef o-> \"icon\" Texture2D\nThingCategoryDef --> \"Parents<ThingCategoryDef>\" \"IEnumerable`1\"\nThingCategoryDef --> \"ThisAndChildCategoryDefs<ThingCategoryDef>\" \"IEnumerable`1\"\nThingCategoryDef --> \"DescendantThingDefs<ThingDef>\" \"IEnumerable`1\"\nThingCategoryDef --> \"DescendantSpecialThingFilterDefs<SpecialThingFilterDef>\" \"IEnumerable`1\"\nThingCategoryDef --> \"ParentsSpecialThingFilterDefs<SpecialThingFilterDef>\" \"IEnumerable`1\"\n@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": ["uml", "plantuml", "diagramme de classe"],
  "description": "Le diagramme montre une classe ThingCategoryDef et ses relations avec d'autres classes.",
  "source": ""
}
,
{
  "prompt": "@startuml title Déplacer a gauche participant \"main : Main\" as main participant \"laby : Labyrinthe\" as laby ... @enduml",
  "code": "@startuml\ntitle Déplacer a gauche\nparticipant \"main : Main\" as main\nparticipant \"laby : Labyrinthe\" as laby...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["plantuml", "diagramme UML", "séquence"],
  "description": "Le diagramme décrit une séquence d'appels entre les classes Main et Labyrinthe.",
  "source": "@startuml"
}
,
{
  "prompt": "Créer un diagramme de séquence UML représentant le flux des données dans une application web",
  "code": "@startuml\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["diagramme", "UML", "séquence", "flux de données"],
  "description": "Ce diagramme représente le flux des données dans une application web. Il montre les interactions entre les utilisateurs, les participants et les services.",
  "source": "https://github.com/plantuml/plantuml"
}
,
{
  "prompt": "@startuml Drehmoment",
  "code": "@startuml Drehmoment\n...restant du code UML...\n@enduml",
  "langage": "UML",
  "type": "class",
  "tags": ["SewMotor", "Formeln", "DrehstrommotorGUI", "JFrame"],
  "description": "Diagramme de classes représentant les entités SewMotor, Formeln et DrehstrommotorGUI.",
  "source": "@startuml Drehmoment"
}
,
{
  "prompt": "@startuml\nabstract class symmetricencryption.SymmetricEncryption { ... }",
  "code": "@startuml\nabstract class symmetricencryption.SymmetricEncryption { ...\n...}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["symmetric", "encryption", "Vigenere", "ASCIIOffsetEncoding", "TextEncoding"],
  "description": "Diagramme de classes décrivant l'architecture d'un système de chiffrement symétrique.",
  "source": "@startuml"
}
,
{
  "prompt": "",
  "code": "@startuml\nactor \"Người dùng\" as User\nparticipant \"Trang Sản phẩm\" as ProductPage\ndefault \"Hệ thống\" as System\nUser -> ProductPage: Truy cập trang sản phẩm\nUser -> ProductPage: Chọn danh mục sản phẩm\nProductPage -> System: Lấy danh sách sản phẩm\nSystem --> ProductPage: Trả về danh sách sản phẩm\nProductPage --> User: Hiển thị danh sách sản phẩm\nUser -> ProductPage: Xem chi tiết sản phẩm (tùy chọn)\nProductPage -> System: Lấy chi tiết sản phẩm (tùy chọn)\nSystem --> ProductPage: Trả về chi tiết sản phẩm (tùy chọn)\nProductPage --> User: Hiển thị chi tiết sản phẩm (tùy chọn)\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "diagramme UML", "séquence d'événements"],
  "description": "Ce diagramme UML montre la séquence d'événements lors du parcours d'un utilisateur sur une page de produit. Il décrit les interactions entre l'utilisateur, la page de produit et le système.",
  "source": ""
}
,
{
  "prompt": "Diagramme UML pour le système de gestion d'employés",
  "code": "@startuml\nskinparam classAttributeIconSize 0\nleft to right direction\n\nclass RegisterEmployeeUI {\n}\nclass RegisterEmployeeController {\n  +getEmployeeRoles()\n  +registerEmployee(name, address, phone number, e-mail, Citizen Card number)\n  +setRole(role)\n  +saveEmployee()\n}\nclass EmployeeStore {\n  +registerEmployee(name, address, phone number, e-mail, Citizen Card number)\n  +setRole(role)\n  +saveEmployee(employee)\n  +validateEmployee(employee)\n  +addEmployee(employee)\n}\nclass Employee {\n  -name\n  -address\n  -phoneNumber\n  -email\n  -citizenCardNumber\n  -role\n  +getName\n  +getAddress\n  +getPhoneNumber\n  +getEmail\n  +getCitizenCardNumber\n  +getRole\n  +setName\n  +setAddress\n  +setPhoneNumber\n  +setEmail\n  +setCitizenCardNumber\n  +setRole\n}\nclass Company {\n}\nRegisterEmployeeUI ..> RegisterEmployeeController\nRegisterEmployeeController ..> Company\nRegisterEmployeeController ..> Employee\nCompany \"1\"--\"1\" EmployeeStore : uses >\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["système de gestion d'employés", "système de gestion des ressources humaines"],
  "description": "Ce diagramme représente les classes et leurs relations dans le système de gestion d'employés.",
  "source": "https://github.com/plantuml/plantuml"
}
,
{
  "prompt": "@startuml ... @enduml",
  "code": "@startuml\ndefault skinparam linetype ortho...\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "Helm Charts",
    "mariadb-galera",
    "common",
    "Docker Image"
  ],
  "description": "Diagramme de composants représentant les chartes Helm et la dépendance envers une image Docker.",
  "source": "https://github.com/melahn/helm-chartmap"
}
,
{
  "prompt": "Code PlantUML pour un diagramme de systèmes et de conteneurs C4",
  "code": "@startuml\n!include c4puml/C4_Container.puml...\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["C4", "system", "container", "architecture"],
  "description": "Ce diagramme décrit l'architecture d'un système qui inclut une application web, un serveur de base de données et un gestionnaire de tâches asynchrones.",
  "source": "https://github.com/plantuml/plantuml-examples"
}
,
{
  "prompt": "",
  "code": "@startuml\n!include <c4/C4_Component>\nskinparam monochrome true\nset separator ::\n<style>\nclass {\n    Minimumwidth 100\n    Maximumwidth 600\n}\n</style>\n\nclass agh.wfiis.weather::auth::controller::AuthenticationController {\n    {method} createToken(dto : AuthenticationDto) : AuthenticationResponseDto\n}\n\nclass agh.wfiis.weather::auth::jwt::JwtFactory {\n    {method} generate(authentication : Authentication, scope : String) : Jwt\n}\n\ninterface agh.wfiis.weather::auth::jwt::service::JwtService {\n    {method} createToken(authentication : Authentication) : AuthenticationResponseDto\n}\n\nclass agh.wfiis.weather::auth::jwt::service::RestJwtService {\n    {method} createToken(authentication : Authentication) : AuthenticationResponseDto\n}\n\nagh.wfiis.weather::auth::jwt::service::JwtService <|.. agh.wfiis.weather::auth::jwt::service::RestJwtService\nagh.wfiis.weather::auth::jwt::service::RestJwtService --* agh.wfiis.weather::auth::jwt::JwtFactory\nagh.wfiis.weather::auth::controller::AuthenticationController --* agh.wfiis.weather::auth::jwt::service::JwtService\n\n@enduml",
  "langage": "",
  "type": "class",
  "tags": [
    "UML",
    "Class Diagramme",
    "Authentification"
  ],
  "description": "Diagramme de classe montrant les classes et interfaces impliquées dans l'authentification.",
  "source": ""
}
,
{
  "prompt": "@startuml SunMovement_Class_Diagram",
  "code": "@startuml SunMovement_Class_Diagram\n!theme plain\nskinparam backgroundColor #FFFFFF\nskinparam class {\n    BackgroundColor #E8F4FD\n    BorderColor #2196F3\n    FontColor #1976D2\n    ArrowColor #1976D2\n}\ntitle \"SUN MOVEMENT - CLASS DIAGRAM (Core Business Objects)\"\npackage \"Quản lý người dùng\" {\n    ...\n}\npackage \"Sản phẩm và dịch vụ\" {\n    ...\n}\npackage \"Đơn hàng và thanh toán\" {\n    ...\n}\npackage \"Quản lý kho\" {\n    ...\n}\npackage \"Mã giảm giá\" {\n    ...\n}\npackage \"Hệ thống đánh giá\" {\n    ...\n}\npackage \"Hỗ trợ khách hàng\" {\n    ...\n}' ========== RELATIONSHIPS ==========\\n' Người dùng\nNguoiDung ||--o{ DonHang : \"1 người dùng có nhiều đơn hàng\"\nNguoiDung ||--o{ GioHang : \"1 người dùng có 1 giỏ hàng\"\nNguoiDung ||--o{ DanhGiaSanPham : \"1 người dùng có nhiều đánh giá\"\nNguoiDung ||--o{ TuongTacNguoiDung : \"1 người dùng có nhiều tương tác\"\\n' Sản phẩm\nSanPham ||--o{ BienTheSanPham : \"1 sản phẩm có nhiều biến thể\"\nSanPham ||--o{ ChiTietDonHang : \"1 sản phẩm có trong nhiều đơn hàng\"\nSanPham ||--o{ ChiTietGioHang : \"1 sản phẩm có trong nhiều giỏ hàng\"\nSanPham ||--o{ DanhGiaSanPham : \"1 sản phẩm có nhiều đánh giá\"\nSanPham ||--o{ GiaoDichKho : \"1 sản phẩm có nhiều giao dịch kho\"\nSanPham ||--o{ TuongTacNguoiDung : \"1 sản phẩm có nhiều tương tác\"\\n' Dịch vụ\nDichVu ||--o{ LichDichVu : \"1 dịch vụ có nhiều lịch\"\nDichVu ||--o{ ChiTietGioHang : \"1 dịch vụ có trong nhiều giỏ hàng\"\\n' Đơn hàng\nDonHang ||--o{ ChiTietDonHang : \"1 đơn hàng có nhiều chi tiết\"\nDonHang ||--o{ GiaoDichKho : \"1 đơn hàng tạo nhiều giao dịch kho\"\\n' Giỏ hàng\nGioHang ||--o{ ChiTietGioHang : \"1 giỏ hàng có nhiều chi tiết\"\\n' Quản lý kho\nNhaCungCap ||--o{ GiaoDichKho : \"1 nhà cung cấp có nhiều giao dịch\"\\n' Mã giảm giá\nMaGiamGia ||--o{ LichSuSuDungMa : \"1 mã có nhiều lần sử dụng\"\\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme", "uml", "plantuml"],
  "description": "Ce diagramme UML représente le modèle de données et les relations entre les différents entités du système Sun Movement.",
  "source": "@startuml SunMovement_Class_Diagram"
}
,
{
  "prompt": "",
  "code": "@startuml microservices-interaction\n... (le reste du code)",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "microservices",
    "architecture",
    "API Gateway",
    "authentication",
    "user management",
    "product inventory",
    "order payment processing",
    "customer engagement",
    "event-driven communication",
    "external systems"
  ],
  "description": "Schéma d'architecture de BuStore, illustrant les interactions entre ses microservices.",
  "source": ""
}
,
{
  "prompt": "Diagramme UML",
  "code": "@startuml 12回\n... (code entier)",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "diagramme UML",
    "plantuml",
    "uml",
    "sequence diagram"
  ],
  "description": "Le diagramme représente le modèle de classes pour un système de gestion de bibliothèque. Il montre les relations entre les différentes entités.",
  "source": "@startuml 12回\n... (code entier)"
}
,
{
    "prompt": "@startuml\nsalt\n{\nCreate Policy\n{\n    name | \"myPolicy\"\n    cloud | \"myCloud\"\n    env | \"dev\"\n    filename | \"policy.yaml\"\n    [ Cancel <&circle-x>] | [ OK <&account-login> ]\n}\n}\n@enduml",
    "code": "@startuml\nsalt\n{\nCreate Policy\n{\n    name | \"myPolicy\"\n    cloud | \"myCloud\"\n    env | \"dev\"\n    filename | \"policy.yaml\"\n    [ Cancel <&circle-x>] | [ OK <&account-login> ]\n}\n}\n@enduml",
    "langage": "plantUML",
    "type": "usecase",
    "tags": ["create", "policy", "cloud", "env", "filename"],
    "description": "Créer une politique de sécurité avec des paramètres spécifiques.",
    "source": "@startuml"
}
,
{
  "prompt": "Code UML",
  "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\n!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons\n!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5\n!include DEVICONS/java.puml\n!include FONTAWESOME/users.puml\n\nPerson(user, \"User\", \"User of Clipper MS\", \\$sprite=\"users\")\nPerson(admin, \"admin\", \"Admin of Clipper MS\", \\$sprite=\"users\")\nContainer(sys, \"Clipper MS\", \"collection & trading system\", \"The complete Clipper MS system\", \\$sprite=\"java\")\n\nSystem_Ext(ai, \"Matching AI\", \"AI model used to match trade-able clippers to a wishlist\")\nSystem_Ext(log, \"Google SSO\", \"SSO service used to authenticate users via an OAuth2.0 grant flow\")\n\nRel(user, sys, \"Uses\")\nRel(admin, sys, \"Uses\")\nRel(sys, ai, \"Uses\")\nRel(sys, log, \"Uses\")\nSHOW_FLOATING_LEGEND()\n@enduml",
  "langage": "PlantUML",
  "type": "Component",
  "tags": [
    "C4-PlantUML",
    "Clipper MS",
    "Matching AI",
    "Google SSO"
  ],
  "description": "Le diagramme UML représente le système Clipper MS, qui comprend des utilisateurs, un administrateur et différents composants tels que la technologie de Matching AI et Google SSO.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
}

,
{
  "prompt": "@startuml PrijavaOsnovni",
  "code": "@startuml PrijavaOsnovni\n... (toute la syntaxe UML)\n@enduml",
  "langage": "UML",
  "type": "sequence",
  "tags": [
    "Prijava", 
    "osnovni tok", 
    "Neprijavljen uporabnik", 
    "Prijava", 
    "Krmilnik upravljanja računov"
  ],
  "description": "Ce diagramme UML décrit le flux de l'application de prise en compte. Il montre les interactions entre l'utilisateur non identifié, la fenêtre de prise en compte et le gestionnaire de comptes.",
  "source": "https://example.com/uml-plant"
}
,
{
  "prompt": "@startuml CrewAI_Framework_Classes_Only",
  "code": "Le code ci-dessus est une représentation UML de la structure et des relations entre les différentes classes dans le framework CrewAI.",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["CrewAI", "framework", "uml", "classes"],
  "description": "Le diagramme représente les classes du framework CrewAI, notamment la classe Crew qui contient des agents et des tâches. Les classes Agent, Task, Process, LLM Integration Layer et Tool Ecosystem sont également représentées.",
  "source": "@startuml CrewAI_Framework_Classes_Only"
}
,
{
  "prompt": "@startuml test\n!theme bluegray\nactor Utilisateur as user\ndatabase \"Base de données\" as db\ntitle Diagramme de séquence : Création d'un utilisateur\n@enduml",
  "code": "@startuml test\n!theme bluegray\nactor Utilisateur as user\nboundary Interface    as interface\nentity \"Web Service\" as API\nentity DAO as dao\ndatabase \"Base de données\" as db\nuser -> interface : Création utilisateur\ninterface -> API : POST /user\nAPI -> dao : Appel BDD\nda -> db : insert\ndb -> dao : OK\nda -> API : OK\nAPI -> interface : Utilisateur créé\ninterface -> user : Confirmation utilisateur\ntitle Diagramme de séquence : Création d'un utilisateur\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "diagramme",
    "séquence",
    "création",
    "utilisateur"
  ],
  "description": "Ce diagramme décrit la séquence de création d'un utilisateur.",
  "source": "@startuml test\n!theme bluegray\nactor Utilisateur as user\ndatabase \"Base de données\" as db\ntitle Diagramme de séquence : Création d'un utilisateur\n@enduml"
}
,
{
  "prompt": "Analyse du code PlantUML",
  "code": "@startuml\nclass com.example.riderfinal.ShoppingFragment {\n- HelperDB helperDB\n- Users user\n- int[] rewardIds\n+ View onCreateView(LayoutInflater,ViewGroup,Bundle)\n+ void onRewardClick(int)\n}\n\ncom.example.riderfinal.OnRewardClickListener <|.. com.example.riderfinal.ShoppingFragment\nandroidx.fragment.app.Fragment <|-- com.example.riderfinal.ShoppingFragment\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["UML", "diagramme de classes", "PlantUML"],
  "description": "Ce diagramme représente la structure d'une classe Java, avec ses attributs et méthodes.",
  "source": "https://github.com/plantuml-stdlib/java-examples/blob/master/fragments-diagrams.plantuml"
}
,
{
  "prompt": "@startuml Insecter's insect eats slowing spore\n... @enduml",
  "code": "@startuml Insecter's insect eats slowing spore\ntitle Insecter's insect eats slowingspore\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "UML", "PlantUML", "insect", "spore"],
  "description": "Le diagramme représente une séquence de comportement pour un insect qui mange une spore ralentissante. L'insect est contrôlé par un acteur Controller.",
  "source": "Code PlantUML"
}
,
{
  "prompt": "",
  "code": "@startuml\nhide methods\nskinparam groupInheritance 2\nskinparam class {\n    ArrowColor Black\n    BorderColor Black\n    BackgroundColor<<master-data>> #ffa080\n    ... (le reste du code)\n}\npacakge \"GenericWorkProduct Outgoing Relationships View\" <<rectangle>>\n{\n...\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "uml",
    "plantuml",
    "component",
    "class",
    "diagramme"
  ],
  "description": "Ce diagramme UML représente le modèle de composants d'un travail générique, en montrant les relations entre différents types d'objets et les attributs associés.",
  "source": ""
}
,
{
  "prompt": "@startuml\nstart\n:API request to get ticket received;\n:Retrieve authentication token from request header;\nif (Token valid?) then (yes)\n    :Retrieve user email from token;\n    :Get current user data;\n    :Get ticket data;\n    :Check if user is ticket owner;\n    if (User is ticket owner?) then (yes)\n        :Return ticket data;\n    else (no)\n        if (Check if a ticket is shared with user?) then (yes)\n            :Return ticket data;\n        else (no)\n            :Return 403 Forbidden;\n        endif\n    endif\nelse (no)\n  :Return 401 Unauthorized;\nendif\nstop\n@enduml",
  "code": "@startuml\nstart\n:API request to get ticket received;\n:Retrieve authentication token from request header;\nif (Token valid?) then (yes)\n    :Retrieve user email from token;\n    :Get current user data;\n    :Get ticket data;\n    :Check if user is ticket owner;\n    if (User is ticket owner?) then (yes)\n        :Return ticket data;\n    else (no)\n        if (Check if a ticket is shared with user?) then (yes)\n            :Return ticket data;\n        else (no)\n            :Return 403 Forbidden;\n        endif\n    endif\nelse (no)\n  :Return 401 Unauthorized;\nendif\nstop\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["UML", "sequence", "authentification", "API"],
  "description": "Ce diagramme décrit une séquence d'opérations pour récupérer des données sur un ticket. Il vérifie l'autorisation de l'utilisateur avant de fournir les données.",
  "source": "@startuml\nstart\n:API request to get ticket received;\n:Retrieve authentication token from request header;\nif (Token valid?) then (yes)\n    :Retrieve user email from token;\n    :Get current user data;\n    :Get ticket data;\n    :Check if user is ticket owner;\n    if (User is ticket owner?) then (yes)\n        :Return ticket data;\n    else (no)\n        if (Check if a ticket is shared with user?) then (yes)\n            :Return ticket data;\n        else (no)\n            :Return 403 Forbidden;\n        endif\n    endif\nelse (no)\n  :Return 401 Unauthorized;\nendif\nstop\n@enduml"
}
,

{
  "prompt": "@startuml\nentity tipos_endereco {\n  +id : serial\n  --\n  +created_at : timestamp\n  +updated_at : timestamp\n  +deleted_at : timestamp\n  +descricao : varchar\n}\n@enduml",
  "code": "@startuml\nentity tipos_endereco {\n  +id : serial\n  --\n  +created_at : timestamp\n  +updated_at : timestamp\n  +deleted_at : timestamp\n  +descricao : varchar\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "typicode",
    "endereco"
  ],
  "description": "Diagramme de classe décrivant la table 'tipos_endereco' avec ses attributs.",
  "source": "https://github.com/plantuml/plantuml-website/blob/master/diagrams/uml/tipos_endereco.puml"
}
,
{
  "prompt": "@startuml\n:User: as u\n:Admin: as a\n\nrectangle \"LCT Services\" as ltcservices #line.dashed {\n    component \"Marketplace\" as marketplace #LightBlue\n    component \"Wallet\" as wallet #LightBlue\n    component \"Ledger\" as ledger #LawnGreen\n    component \"Account\" as account #LightBlue\n    component \"BackOffice\" as backoffice #LightSalmon\n}\n\nbackoffice --> marketplace: Internal API\nbackoffice --> wallet: Internal API\nbackoffice --> ledger: Internal API\nbackoffice --> account: Internal API\n\nu -up-> wallet: Public API\nu -up-> marketplace: Public API\nu -up-> account: Public API\n\nwallet -> ledger: Internal API\nmarketplace --> wallet: Internal API\n\nadmin --> backoffice: Public API\n\n@enduml",
  "code": "@startuml\n:User: as u\n:Admin: as a\n\nrectangle \"LCT Services\" as ltcservices #line.dashed {\n    component \"Marketplace\" as marketplace #LightBlue\n    component \"Wallet\" as wallet #LightBlue\n    component \"Ledger\" as ledger #LawnGreen\n    component \"Account\" as account #LightBlue\n    component \"BackOffice\" as backoffice #LightSalmon\n}\n\nbackoffice --> marketplace: Internal API\nbackoffice --> wallet: Internal API\nbackoffice --> ledger: Internal API\nbackoffice --> account: Internal API\n\nu -up-> wallet: Public API\nu -up-> marketplace: Public API\nu -up-> account: Public API\n\nwallet -> ledger: Internal API\nmarketplace --> wallet: Internal API\n\nadmin --> backoffice: Public API\n\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "diagramme UML",
    "composants",
    "api interne",
    "api publique"
  ],
  "description": "Ce diagramme représente un système composé de différents composants (Marketplace, Wallet, Ledger, etc.) qui communiquent entre eux via des APIs internes et publiques.",
  "source": "https://github.com/plantuml/plantuml"
}

,
{
  "prompt": "Analyser le code UML donné",
  "code": "@startuml\nclass JobGiver_WanderColony {\n    + JobGiver_WanderColony()\n}\nJobGiver_Wander <-- JobGiver_WanderColony\n@enduml",
  "langage": "UML (PlantUML)",
  "type": "class",
  "tags": ["diagramme UML", "classe", "héritage"],
  "description": "Le diagramme représente la classe JobGiver_WanderColony qui hérite de JobGiver_Wander.",
  "source": "Code donné dans la question"
}
,
{
  "prompt": "",
  "code": "@startuml\n... (le reste du code PlantUML)\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "diagramme de classes",
    "uml",
    "plantuml"
  ],
  "description": "Ce diagramme représente les classes et leurs relations dans le jeu de société.",
  "source": ""
}
,

{
  "prompt": "@startuml process-view\nautonumber\nskinparam DefaultTextAlignment<<center>> center\n...\n@enduml",
  "code": "@startuml process-view\nautonumber\nskinparam DefaultTextAlignment<<center>> center\nactor CM as \"Campus Manager\"\nbox \"\\u00abcontainer (C4)\\u00bb\\nVisualization\" <<center>>\nparticipant C as \"UI Component\" <<component>>\nparticipant M as \"Module\" <<component>>\nparticipant SVC as \"Service\" <<component>>\nparticipant H as \"HTTP\" <<component>>\nend box\nbox \"\\u00abcontainer (C4)\\u00bb\\n MD Management \" <<center>>#LightYellow\nparticipant ROUTE as \"Route\" <<component>>\nend box\nactivate CM\nCM -> C : wants to create a new robot to the fleet\nactivate C\nCM <-- C : asks for the code, nickname, model code, serial number & description\ndeactivate C\nCM -> C : inserts the data\nactivate C\nC -> M : createDevice\nactivate M\nM -> M : validates data\nactivate M\ndeactivate M\nM -> SVC : createDevice(data)\nactivate SVC\nSVC -> H : post(url,data)\nactivate H\nH -> ROUTE : POST /devices {data}\nactivate ROUTE\nalt a new robot is created\n  H <-- ROUTE : 201 Created\ndeactivate ROUTE\n  SVC <-- H : the new robot\ndeactivate H\n  M <-- SVC : the new robot\ndeactivate SVC\n  C <-- M : success message\ndeactivate M\n  CM <-- C : informs the success of the operation\nelse there is a robot with the specified data\n  activate H\n  activate M\n  activate SVC\n  activate ROUTE\n  H <-- ROUTE : 400 Bad Request\ndeactivate ROUTE\n  SVC <-- H : error\ndeactivate H\n  M <-- SVC : error\ndeactivate SVC\n  C <-- M : error\ndeactivate M\n  CM <-- C : shows error message \"A device with the specified data already exists.\"\ndeactivate C\ndeactivate CM\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "sequence",
    "C4",
    "container",
    "visualization",
    "MD Management"
  ],
  "description": "Ce diagramme décrit le flux de création d'un nouveau robot dans une flotte. Il montre les interactions entre le Campus Manager, les composants UI, Module, Service et HTTP.",
  "source": "PlantUML"
}

,
{
  "prompt": "sequenceDiagram.puml",
  "code": "@startuml sequenceDiagram.puml\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "diagramme UML", "scénario"],
  "description": "Ce diagramme décrit la séquence d'événements liés à l'ajout d'un nouveau film dans une bibliothèque de films. L'utilisateur clique sur le bouton \"Ajouter un film\" puis entre les détails du film et valide l'entrée.",
  "source": "https://plantuml.com/"
}
,
{
  "prompt": "",
  "code": "@startuml\n\nparticipant \"Feature User\" as actor\nparticipant \"«component» :Lower Level Component 1\" as sc1\nparticipant \"«component» :Lower Level Component 3\" as sc3\n\nactor -> sc1: real operation 3 ()\nsc1 -> sc3: real operation 9 ()\n\nalt success\n    sc3 --> sc1: success\nelse error\n    sc3 --> sc1: error type\nend\n\nalt success\n    sc1 --> actor: true\nelse error\n    sc1 -> actor: error type\nend\n\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "uml",
    "sequence",
    "plantuml"
  ],
  "description": "Diagramme de séquence décrivant une interaction entre des composants et un utilisateur.",
  "source": ""
}
,
{
  "prompt": "@startuml\nleft to right direction\nactor \"Usuario/Administrador\" as admin #FFD700\r\n...\n@enduml",
  "code": "@startuml\nleft to right direction\nactor \"Usuario/Administrador\" as admin #FFD700\r\nrectangle \"Sistema de Gestión de Fútbol\" {\r\n  ...\r\n}\rnote right of admin\r\n  **Acciones clave del usuario:**\r\n  - Menú interactivo (CLI)\r\n  - Operaciones CRUD\r\n  - Simulaciones deportivas\r\n  - Gestión financiera (sueldos)\rend note\n@enduml",
  "langage": "PlantUML",
  "type": "usecase",
  "tags": [
    "système de gestion de football",
    "utilisateur/administrateur",
    "actions clés",
    "menu interactif CLI",
    "opérations CRUD",
    "simulaciones déportives",
    "gestion financière"
  ],
  "description": "Ce diagramme UML décrit le système de gestion de football et les actions clés que peut effectuer l'utilisateur/administrateur. Le système permet la gestion d'équipes, de joueurs, d'entraîneurs, ainsi que l'organisation de ligues et des entraînements.",
  "source": "PlantUML"
}
,
{
  "prompt": "Rental Car Admin Booking (GET)",
  "code": "@startuml Rental Car Admin Booking (GET)\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "sequence", 
    "diagramme UML", 
    "Rental Car Admin Booking", 
    "GET"
  ],
  "description": "Ce diagramme UML décrit la séquence de traitement d'une demande GET pour les réservations de voitures. Il montre l'interaction entre le client, le serveur, le routeur des réservations et le modèle de données des réservations.",
  "source": "https://www.plantuml.com/"
}
,
{
  "prompt": "@startuml\n'https://plantuml.com/class-diagram\ninterface Game{\n}\nclass GuessEfficiencyGame implements Game\nclass GuessDefenseGame implements Game\nclass GuessOffenseGame implements Game\nclass Type {\nTypeEnum type\nHashMap<TypeEnum, HashMap<String,Float>> Efficiency\n--\npublic getEfficiency(TypeEnum typeAtq, TypeEnum typeDef) : Float\npublic getEfficiency(TypeEnum typeAtq, TypeEnum typeDef1, TypeEnum typeDef2) : Float\npublic getEfficientAttack(TypeEnum otherType) : Float\npublic getEfficientDefense() : TypeEnum\npublic getEfficientAttack() : TypeEnum\n}\nenum TypeEnum {\n    STEEL,\n    FIGHTING,\n    DRAGON,\n    WATER,\n    ELECTRIC,\n    FAIRY,\n    FIRE,\n    ICE,\n    BUG,\n    NORMAL,\n    GRASS,\n    POISON,\n    PSYCHIC,\n    ROCK,\n    GROUND,\n    GHOST,\n    DARK,\n    FLYING\n}\nTypeEnum->Type\n@enduml",
  "code": "@startuml\n'https://plantuml.com/class-diagram\ninterface Game{\n}\nclass GuessEfficiencyGame implements Game\nclass GuessDefenseGame implements Game\nclass GuessOffenseGame implements Game\nclass Type {\nTypeEnum type\nHashMap<TypeEnum, HashMap<String,Float>> Efficiency\n--\npublic getEfficiency(TypeEnum typeAtq, TypeEnum typeDef) : Float\npublic getEfficiency(TypeEnum typeAtq, TypeEnum typeDef1, TypeEnum typeDef2) : Float\npublic getEfficientAttack(TypeEnum otherType) : Float\npublic getEfficientDefense() : TypeEnum\npublic getEfficientAttack() : TypeEnum\n}\nenum TypeEnum {\n    STEEL,\n    FIGHTING,\n    DRAGON,\n    WATER,\n    ELECTRIC,\n    FAIRY,\n    FIRE,\n    ICE,\n    BUG,\n    NORMAL,\n    GRASS,\n    POISON,\n    PSYCHIC,\n    ROCK,\n    GROUND,\n    GHOST,\n    DARK,\n    FLYING\n}\nTypeEnum->Type\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "Game",
    "GuessEfficiencyGame",
    "GuessDefenseGame",
    "GuessOffenseGame",
    "Type",
    "TypeEnum"
  ],
  "description": "Diagramme de classes représentant une hiérarchie d'interfaces et de classes avec des méthodes et des champs.",
  "source": "https://plantuml.com/class-diagram"
}
,
{
  "prompt": "@startuml",
  "code": "@startuml\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["backend", "api", "doctype", "recovery", "user-role"],
  "description": "Diagramme de séquence montrant l'interaction entre les composants du backend lors d'une opération de récupération d'un type de document.",
  "source": "@startuml"
}
,
{
  "prompt": "@startuml\n... (code plantuml) \n@enduml",
  "code": "@startuml\nacteur \"Admin Général\"\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["Administration", "Validation", "Promotion", "Client", "Système"],
  "description": [
    "Ce diagramme UML décrit les interactions entre différents acteurs et systèmes dans un contexte de gestion de promotions.",
    "Il illustre les étapes d'approbation et d'application de promotions aux produits en stock."
  ],
  "source": "https://github.com/plantuml-stdlib/diagrams"
}
,
{
  "prompt": "@startuml\nclass NotificationBackgroundService {\n    - <<readonly>> _serviceProvider : IServiceProvider\n    + NotificationBackgroundService(serviceProvider:IServiceProvider)\n    # <<override>> <<async>> ExecuteAsync(stoppingToken:CancellationToken) : Task\n}\nBackgroundService <|-- NotificationBackgroundService\n@enduml",
  "code": "@startuml\nclass NotificationBackgroundService {\n    - <<readonly>> _serviceProvider : IServiceProvider\n    + NotificationBackgroundService(serviceProvider:IServiceProvider)\n    # <<override>> <<async>> ExecuteAsync(stoppingToken:CancellationToken) : Task\n}\nBackgroundService <|-- NotificationBackgroundService\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["NotificationBackgroundService", "BackgroundService", "IServiceProvider"],
  "description": "Diagramme de classe montrant l'héritage de NotificationBackgroundService à partir de BackgroundService.",
  "source": "https://github.com/plantuml/plantuml/"
}
,
{
  "prompt": "@startuml\nclass QuestNode_Multiply {\n}\nclass \"SlateRef`1\"<T> {\n}\nQuestNode <|-- QuestNode_Multiply\nQuestNode_Multiply --> \"value1<double>\" \"SlateRef`1\"\nQuestNode_Multiply --> \"value2<double>\" \"SlateRef`1\"\nQuestNode_Multiply --> \"storeAs<string>\" \"SlateRef`1\"\n@enduml",
  "code": "@startuml\nclass QuestNode_Multiply {\n}\nclass \"SlateRef`1\"<T> {\n}\nQuestNode <|-- QuestNode_Multiply\nQuestNode_Multiply --> \"value1<double>\" \"SlateRef`1\"\nQuestNode_Multiply --> \"value2<double>\" \"SlateRef`1\"\nQuestNode_Multiply --> \"storeAs<string>\" \"SlateRef`1\"\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["class", "diagramme UML"],
  "description": "Diagramme de classe définissant les relations entre les classes QuestNode et QuestNode_Multiply.",
  "source": "@startuml"
}
,
{
  "prompt": "@startuml\n\nstart\n   : Admin Provides update Auto Method;\n   : update info for Auto AutoNo/Brand/Color/ModelYear/Description;\nif (AutoNo Already present) then (yes)\n    :Error Message(Auto already present);\n    end;\nelse (No)\n    :update Auto in list;\n    end;\nendif\n@enduml\ndependencies\nAdmin --> CarRentalApp : Update Car\nCarRentalApp--> AdminController : updateCar(@PathVariable Long id)\nAdminController --> AdminService : updateCar(Long id, CarDto carDto)\nAdminService --> CarRepository : findById(id)\nalt car present\nAdminService <-- CarRepository : gets Existing car info\nAdminService --> AdminService : set new info in existing car\nAdminService --> CarRepository : CarRepository.save(existingCar)\nelse car not present with given id\nAdminService <-- CarRepository : return false\nAdminController <-- AdminService : return false\nAdmin <-- AdminController : Error Message Not found\n@enduml",
  "code": "@startuml\\n\\nstart\\n   : Admin Provides update Auto Method;\\n   : update info for Auto AutoNo/Brand/Color/ModelYear/Description;\\nif (AutoNo Already present) then (yes)\\n    :Error Message(Auto already present);\\n    end;\\nelse (No)\\n    :update Auto in list;\\n    end;\\nendif\\n@enduml\\ndependencies\\nAdmin --> CarRentalApp : Update Car\\nCarRentalApp--> AdminController : updateCar(@PathVariable Long id)\\nAdminController --> AdminService : updateCar(Long id, CarDto carDto)\\nAdminService --> CarRepository : findById(id)\\nalt car present\\nAdminService <-- CarRepository : gets Existing car info\\nAdminService --> AdminService : set new info in existing car\\nAdminService --> CarRepository : CarRepository.save(existingCar)\\nelse car not present with given id\\nAdminService <-- CarRepository : return false\\nAdminController <-- AdminService : return false\\nAdmin <-- AdminController : Error Message Not found\\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "UML", "diagramme"],
  "description": "Deux diagrammes UML de séquence décrivant une opération d'actualisation d'une voiture dans une application.",
  "source": "@startuml... "
}
,
{
  "prompt": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\ntitle Архитектура ИС",
  "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\ntitle Архитектура ИС\n' Системы\nSystem_Boundary(1C_SSL, \"Головной офис - 1C БСП ред. 3.1\") {\n    Container(Gift_Cert, \"Модуль 'Учет подарочных сертификатов'\", \"\")\n}\nSystem(Messaging_Broker, \"Брокер обмена сообщениями Kafka\")\n... (le reste du code)\n@enduml",
  "langage": "plantuml",
  "type": "C4-Diagramme",
  "tags": [
    "architectural-diagram",
    "c4-plantuml",
    "system-design"
  ],
  "description": "Ce diagramme représente l'architecture de la solution, comprenant les systèmes et les conteneurs. Les relations entre les différents composants sont également définies.",
  "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4.puml"
}

,
{
  "prompt": "",
  "code": "@startuml\nautonumber\nactor \"User\" as MG\n\nactivate MG\nMG -> \":System\" : selects option \"View Board History\"\nactivate \":System\"\n\":System\"--> MG : displays the list of  boards and ask for the board to view\ndeactivate \":System\"\nMG -> \":System\"\": types the information\nactivate \":System\"\n\":System\"--> MG : displays the history and confirms operation success\ndeactivate \":System\"\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["diagramme UML", "séquence"],
  "description": "Ce diagramme décrit l'interaction entre un utilisateur (MG) et un système. L'utilisateur sélectionne une option, le système affiche les résultats et confirme la réussite de l'opération.",
  "source": ""
}
,{
  "prompt": "@startuml\n'https://plantuml.com/class-diagram\nclass CommandBase\nAbstract class SubSystemBase\nBallTriggerComponents -|> BallTriggerComponentsBase\nBallTrigger *-- BallTriggerComponentsBase\nMoveBallTriggerBySpeed -|> CommandBase\nSubSystemBase <|- BallTrigger\nMoveBallTriggerBySpeed o-- BallTrigger\ninterface BallTriggerComponents{\n  WPI_TalonSRX getMotor()\n  Rev2mDistanceSensor getDistanceSensorUp()\n  ColorSensorV3 getColorSensor()\n}\nclass BallTriggerComponentsBase{\nWPI_TalonSRX motor;\nRev2mDistanceSensor distanceSensor;\nColorSensorV3 colorSensor;\n\nWPI_TalonSRX getMotor()\nRev2mDistanceSensor getDistanceSensorUp()\nColorSensorV3 getColorSensor()\n}\nclass BallTrigger{\nvoid periodic()\nvoid moveTriggerBySpeed()\nboolean isBallInPlace()\nboolean isBallIdentified()\nvoid stop()\n}\nclass MoveBallTriggerBySpeed{\nBallTrigger ballTrigger;\nDoubleSupplier speedSupplier;\n\nvoid execute()\nvoid end()\n}\n@enduml",
  "code": "@startuml\n'https://plantuml.com/class-diagram\nclass CommandBase\nAbstract class SubSystemBase\nBallTriggerComponents -|> BallTriggerComponentsBase\nBallTrigger *-- BallTriggerComponentsBase\nMoveBallTriggerBySpeed -|> CommandBase\nSubSystemBase <|- BallTrigger\nMoveBallTriggerBySpeed o-- BallTrigger\ninterface BallTriggerComponents{\n  WPI_TalonSRX getMotor()\n  Rev2mDistanceSensor getDistanceSensorUp()\n  ColorSensorV3 getColorSensor()\n}\nclass BallTriggerComponentsBase{\nWPI_TalonSRX motor;\nRev2mDistanceSensor distanceSensor;\nColorSensorV3 colorSensor;\n\nWPI_TalonSRX getMotor()\nRev2mDistanceSensor getDistanceSensorUp()\nColorSensorV3 getColorSensor()\n}\nclass BallTrigger{\nvoid periodic()\nvoid moveTriggerBySpeed()\nboolean isBallInPlace()\nboolean isBallIdentified()\nvoid stop()\n}\nclass MoveBallTriggerBySpeed{\nBallTrigger ballTrigger;\nDoubleSupplier speedSupplier;\n\nvoid execute()\nvoid end()\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class-diagram",
  "tags": [
    "uml", 
    "plantuml", 
    "diagramme de classe"
  ],
  "description": "Ce diagramme décrit les relations entre les classes CommandBase, SubSystemBase, BallTriggerComponents et MoveBallTriggerBySpeed.",
  "source": "@startuml\n'https://plantuml.com/class-diagram\nclass CommandBase\nAbstract class SubSystemBase\nBallTriggerComponents -|> BallTriggerComponentsBase\nBallTrigger *-- BallTriggerComponentsBase\nMoveBallTriggerBySpeed -|> CommandBase\nSubSystemBase <|- BallTrigger\nMoveBallTriggerBySpeed o-- BallTrigger\ninterface BallTriggerComponents{\n  WPI_TalonSRX getMotor()\n  Rev2mDistanceSensor getDistanceSensorUp()\n  ColorSensorV3 getColorSensor()\n}\nclass BallTriggerComponentsBase{\nWPI_TalonSRX motor;\nRev2mDistanceSensor distanceSensor;\nColorSensorV3 colorSensor;\n\nWPI_TalonSRX getMotor()\nRev2mDistanceSensor getDistanceSensorUp()\nColorSensorV3 getColorSensor()\n}\nclass BallTrigger{\nvoid periodic()\nvoid moveTriggerBySpeed()\nboolean isBallInPlace()\nboolean isBallIdentified()\nvoid stop()\n}\nclass MoveBallTriggerBySpeed{\nBallTrigger ballTrigger;\nDoubleSupplier speedSupplier;\n\nvoid execute()\nvoid end()\n}\n@enduml"
}
,{
  "prompt": "Créer un diagramme UML pour Internet TV",
  "code": "@startuml INTERNET_TV\n... (le reste du code)",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme", "umldiagramme", "internettv"],
  "description": "Ce diagramme représente les entités et leurs relations pour une application d'internet TV. Il montre les entités épisodes, chaînes, slots de temps, programmes et genres.",
  "source": "https://plantuml.com/"
},
{
    "prompt": "@startuml\n!include ..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\....\\\\.c4s\\\\C4_Container.puml\n... (le reste du code)\n@enduml",
    "code": "@startuml\n!include ..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\....\\\\.c4s\\\\C4_Container.puml\nAddElementTag(\"c4interflow:lifecycle:new\", \\$bgColor=green, \\$fontColor=#ffffff, \\$borderColor=green, \\$shadowing=\"False\")\n... (le reste du code)\n@enduml",
    "langage": "PlantUML",
    "type": "component",
    "tags": ["C4", "Container", "ECommercePlatform", "Deliver", "FraudManagement", "FraudService"],
    "description": "Diagrame UML représentant le niveau de conteneur d'une plateforme e-commerce, avec les composants Fraud Service et Database.",
    "source": "https://github.com/plantuml/plantuml/wiki/User-Manual#componentDiagram"
  },
  {
    "prompt": "Sequence Diagram for Borrowing Process",
    "code": "@startuml\nparticipant 界面\nparticipant AdminManageBookController\nparticipant BorrowHandler\nparticipant BorrowService\nparticipant BookService\n\n界面 -> AdminManageBookController :request\nactivate 界面\nactivate AdminManageBookController\nAdminManageBookController -> AdminManageBookController :基本参数校验\nAdminManageBookController -> AdminManageBookController :包装领域模型\n\nAdminManageBookController -> BorrowHandler : 借阅\nactivate BorrowHandler\nBorrowHandler -> BookService :根据bookId查询bookDO\nactivate BookService\nBookService -> BorrowHandler :返回bookDO\nalt bookDO\nelse bookDO is null\nBorrowHandler ->x BorrowHandler :抛出异常\nend\n\nalt status\nelse status is DELETE\nBorrowHandler ->x BorrowHandler :抛出异常\nend\n\nalt status\nelse status is NO_BORROW\nBorrowHandler ->x BorrowHandler :抛出异常\nend\n\nalt borrowFlag\nelse borrowFlag is YES\nBorrowHandler ->x BorrowHandler :抛出异常\nend\n\nBorrowHandler -> BookService :根据bookId来CAS更新图书借阅标志为YES\nBookService -> BorrowHandler :返回j\ndeactivate BookService\nalt j\nelse j !=1\nBorrowHandler ->x BorrowHandler :抛出异常\nend\n\nBorrowHandler -> BorrowService :插入借阅信息\nactivate BorrowService\nBorrowService -> BorrowHandler :返回i\ndeactivate BorrowService\n\nalt i\nelse i!=1\nBorrowHandler -> BorrowHandler :抛出异常\nend\n\nBorrowHandler -> AdminManageBookController :返回true\ndeactivate BorrowHandler\nAdminManageBookController -> 界面 :返回true\ndeactivate 界面\n@enduml",
    "langage": "PlantUML",
    "type": "sequence",
    "tags": [
      "Sequence Diagram",
      "Borrowing Process",
      "Java"
    ],
    "description": "Diagramme de séquence représentant le processus de prêt d'un livre.",
    "source": "https://github.com/plantuml/plantuml-samples/blob/master/src/main/resources/sequence/borrow_process.pu"
  }
,{
  "prompt": "",
  "code": "@startuml\nskinparam monochrome true\nskinparam packageStyle rectangle\nskinparam shadowing false\n\nskinparam classAttributeIconSize 0\n\nhide circle\nhide methods\n\ntitle Domain Model US7\n\nclass UnregisteredUser\n\nclass Person{\n    name\n    cardNumber\n    taxNumber\n    emailAddress\n    phoneNumber\n}\n\nclass Property\n\nclass Client {\n    password\n}\n\nclass Address{\n    street\n    cityName\n    districtName\n    stateAcronym\n    zipCode\n}\nUnregisteredUser \"1\" -- \"1\" Client: registered as >\nClient \"1\" -- \"1..*\" Property: buys/rents/sells >\nAddress \"1\" -- \"1\" Person : located at <\nClient --|> Person\n@enduml",
  "langage": "",
  "type": "class",
  "tags": [
    "DomainModel",
    "US7"
  ],
  "description": "Modèle de domaine représentant les entités du système, avec leurs relations.",
  "source": ""
}
,{
  "prompt": "class diagramme UML",
  "code": "@startuml\nclass EditReviewRequestModel {\n    + ReviewId : int <<get>> <<set>>\n    + Content : string <<get>> <<set>>\n    + Rating : byte <<get>> <<set>>\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme", "UML", "classe", "modèle"],
  "description": "Définition d'une classe UML pour la gestion de requêtes de revues",
  "source": "Code PlantUML"
}
,{
  "prompt": "@startuml\n!pragma teoz true\n'Issue #1494\ntitle My Diagram\nskinparam style strictuml\n... restant du code ...\n@enduml",
  "code": {
    "language": "plantuml",
    "body": [
      "Actor Mallory as m",
      "Actor Bob as b",
      "Actor Alice as a",
      "activate b",
      "b ->> a --++ : Hi Alice!",
      "a ->> b --++ : Bye Bob!",
      "b ->> a ++ : Bye Alice!",
      "& b ->> m --++ : Bye Alice!",
      "deactivate a",
      "deactivate m"
    ]
  },
  "langage": "plantuml",
  "type": "sequence",
  "tags": ["actor", "interaction", "UML"],
  "description": "Ce diagramme UML décrit une séquence d'événements entre différents acteurs.",
  "source": "https://github.com/plantuml/plantuml/pull/1790"
}
,{
  "prompt": "@startuml\ncard c\nport t\n@enduml",
  "code": "{\"sha1\": \"ll3x80dqzr92wnuulrhzc5vaiouq9qa\", \"insertion\": {\"when\": \"2024-06-03T18:59:34.257Z\", \"url\": \"https://forum.plantuml.net/16071/deployment-could-you-improve-port-management\", \"user\": \"plantuml@gmail.com\"}}",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["component", "port"],
  "description": "Diagramme montrant un card avec une port",
  "source": "https://forum.plantuml.net/16071/deployment-could-you-improve-port-management"
}
,{
  "prompt": "",
  "code": "@startuml\n'!preprocessorV2\n!define SHOW_TYPE(x) my-x\nclass ArrayList\n!ifdef SHOW_TYPE\nArrayList : SHOW_TYPE(my_type) size()\n!else\nArrayList : SHOW_TYPE not set size()\n!endif\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["ArrayList", "PlantUML"],
  "description": "Diagramme de classe décrivant les propriétés d'une liste en utilisant la définition conditionnelle SHOW_TYPE.",
  "source": "https://example.com/plantuml"
}
,{
  "prompt": "",
  "code": "@startuml...@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "sequence",
    "plantuml",
    "uml"
  ],
  "description": "Diagramme de séquence représentant une activité avec des branches conditionnelles.",
  "source": "https://example.com/uml-diagramme"
}
,{
  "prompt": "@startuml\nskinparam monochrome true\nskinparam packageStyle rectangle\nskinparam shadowing false\ntitle System Sequence Diagram (Level 3 - Process View) - US 1050\nautonumber...\n@enduml",
  "code": "@startuml\n... (toute la définition du diagramme UML)\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["UML", "diagramme de séquence", "système d'information"],
  "description": "Ce diagramme UML illustre le flux des opérations pour la création d'un bâtiment, impliquant les acteurs Campus Manager et View, ainsi que différents composants du système.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n...\n@enduml",
  "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\nSetDefaultLegendEntries(\"\")\nSHOW_LEGEND()\nPerson(user, \"Benutzer\", \"\")\nSystem_Boundary(bytebunker, \"ByteBunker System\") {\n  Container(frontend, \"Frontend\", \"TypeScript, Svelte\", \"UI zum Erkunden, Suchen und Visualisieren.\")\n  ...",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["C4", "Container", "System_Boundary", "Person"],
  "description": "Diagrame de composants du système ByteBunker System, comprenant les composants frontend, backend, postgres, neo4j et keydb.",
  "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
}
,{
  "prompt": "@startuml\nclass WidgetButton {\n    + Text : string <<get>> <<set>> = \"Button\"\n    + Font : SpriteFont <<get>> <<set>>\n    + IdleStyle : Style <<get>> <<set>>\n    + OverStyle : Style <<get>> <<set>>\n    + DownStyle : Style <<get>> <<set>>\n    + WidgetButton()\n    + WidgetButton(text:string)\n    + \"\"\" override \"\"\" Draw(spriteBatch:SpriteBatch, gameTime:GameTime) : void\n}\nWidget <|-- WidgetButton\n@enduml",
  "code": "@startuml\nclass WidgetButton {\n    + Text : string <<get>> <<set>> = \"Button\"\n    + Font : SpriteFont <<get>> <<set>>\n    + IdleStyle : Style <<get>> <<set>>\n    + OverStyle : Style <<get>> <<set>>\n    + DownStyle : Style <<get>> <<set>>\n    + WidgetButton()\n    + WidgetButton(text:string)\n    + \"\"\" override \"\"\" Draw(spriteBatch:SpriteBatch, gameTime:GameTime) : void\n}\nWidget <|-- WidgetButton\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["UML", "diagramme de classe"],
  "description": "Le diagramme décrit une classe WidgetButton avec ses attributs et méthodes. La classe WidgetButton étend la classe Widget.",
  "source": "http://www.plantuml.com/"
}
,{
  "prompt": "",
  "code": "@startuml\nsprite $frontapp [51x73/16] {\n...}\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "diagramme", 
    "UML", 
    "composant"
  ],
  "description": "Ce diagramme UML représente une composante graphique avec des informations de taille et de couleur.",
  "source": ""
}
,{
  "prompt": "",
  "code": "@startuml\n... (le code entier)\n@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": ["UML", "diagramme de classes"],
  "description": "Ce diagramme UML montre les relations entre les différentes classes du système, notamment EventBooking et EventsController.",
  "source": ""
}
,{
  "prompt": "",
  "code": "@startuml...@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": [
    "enum", "interface", "abstract class", "class"
  ],
  "description": "Diagramme UML représentant une hiérarchie de classes et interfaces pour la gestion des requêtes.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "@startuml\n'https://plantuml.com/sequence-diagram\n!pragma layout smetana\ntitle Smart Home\nautonumber\nparticipant \"\" as HTTP\nbox \"SmartHome \\u003c\\u003cSystem (C4)\\u003e\\u003e\"\n    participant \"Backend\" as BE<<container (C4)>>\nend box\nHTTP o-> BE: GET /devices by room and temperature functionality\nactivate BE\nBE -->o HTTP: JSON 200\n@enduml",
  "code": "@startuml\n'https://plantuml.com/sequence-diagram\n!pragma layout smetana\nautonumber\nparticipant \" \" as HTTP\nbox \"SmartHome <<System (C4)>>\"\n    participant \"Backend\" as BE<<container (C4)>>>>\nend box\nHTTP o-> BE: GET /devices by room and temperature functionality\nactivate BE\nBE -->o HTTP: JSON 200\n@enduml",
  "langage": "plantuml",
  "type": "sequence",
  "tags": ["PlantUML", "sequence-diagram", "SmartHome"],
  "description": "Diagrma de séquence représentant l'appel à une API pour obtenir des informations sur les appareils d'un système Smart Home.",
  "source": "@startuml\n'https://plantuml.com/sequence-diagram\n!pragma layout smetana\ntitle Smart Home\nautonumber\nparticipant \"\" as HTTP\nbox \"SmartHome \\u003c\\u003cSystem (C4)\\u003e\\u003e\"\n    participant \"Backend\" as BE<<container (C4)>>\nend box\nHTTP o-> BE: GET /devices by room and temperature functionality\nactivate BE\nBE -->o HTTP: JSON 200\n@enduml"
}
,{
  "prompt": "@startuml\ndiagram UML en PlantUML\n@enduml",
  "code": "@startuml\nactor User as \"Farmer\"\nparticipant \"VoxMeteo Sahel\\nSystem\" as System\nUser -> System : Start Call\nSystem -> User : Voice Prompt\\n(\"Welcome to VoxMeteo Sahel System, select language\")\nUser -> System : Select Language (1 for English, 2 for French, 3 for local languages)\nSystem -> User : Confirmation of Language Selection\nnote right of System : User navigates to\\nthe Main Menu after\\nlanguage selection\n@enduml",
  "langage": "PlantUML",
  "type": "usecase",
  "tags": ["sequence", "usecase", "actor", "participant"],
  "description": "Ce diagramme décrit les interactions entre un utilisateur et le système VoxMeteo Sahel. Le processus commence par l'appel du système, suivi d'une sélection de langue.",
  "source": "PlantUML"
}
,{
    "prompt": "promotions-coupons-use-case",
    "code": "@startuml promotions-coupons-use-case...@enduml",
    "langage": "PlantUML",
    "type": "usecase",
    "tags": ["promotion", "coupon", "management", "use case"],
    "description": "Ce diagramme UML représente les cas d'utilisation pour la gestion de promotions et de coupons. Il montre les différents rôles (administrateur, client, système) et leurs interactions avec les cas d'utilisation.",
    "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "interface UML",
  "code": "@startuml\n\nclass PropertiesConfigRepository {\n    -{static}String FILE_NAME\n    -Map<String, ConfigItem> configItems\n    +Collection<ConfigItem> getConfigItems()\n    +Optional<ConfigItem> getConfigItem(String name)\n    +boolean isConfigItemPresent(String name)\n    +void setConfigItem(ConfigItem item)\n    -void refreshConfigItems()\n    -void saveConfigItems()\n}\n\ninterface ConfigRepository {\n    +{abstract}Collection<ConfigItem> getConfigItems()\n    +{abstract}Optional<ConfigItem> getConfigItem(String name)\n    +{abstract}boolean isConfigItemPresent(String name)\n    +{abstract}boolean setConfigItem(ConfigItem item)\n}\n\nConfigRepository <|.. PropertiesConfigRepository\n@enduml",
  "langage": "UML",
  "type": "class",
  "tags": ["interface", "config", "repository"],
  "description": "Le diagramme représente les interfaces ConfigRepository et PropertiesConfigRepository. Les classes sont en relation avec un lien de généralisation.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "",
  "code": "@startuml\n... (le code entier)\n@enduml",
  "langage": "PlantUML",
  "type": "usecase",
  "tags": [
    "diagramme d'usages",
    "séquence d'événements",
    "jeu en ligne"
  ],
  "description": "Ce diagramme UML représente une séquence d'étapes pour un jeu en ligne, mettant en avant les interactions entre le serveur et les joueurs.",
  "source": "https://plantuml.com/use-case-diagram"
}
,{
  "prompt": "",
  "code": "@startuml\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "docker-compose",
    "Maxwell's Demon",
    "Vedro",
    "MaxwellVedroPlugin"
  ],
  "description": "Diagramme de séquence représentant l'interaction entre différents composants lors de la mise en place d'un environnement de test.",
  "source": ""
}
,{
  "prompt": "",
  "code": "@startuml...\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "uml",
    "plantuml",
    "diagramme de classes",
    "design pattern"
  ],
  "description": "Diagramme de classes représentant les événements et les abonnés d'un système de publication/abonnement.",
  "source": ""
}
,{
  "prompt": "@startuml\nskinparam monochrome true\n... @enduml",
  "code": "@startuml\nskinparam monochrome true\nskinparam packageStyle rectangle\nskinparam shadowing false\nskinparam linetype ortho\nskinparam classAttributeIconSize 0\nhide circle\nhide methods\ntitle US007 - Domain Model\nclass UnregisteredUser {\n}\nclass RegisteredUser {\n    - name\n    - email\n    - password\n}\nclass Client {\n}\nclass Owner {\n}\nclass System {\n}\nnote left of RegisteredUser\nNew user should have access to the owner and client funcionalities\nend note\nUnregisteredUser \"1\" -- \"1\" RegisteredUser : > turns into\nRegisteredUser \"1\" -- \"1\" Client : > can be\nRegisteredUser \"1\" -- \"1\" Owner : > can be\nUnregisteredUser \"1\" -- \"1\" System : > registers in\nRegisteredUser \"1\" -- \"1\" System : > registered in\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "domainModel",
    "useCase",
    "registeredUser",
    "unregisteredUser",
    "client",
    "owner",
    "system"
  ],
  "description": "Ce diagramme UML représente le modèle de domaine d'une application. Il décrit les classes et leurs relations pour gérer les utilisateurs, les clients, les propriétaires et le système.",
  "source": "@startuml\n..."
}
,{
  "prompt": "@startuml title Connection Diagram (CandidateApp)_US3001 actor Candidate as actor box \"CandidateApp\" #LightGreen participant \":CandidateApp\" as app end box box Core #lightblue participant \":CommunicationController\" as com <<application>> participant \":CommunicationService\" as service <<service>> participant \":Messenger\" as messenger participant \":Translator\" as translator end box participant \"FollowUpServer\" as server #orange deactivate actor actor -> app : Asks to set the communication deactivate app app -> com : initializeCommunication(socket) deactivate com com -> service : initializeCommunication(socket) deactivate service app -> com : testConnection() deactivate com com -> service : testConnection() deactivate service service -> translator: encode(1, MessageCode.COMMTEST, null, null) deactivate translator translator --> service : byte[] message deactivate server service -> messenger: sendMessage(message) deactivate messenger messenger -> server deactivate server service -> messenger: receiveMessage() deactivate messenger messenger --> service: byte[] receiveMessage deactivate translator service -> translator: decodeCode(response) deactivate translator service --> com: MessageCode deactivate com com --> app: MessageCode deactivate com alt MessageCode.ACK app --> actor: Connection established else MessageCode.ERR app --> actor: Connection refused end @enduml",
  "code": "@startuml title Connection Diagram (CandidateApp)_US3001 actor Candidate as actor box \"CandidateApp\" #LightGreen participant \":CandidateApp\" as app end box box Core #lightblue participant \":CommunicationController\" as com <<application>> participant \":CommunicationService\" as service <<service>> participant \":Messenger\" as messenger participant \":Translator\" as translator end box participant \"FollowUpServer\" as server #orange deactivate actor actor -> app : Asks to set the communication deactivate app app -> com : initializeCommunication(socket) deactivate com com -> service : initializeCommunication(socket) deactivate service app -> com : testConnection() deactivate com com -> service : testConnection() deactivate service service -> translator: encode(1, MessageCode.COMMTEST, null, null) deactivate translator translator --> service : byte[] message deactivate server service -> messenger: sendMessage(message) deactivate messenger messenger -> server deactivate server service -> messenger: receiveMessage() deactivate messenger messenger --> service: byte[] receiveMessage deactivate translator service -> translator: decodeCode(response) deactivate translator service --> com: MessageCode deactivate com com --> app: MessageCode deactivate com alt MessageCode.ACK app --> actor: Connection established else MessageCode.ERR app --> actor: Connection refused end @enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "sequence",
    "communication",
    "connection",
    "CandidateApp",
    "FollowUpServer"
  ],
  "description": "Diagramme de séquence montrant la communication entre le CandidateApp et le FollowUpServer.",
  "source": "https://github.com/plantuml-stdlib/CandidateApp/blob/master/sequence.uml"
}

,{
  "prompt": "",
  "code": "@startuml\nclass X86 <<unsafe>> <<static>> <<partial>> {\n}\nclass Bmi1 <<static>> {\n    + {static} IsBmi1Supported : bool <<get>>\n    + {static} andn_u32(a:uint, b:uint) : uint\n    + {static} andn_u64(a:ulong, b:ulong) : ulong\n    + {static} bextr_u32(a:uint, start:uint, len:uint) : uint\n    + {static} bextr_u64(a:ulong, start:uint, len:uint) : ulong\n    + {static} bextr2_u32(a:uint, control:uint) : uint\n    + {static} bextr2_u64(a:ulong, control:ulong) : ulong\n    + {static} blsi_u32(a:uint) : uint\n    + {static} blsi_u64(a:ulong) : ulong\n    + {static} blsmsk_u32(a:uint) : uint\n    + {static} blsmsk_u64(a:ulong) : ulong\n    + {static} blsr_u32(a:uint) : uint\n    + {static} blsr_u64(a:ulong) : ulong\n    + {static} tzcnt_u32(a:uint) : uint\n    + {static} tzcnt_u64(a:ulong) : ulong\n}\nX86 +-- Bmi1\n@enduml",
  "langage": "",
  "type": "class",
  "tags": [
    "UML",
    "plantuml",
    "diagramme de classe"
  ],
  "description": "Ce diagramme UML décrit une relation entre deux classes : X86 et Bmi1.",
  "source": ""
}
,{
  "prompt": "",
  "code": "@startuml\n\n    class OptionPhysicalSettlement [[OptionPhysicalSettlement.html]] {\n        +getClearedPhysicalSettlement(): Boolean\n        +getPredeterminedClearingOrganizationPartyReference(): String\n        +toBuilder(): OptionPhysicalSettlement.OptionPhysicalSettlementBuilder\n        {static} +builder(): OptionPhysicalSettlement.OptionPhysicalSettlementBuilder\n        #rosettaKeyValueHashCode(): int\n    }\n\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "PlantUML",
    "diagramme UML",
    "classe"
  ],
  "description": "Diagramme de classe représentant l'option de règlement physique.",
  "source": ""
}
,{
  "prompt": "",
  "code": "@startuml\nallow_mixing\nleft to right direction\npackage \"7\"{\nclass workController\nclass TravelServiceRequestInterfaceImpl\ninterface TravelServiceRequestInterface\n}\npackage \"6\"{\nclass TravelService\nclass TravelServiceHandleRequest\n}\n\"7\" ..> \"6\":HTTP:findTotalTravelAllowance\n@enduml",
  "langage": "plantuml",
  "type": "sequence",
  "tags": [
    "UML",
    "Sequence",
    "PlantUml",
    "Class",
    "Interface"
  ],
  "description": "Ce diagramme UML représente une séquence de traitement d'une requête. Il montre les classes et interfaces impliquées dans le processus, ainsi que la direction des flux de données.",
  "source": ""
}
,{
  "prompt": "",
  "code": "@startuml\n' hide the spot\nhide circle\ntitle\nDB設計\n（カラム名の前の「#（菱形）」はFKです）\n（カラム名の前の「*（黒丸）」は必須項目です）\n（全テーブルにcreated_atとupdated_atカラムが付きます）\nendtitle\n\nentity \"m_users : ユーザーテーブル\" as m_users {\n  *user_id\n  --\n  *family_name : 氏\n  *first_name : 名\n  *email : メールアドレス\n}\nentity \"t_directories : ディレクトリテーブル\" as t_directories {\n  *directory_id\n  --\n  #parent_directory_id\n  #create_user_id\n  #update_user_id\n  *name\n  *is_deleted\n}\nentity \"t_documents : ドキュメントテーブル\" as t_documents {\n  *document_id\n  --\n  #directory_id\n  #create_user_id\n  #update_user_id\n  *name\n  *content\n  *is_deleted\n}\n\nm_users ||---o{ t_directories : m_users : t_directories.create_user_id\\n = 1 : 0以上、\\nm_users : t_directories.update_user_id\\n = 1 : 0以上\nm_users ||--o{ t_documents : m_users : t_documents.create_user_id\\n = 1 : 0以上、\\nm_users : t_documents.update_user_id\\n = 1 : 0以上\nt_directories ||---|{ t_documents\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "UML",
    "plantuml",
    "diagramme de classe",
    "entity",
    "association"
  ],
  "description": "Ce diagramme UML représente les entités de bases d'un système de gestion de documents, avec leurs attributs et associations.",
  "source": ""
}
,{
  "prompt": "@startuml\nclass SelectableEditor {\n    + \"<<override>>\" OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml",
  "code": "@startuml\nclass SelectableEditor {\n    + \"<<override>>\" OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "SelectableEditor",
    "Editor",
    "OnInspectorGUI"
  ],
  "description": "Le diagramme représente une classe \"SelectableEditor\" qui étend la classe \"Editor\". La méthode \"OnInspectorGUI()\" est définie avec l'attribut « override ».",
  "source": "PlantUML"
}
,{
  "prompt": "sequence diagram",
  "code": "@startuml\n'https://plantuml.com/sequence-diagram\nautoactivate on\nautonumber\ntitle  Create  a  Plan\nautonumber\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "diagramme", "uml"],
  "description": "Ce diagramme décrit la séquence des événements lors de la création d'un plan. Il montre les interactions entre le client, l'utilisateur, les bases de données et les services externes.",
  "source": "https://plantuml.com/sequence-diagram"
}
,{
  "prompt": "@startuml\nactor User\nUser -> TaskController: DELETE /task/{id}\nactivate TaskController\nTaskController -> TaskService: deleteTask(id)\nactivate TaskService\nTaskService -> TaskRepository: deleteById(id)\nactivate TaskRepository\nTaskRepository --> TaskService: void\ndeactivate TaskRepository\nTaskService --> TaskController: void\ndeactivate TaskService\nTaskController --> User: ResponseEntity<NO_CONTENT>\ndeactivate TaskController\n@enduml",
  "code": "@startuml\nactor User\nUser -> TaskController: DELETE /task/{id}\nactivate TaskController\nTaskController -> TaskService: deleteTask(id)\nactivate TaskService\nTaskService -> TaskRepository: deleteById(id)\nactivate TaskRepository\nTaskRepository --> TaskService: void\ndeactivate TaskRepository\nTaskService --> TaskController: void\ndeactivate TaskService\nTaskController --> User: ResponseEntity<NO_CONTENT>\ndeactivate TaskController\n@enduml",
  "langage": "UML",
  "type": "sequence",
  "tags": ["UML", "sequence", "diagramme", "interaction"],
  "description": "Ce diagramme montre la séquence d'actions pour supprimer une tâche. Le User envoie une requête DELETE à TaskController qui appelle ensuite TaskService et TaskRepository.",
  "source": "@startuml"
}
,{
  "prompt": "Créer un diagramme UML de séquence",
  "code": "@startuml\nactor Customer\nCustomer -> System: Delete ingredient\nSystem -> Customer: Ingredient deleted\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["diagramme", "UML", "séquence", "acteur"],
  "description": "Le diagramme représente une interaction entre un client et le système en vue de la suppression d'un ingrédient.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "@startuml\nclass Event {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String eventName;\n    private String eventTime;\n}\n@enduml",
  "code": "@startuml\nclass Event {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String eventName;\n    private String eventTime;\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["Event", "Entity", "JPA"],
  "description": "Définition de l'entité \"Event\" avec ses attributs.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "@startuml\\n\\tclass ResourceLengthValidator [[ResourceLengthValidator.html]] {\\n\\t+validate(ResourceLength): ValidationResult<ResourceLength>\\n}\\enduml",
  "code": "@startuml\\n\\tclass ResourceLengthValidator [[ResourceLengthValidator.html]] {\\n\\t+validate(ResourceLength): ValidationResult<ResourceLength>\\n}\\enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["UML", "diagramme de classes"],
  "description": "Définition d'une classe appelée ResourceLengthValidator avec une méthode validate pour valider la longueur d'un resource.",
  "source": "@startuml\\n\\tclass ResourceLengthValidator [[ResourceLengthValidator.html]] {\\n\\t+validate(ResourceLength): ValidationResult<ResourceLength>\\n}\\enduml"
}
,
{
    "prompt": "@startuml\nskinparam linetype polyline\nskinparam linetype ortho\n(*) --> \"Iniciar\"\nif \"Cuenta\" then\n  --> [No Tienes cuenta] \"Crear una cuenta\"\nelse\n  --> [Si Tienes cuenta] \"Iniciar sesión\"\nendif\n--> === B1 ===\n--> \"Parallel Activity 1\"\n--> === B2 ===\n===B1=== --> \"Parallel Activity 2\"\n--> === B2 ===\n===B1=== --> \"Parallel Activity 3\"\n--> === B2 ===\n===B1=== --> \"Parallel Activity 4\"\n--> === B2 ===\n--> (*)\n@enduml",
    "code": "@startuml\nskinparam linetype polyline\nskinparam linetype ortho\n(*) --> \"Iniciar\"\nif \"Cuenta\" then\n  --> [No Tienes cuenta] \"Crear una cuenta\"\nelse\n  --> [Si Tienes cuenta] \"Iniciar sesión\"\nendif\n--> === B1 ===\n--> \"Parallel Activity 1\"\n--> === B2 ===\n===B1=== --> \"Parallel Activity 2\"\n--> === B2 ===\n===B1=== --> \"Parallel Activity 3\"\n--> === B2 ===\n===B1=== --> \"Parallel Activity 4\"\n--> === B2 ===\n--> (*)\n@enduml",
    "langage": "plantuml",
    "type": "usecase",
    "tags": ["sequence", "parallele"],
    "description": "Le diagramme décrit un processus d'authentification avec des choix de créations de compte ou connexion existant. Il comprend également des activités parallèles.",
    "source": "https://github.com/plantuml-stdlib/CatalogPlantUML/blob/master/diagrams/usecase/sequence/activity_parallel.puml"
}
,{
  "prompt": "Entrée de diagramme UML",
  "code": "@startuml\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "diagramme UML",
    "classes",
    "héritage"
  ],
  "description": "Diagramme de classes décrivant la hiérarchie d'héritage entre LocksTab et ses interfaces",
  "source": "Entrée de diagramme UML"
}
,{
  "prompt": "",
  "code": "@startuml\nstruct int4x3 {\n    + int4x3(c0:int4, c1:int4, c2:int4)\n    + int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int)\n    + int4x3(v:int)\n    + int4x3(v:bool)\n    + int4x3(v:bool4x3)\n    + int4x3(v:uint)\n    + int4x3(v:uint4x3)\n    + int4x3(v:float)\n    + int4x3(v:float4x3)\n    + int4x3(v:double)\n    + int4x3(v:double4x3)\n    + Equals(rhs:int4x3) : bool\n    + <<override>> Equals(o:object) : bool\n    + <<override>> GetHashCode() : int\n    + <<override>> ToString() : string\n    + ToString(format:string, formatProvider:IFormatProvider) : string\n}\n\nclass math <<static>> <<partial>> {\n    + {static} int4x3(c0:int4, c1:int4, c2:int4) : int4x3\n    + {static} int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int) : int4x3\n    + {static} int4x3(v:int) : int4x3\n    + {static} int4x3(v:bool) : int4x3\n    + {static} int4x3(v:bool4x3) : int4x3\n    + {static} int4x3(v:uint) : int4x3\n    + {static} int4x3(v:uint4x3) : int4x3\n    + {static} int4x3(v:float) : int4x3\n    + {static} int4x3(v:float4x3) : int4x3\n    + {static} int4x3(v:double) : int4x3\n    + {static} int4x3(v:double4x3) : int4x3\n    + {static} transpose(v:int4x3) : int3x4\n    + {static} hash(v:int4x3) : uint\n    + {static} hashwide(v:int4x3) : uint4\n}\n\nclass \"IEquatable`1\"<T> {\n}\nIFormattable <|-- int4x3\nint4x3 --> \"c0\" int4\nint4x3 --> \"c1\" int4\nint4x3 --> \"c2\" int4\nint4x3 --> \"zero\" int4x3\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "struct",
    "class",
    "math",
    "IEquatable`1",
    "IFormattable"
  ],
  "description": "Ce diagramme UML définit une structure struct int4x3 et des méthodes statiques pour la classe math.",
  "source": ""
}
,{
  "prompt": "@startuml\nparticipant REST\nparticipant ACM_Runtime\nparticipant Participants\ndatabase ACM_Database\n\nREST -> ACM_Runtime: Undeploy Automation Composition Instance\nACM_Runtime -> ACM_Database: Read Automation Composition Instance Information\n\nalt Automation Composition Instance exists \n alt Automation Composition Instance administrative state is not LOCKED \n  ACM_Runtime -> REST: Automation Composition instance exists and is not LOCKED \n else \n  ACM_Runtime -> REST: Automation Composition instance does not exist \n end \nelse \n ACM_Runtime -> Participants: [ASYNC] Undeploy AC Element Instances for this AC Instance\n ACM_Runtime -> ACM_Database: Mark this AC Instance and its AC Element Instances as UNDEPLOYING\n ACM_Runtime -> REST: Undeployment of Automation Composition Instance has been requested\nend\n@enduml",
  "code": "@startuml\nparticipant REST\nparticipant ACM_Runtime\nparticipant Participants\ndatabase ACM_Database\n\nREST -> ACM_Runtime: Undeploy Automation Composition Instance\nACM_Runtime -> ACM_Database: Read Automation Composition Instance Information\n\nalt Automation Composition Instance exists \n alt Automation Composition Instance administrative state is not LOCKED \n  ACM_Runtime -> REST: Automation Composition instance exists and is not LOCKED \n else \n  ACM_Runtime -> REST: Automation Composition instance does not exist \n end \nelse \n ACM_Runtime -> Participants: [ASYNC] Undeploy AC Element Instances for this AC Instance\n ACM_Runtime -> ACM_Database: Mark this AC Instance and its AC Element Instances as UNDEPLOYING\n ACM_Runtime -> REST: Undeployment of Automation Composition Instance has been requested\nend\n@enduml",
  "langage": "plantuml",
  "type": "sequence",
  "tags": [
    "sequence",
    "UML",
    "PlantUML",
    "Automation Composition",
    "Instance Management"
  ],
  "description": "Ce diagramme UML montre la séquence d'actions pour l'undéploiement d'une instance de composition automatisée. Il décrit les échanges entre différents participants, notamment le serveur REST et le runtime ACM.",
  "source": "PlantUML"
}
,{
  "prompt": "",
  "code": "@startuml\nclass FieldExtensions <<static>> {\n    + {static} HasPreprocessor(descriptor:FieldDescriptor) : bool\n    + {static} HasSemantic(descriptor:FieldDescriptor) : bool\n    + {static} HasFlag(descriptor:FieldDescriptor, options:StructFieldOptions) : bool\n    + {static} ToFieldString(descriptor:FieldDescriptor) : string\n}\n@enduml",
  "langage": "",
  "type": "class",
  "tags": ["field", "descriptor", "preprocessor", "semantic", "flag"],
  "description": "Diagramme de classe UML représentant les méthodes statiques d'un objet FieldExtensions.",
  "source": ""
}
,{
  "prompt": "@startuml",
  "code": "@startuml\nskinparam monochrome true\nskinparam packageStyle rectangle\nskinparam shadowing false\nclass ...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["statisticMapper", "StatisticMapper", "statisticDto", "Statistic", "Sequence"],
  "description": "Diagramme de séquence montrant l'échange d'informations entre des classes StatisticMapper, Statistic et StatisticDto.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "@startuml title Listar Egresados skinsparam { NoteBackgroundColor #whiteSmoke ArrowColor #green NoteBorderColor #green linetype polyline } hide empty description state startState as \"GESTIÓN_EGRESADOS\" state endState as \"GESTIÓN_EGRESADOS\" startState --> ListarEgresados note on link <b>Administrador Solicita</b>* Listar Egresados en Alumni end note ListarEgresados --> endState state ListarEgresados { state 2 as \" \" [*] --> [*] note on link <b>Sistema Muestra</b>* Egresados en Alumni end note [*] -[#red]-> 2 note on link Error al listar Egresados en Alumni end note 2 -[#red]-> [*] note on link <b>Sistema Muestra</b>* Error al listar Egresados en Alumni end note } @enduml",
  "code": "@startuml title Listar Egresados skinsparam { NoteBackgroundColor #whiteSmoke ArrowColor #green NoteBorderColor #green linetype polyline } hide empty description state startState as \"GESTIÓN_EGRESADOS\" state endState as \"GESTIÓN_EGRESADOS\" startState --> ListarEgresados note on link <b>Administrador Solicita</b>* Listar Egresados en Alumni end note ListarEgresados --> endState state ListarEgresados { state 2 as \" \" [*] --> [*] note on link <b>Sistema Muestra</b>* Egresados en Alumni end note [*] -[#red]-> 2 note on link Error al listar Egresados en Alumni end note 2 -[#red]-> [*] note on link <b>Sistema Muestra</b>* Error al listar Egresados en Alumni end note } @enduml",
  "langage": "PlantUML",
  "type": "state machine",
  "tags": [
    "diagramme d'état",
    "système de gestion des étudiants"
  ],
  "description": "Diagramme d'état représentant la gestion des étudiants, avec les états de début et fin, ainsi que le processus de liste des étudiants.",
  "source": "https://github.com/plantuml-stdlib/CatalogPlantUML/blob/master/uml/state-machine.uml"
}

,{
  "prompt": "@startuml\nclass NoneChunk {\n}\nBaseChunk <|-- NoneChunk\n@enduml",
  "code": "@startuml\nclass NoneChunk {\n}\nBaseChunk <|-- NoneChunk\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme", "uml", "plantuml"],
  "description": "Diagramme de classes montrant les relations entre les classes BaseChunk et NoneChunk.",
  "source": "@startuml\nclass NoneChunk {\n}\nBaseChunk <|-- NoneChunk\n@enduml"
}
,{
  "prompt": "Analyse de la classe UML PlantUML",
  "code": "@startuml\n... (le code entier)\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["Netty", "ServerConfig", "HttpHandler", "HeartbeatHandler", "MessageHandler"],
  "description": "Diagramme de classes UML représentant une architecture de serveur Netty avec des classes pour la configuration, l'écoute des requêtes HTTP et les gestionnaires de signaux de cœur",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "",
  "code": "@startuml sd\n...\n@enduml",
  "langage": "plantuml",
  "type": "sequence",
  "tags": [
    "uml",
    "sequence",
    "diagramme",
    "PlantUML"
  ],
  "description": "Ce diagramme UML représente la séquence d'exécution d'une méthode de création d'un objet. Il montre les participants et leurs interactions.",
  "source": "https://github.com/plantuml/plantuml/blob/master/samples/sd.puml"
}
,{
  "prompt": "Diagramme UML de la classe CinemachineCollider",
  "code": "@startuml\n... (le code du diagramme)\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "CinemachineCollider",
    "ResolutionStrategy",
    "VcamExtraState"
  ],
  "description": "Le diagramme décrit les classes CinemachineCollider, ResolutionStrategy et VcamExtraState, ainsi que leurs relations.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "@startuml\nsprite $google-developers [102x11/16] {\n... (le code entier)\n}\n@enduml",
  "code": "@startuml\nsprite $google-developers [102x11/16] {\n001999009997000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n009990000999000000018888500000000000000000008000000001110000000000000000000010000000000000000000000000\n089980000999900000180000100000000000000000008000000007225800000000000000000070000000000000000000000000\n088900000099900000830000000000000000000000008000100007000080000000000000000070000000000000000000000000\n888400000029990000800088880887800888800878808058680007000080573808000818383070856808838607748078608368\n888800000019990000800033383800386700678400808080487007000080822270808082228074200528000808223570008200\n088800000044900000780000384800187500588100808088100007000080800000808080000076100338000808000070000187\n088880000444900000088208800820820810801802808088088007000810800640182056018070800808800808008170008008\n008883000444000000000774000067000077000076805004750005553000067300050003750050077008076000671050000760\n000888004440000000000000000000000000004800800000000000000000000000000000000000000008000000000000000000\n000000000000000000000000000000000000000888100000000000000000000000000000000000000008000000000000000000\n}\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["sprite", "google-developers"],
  "description": "Diagramme UML représentant un sprite $google-developers utilisant les symboles PlantUML pour la disposition et les couleurs.",
  "source": "@startuml\nsprite $google-developers [102x11/16] {\n... (le code entier)\n}\n@enduml"
}
,{
  "prompt": "",
  "code": "@startuml\ngraph TreeDiagram {\n...\n} @enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["Tree", "Diagrame"],
  "description": "Diagramme montrant l'arbre de fabrication d'un pot en acier inoxydable.",
  "source": ""
}
,{
  "prompt": "@startuml\nstruct GraphDataReadOnly {\n    + GraphDataReadOnly(graph:GraphData)\n    + AnyVertexAnimationActive() : bool\n    + IsVFXCompatible() : bool\n}\n@enduml",
  "code": "@startuml\nstruct GraphDataReadOnly {\n    + GraphDataReadOnly(graph:GraphData)\n    + AnyVertexAnimationActive() : bool\n    + IsVFXCompatible() : bool\n}\n@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": ["graph", "data", "readonly"],
  "description": "Définition d'une classe pour les données de graphique en lecture seule.",
  "source": "@startuml"
}
,{
  "prompt": "",
  "code": "@startuml\n\npackage \"AI Services\" {\n  node \"AI-Center Services Group\" as center\n  database \"PostgreSQL\" as PG\n\n  center <--> [srv-device-hub]\n  [srv-device-hub] ..> PG : use\n}\n\npackage \"External Device Group\" as external {\n  node \"IoT Platforms\" as iot\n  node \"Video Platforms\" as video\n  node \"Camera Groups\"\n}\n[srv-device-hub] <-> external : sync\n\n@enduml",
  "langage": "plantuml",
  "type": "usecase",
  "tags": ["plantuml", "uml", "usecase"],
  "description": "Diagramme de cas d'utilisation montrant les interactions entre les services AI et les plateformes IoT.",
  "source": ""
}
,{
  "prompt": "Diagramme UML",
  "code": "@startuml\ninterface IRecordsRepository {\n}\nclass \"IGenericRepository`1\"<T> {\n}\n\"IGenericRepository`1\" <Record>  <<-- IRecordsRepository\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme", "uml", "interface", "classe", "héritage"],
  "description": "Diagramme UML montrant l'héritage entre deux classes et une interface.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "Sequence diagram for path management",
  "code": "@startuml\nautonumber...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "path", 
    "management", 
    "sequence"
  ],
  "description": "Ce diagramme décrit la séquence d'appel entre les différents composants lors de la récupération des chemins.",
  "source": "https://github.com/plantuml/plantuml-examples/blob/master/src/flow/PathManagement.pu"
}
,{
  "prompt": "@startuml\nclass GranularSystem{\n-int iterations\n-double dt\n-double frequency\n-double holeSize\n-String outputFileName\n-List<Particle> particleList\n-List<Vertex> limitsList\n-List<Double> timesList\n-List<Double> energyList\n-Simulation simulation\n+GranularSystem(double dt, double holeSize, double iterations, double frequency, String outputFileName, List<Particle> particles)\n+void run()\n+List<Double> getTimes()\n+List<Double> getEnergy()\n}\n@enduml",
  "code": "@startuml\nclass GranularSystem{\n-int iterations\n-double dt\n-double frequency\n-double holeSize\n-String outputFileName\n-List<Particle> particleList\n-List<Vertex> limitsList\n-List<Double> timesList\n-List<Double> energyList\n-Simulation simulation\n+GranularSystem(double dt, double holeSize, double iterations, double frequency, String outputFileName, List<Particle> particles)\n+void run()\n+List<Double> getTimes()\n+List<Double> getEnergy()\n}\n@enduml",
  "langage": "UML",
  "type": "class",
  "tags": ["GranularSystem", "Particle", "Vertex", "Simulation"],
  "description": "Diagramme UML représentant une classe GranularSystem avec ses attributs et méthodes.",
  "source": "@startuml\nclass GranularSystem{\n-int iterations\n-double dt\n-double frequency\n-double holeSize\n-String outputFileName\n-List<Particle> particleList\n-List<Vertex> limitsList\n-List<Double> timesList\n-List<Double> energyList\n-Simulation simulation\n+GranularSystem(double dt, double holeSize, double iterations, double frequency, String outputFileName, List<Particle> particles)\n+void run()\n+List<Double> getTimes()\n+List<Double> getEnergy()\n}\n@enduml"
}
,{
  "prompt": "@startuml\nhide circle\nskinparam classAttributeIconSize 0\nskinparam backgroundColor White\nskinparam RoundCorner 10\nskinparam Shadowing true\n\nskinparam class {\n    ArrowColor DarkBlue\n    BackgroundColor LightBlue\n    BorderColor DarkBlue\n}\n\nskinparam note {\n    BackgroundColor LightYellow\n    BorderColor DarkBlue\n}\n\ntitle Diagrama CS9 - Empresa constructora\n\nclass Proyecto {\n    - nombre : String\n    - codigo : int\n    - cdadHorasPorHombre : int\n    + empezar() : void\n    + diseniar() : void\n    + desarrollarProyecto() : void\n    + implementarProyecto() : void\n    + hacerSeguimiento() : void\n    + terminar() : void\n}\n\nclass Empresa {\n    - nombre : String\n    - nroIdentificacion : int\n    + contratar(e : Empleado) : void\n    + despedir(e : Empleado) : void\n    + ofrecerServicio() : String\n}\n\nclass Empleado {\n    - nombre : String\n    - sueldoFijo : double\n    + {abstract} calcularSueldo() : double\n    + trabajar() : void\n}\n\nclass EmpleadoSueldoFijo {\n    + calcularSueldo() : double\n}\n\nclass EmpleadoSueldoPorHora {\n    - importePorHora : double\n    - horasTrabajadas : int\n    + calcularSueldo() : double\n    + trabajar() : void\n}\nProyecto \"*\" *-- \"*\" Empleado\nEmpresa \"1\" *-- \"*\" Proyecto\nEmpleado <|-- EmpleadoSueldoFijo\nEmpleado <|-- EmpleadoSueldoPorHora\n@enduml",
  "code": "@startuml\\nhide circle\\nskinparam classAttributeIconSize 0\\nskinparam backgroundColor White\\nskinparam RoundCorner 10\\nskinparam Shadowing true\\n\\nskinparam class {\\n    ArrowColor DarkBlue\\n    BackgroundColor LightBlue\\n    BorderColor DarkBlue\\n}\\n\\nskinparam note {\\n    BackgroundColor LightYellow\\n    BorderColor DarkBlue\\n}\\n\\ntitle Diagrama CS9 - Empresa constructora\\n\\nclass Proyecto {\\n    - nombre : String\\n    - codigo : int\\n    - cdadHorasPorHombre : int\\n    + empezar() : void\\n    + diseniar() : void\\n    + desarrollarProyecto() : void\\n    + implementarProyecto() : void\\n    + hacerSeguimiento() : void\\n    + terminar() : void\\n}\\n\\nclass Empresa {\\n    - nombre : String\\n    - nroIdentificacion : int\\n    + contratar(e : Empleado) : void\\n    + despedir(e : Empleado) : void\\n    + ofrecerServicio() : String\\n}\\n\\nclass Empleado {\\n    - nombre : String\\n    - sueldoFijo : double\\n    + {abstract} calcularSueldo() : double\\n    + trabajar() : void\\n}\\n\\nclass EmpleadoSueldoFijo {\\n    + calcularSueldo() : double\\n}\\n\\nclass EmpleadoSueldoPorHora {\\n    - importePorHora : double\\n    - horasTrabajadas : int\\n    + calcularSueldo() : double\\n    + trabajar() : void\\n}\\nProyecto \"*\" *-- \"*\" Empleado\\nEmpresa \"1\" *-- \"*\" Proyecto\\nEmpleado <|-- EmpleadoSueldoFijo\\nEmpleado <|-- EmpleadoSueldoPorHora\\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["diagramme UML", "classes", "objets", "associations"],
  "description": "Ce diagramme décrit les relations entre les classes Proyecto, Empresa et Empleado. Il montre comment un projet peut être associé à plusieurs employés et une entreprise peut avoir plusieurs projets en cours.",
  "source": "@startuml\nhide circle\nskinparam classAttributeIconSize 0\nskinparam backgroundColor White\nskinparam RoundCorner 10\nskinparam Shadowing true\n\ntitle Diagrama CS9 - Empresa constructora\n\nclass Proyecto {\n    - nombre : String\n    - codigo : int\n    - cdadHorasPorHombre : int\n    + empezar() : void\n    + diseniar() : void\n    + desarrollarProyecto() : void\n    + implementarProyecto() : void\n    + hacerSeguimiento() : void\n    + terminar() : void\n}\n\nclass Empresa {\n    - nombre : String\n    - nroIdentificacion : int\n    + contratar(e : Empleado) : void\n    + despedir(e : Empleado) : void\n    + ofrecerServicio() : String\n}\n\nclass Empleado {\n    - nombre : String\n    - sueldoFijo : double\n    + {abstract} calcularSueldo() : double\n    + trabajar() : void\n}\n\nclass EmpleadoSueldoFijo {\n    + calcularSueldo() : double\n}\n\nclass EmpleadoSueldoPorHora {\n    - importePorHora : double\n    - horasTrabajadas : int\n    + calcularSueldo() : double\n    + trabajar() : void\n}\nProyecto \"*\" *-- \"*\" Empleado\nEmpresa \"1\" *-- \"*\" Proyecto\nEmpleado <|-- EmpleadoSueldoFijo\nEmpleado <|-- EmpleadoSueldoPorHora\n@enduml"
}
,{
  "prompt": "@startuml\nskinparam defaultFontSize 18\n\ntitle: ATAP Architecture\n...\n@enduml",
  "code": "@startuml\nskinparam defaultFontSize 18\n\ntitle: ATAP Architecture\nrectangle \"Text Analytics Platform\" as atap { ...\n}\ndatabase \"OCFL Repository\" as repo {\n}\nrectangle \"API\" as oni {\n}\n...\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["ATAP", "architecture", "notebook", "api", "repository"],
  "description": "Le diagramme représente l'architecture de la plateforme ATAP, comprenant des notebooks, une API, un repository et des processus d'accès au contrôle.",
  "source": "@startuml\nskinparam defaultFontSize 18\n\ntitle: ATAP Architecture\n...\n@enduml"
}
,{
  "prompt": "@startuml\nclass UnitEditor {\n    + UnitEditor(metadata:Metadata)\n}\nclass \"GraphElementEditor`1\"<T> {\n}\nclass Styles <<new>> <<static>> {\n    + {static} <<readonly>> spaceBetweenPorts : float = 5\n}\n\"GraphElementEditor`1\" \"<FlowGraphContext>\" <|-- UnitEditor\nUnitEditor +-- Styles\nStyles --> \"portsBackground\" GUIStyle\nStyles --> \"portsLabel\" GUIStyle\nStyles --> \"portLabel\" GUIStyle\nStyles --> \"portDescription\" GUIStyle\nStyles --> \"portIcon\" GUIStyle\nStyles --> \"inspectorBackground\" GUIStyle\n@enduml",
  "code": "@startuml\nclass UnitEditor {\n    + UnitEditor(metadata:Metadata)\n}\nclass \"GraphElementEditor`1\"<T> {\n}\nclass Styles <<new>> <<static>> {\n    + {static} <<readonly>> spaceBetweenPorts : float = 5\n}\n\"GraphElementEditor`1\" \"<FlowGraphContext>\" <|-- UnitEditor\nUnitEditor +-- Styles\nStyles --> \"portsBackground\" GUIStyle\nStyles --> \"portsLabel\" GUIStyle\nStyles --> \"portLabel\" GUIStyle\nStyles --> \"portDescription\" GUIStyle\nStyles --> \"portIcon\" GUIStyle\nStyles --> \"inspectorBackground\" GUIStyle\n@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": ["UnitEditor", "GraphElementEditor`1", "Styles", "GUIStyle"],
  "description": "Le diagramme représente les relations entre les classes UnitEditor, GraphElementEditor et Styles. Les styles sont définis statiquement dans la classe Styles.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "@startuml\nclass Texture2DArrayShaderProperty {\n}\nclass \"AbstractShaderProperty`1\"<T> {\n}\n\"AbstractShaderProperty`1\" \"<SerializableTextureArray>\" <|-- Texture2DArrayShaderProperty\nTexture2DArrayShaderProperty --> \"propertyType\" PropertyType\n@enduml",
  "code": "@startuml\nclass Texture2DArrayShaderProperty {\n}\nclass \"AbstractShaderProperty`1\"<T> {\n}\n\"AbstractShaderProperty`1\" \"<SerializableTextureArray>\" <|-- Texture2DArrayShaderProperty\nTexture2DArrayShaderProperty --> \"propertyType\" PropertyType\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["UML", "diagramme de classe"],
  "description": "Le diagramme montre les classes Texture2DArrayShaderProperty et AbstractShaderProperty`1 avec une relation d'héritage.",
  "source": "@startuml"
}
,{
  "prompt": "",
  "code": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n...\n}\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label) ENTITY(rectangle,black,pied_piper_pp,_label, _alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label, _shape) ENTITY(_shape,black,pied_piper_pp,_label, _alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label, _shape, _color) ENTITY(_shape,_color,pied_piper_pp,_label, _alias,FA PIED_PIPER_PP)\nskinparam folderBackgroundColor<<FA PIED_PIPER_PP>> White\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["sprite", "entity", "rectangle", "pied_piper_pp"],
  "description": "Diagramme de composant décrivant un sprite avec une entité rectangulaire.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "",
  "code": "@startuml\\ntitle Motorblok\\nfooter: OpenWoo.app\\nheader: OpenWoo.app\\n...\\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "Publicatie platformen",
    "Services",
    "Integratie",
    "API",
    "component"
  ],
  "description": "Diagramme UML montrant les différentes couches d'une application : Publicatie platformen, Services, Integratie et API.",
  "source": ""
}
,{
  "prompt": "@startuml\nactor Actor as Actor\nparticipant \"SPA\" as Container <<Container (C4)>>\nparticipant \"GestaoInfoAPI\" as API <<Container (C4)>>\n...",
  "code": "@startuml\nactor Actor as Actor\nparticipant \"SPA\" as Container <<Container (C4)>>\nparticipant \"GestaoInfoAPI\" as API <<Container (C4)>>\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["actor", "participant", "container", "C4"],
  "description": "Diagramme de séquence représentant l'interaction entre un acteur, une application (SPA) et une API.",
  "source": ""
}
,{
  "prompt": "Diagramme UML",
  "code": "@startuml\nabstract class GraphElementDescription {\n}\nDescription <|-- GraphElementDescription\nIGraphElementDescription <|-- GraphElementDescription\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme", "uml", "plantuml", "graphical"],
  "description": "Diagramme UML montrant la hiérarchie d'inheritance entre GraphElementDescription, Description et IGraphElementDescription.",
  "source": "https://www.plantuml.com/"
}
,{
  "prompt": "@startuml\nclass NotificationsController {\n    + NotificationsController(context:DefaultContext)\n    + \\u00AB\\u00A7async\\u00A0\\u00AB GetNotifications() : Task<ActionResult<IEnumerable<Notification>>>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB GetNotification(id:int) : Task<ActionResult<Notification>>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB PutNotification(id:int, notification:Notification) : Task<IActionResult>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB PostNotification(notification:Notification) : Task<ActionResult<Notification>>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB DeleteNotification(id:int) : Task<IActionResult>\n}\nControllerBase <|-- NotificationsController\n@enduml",
  "code": "@startuml\nclass NotificationsController {\n    + NotificationsController(context:DefaultContext)\n    + \\u00AB\\u00A7async\\u00A0\\u00AB GetNotifications() : Task<ActionResult<IEnumerable<Notification>>>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB GetNotification(id:int) : Task<ActionResult<Notification>>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB PutNotification(id:int, notification:Notification) : Task<IActionResult>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB PostNotification(notification:Notification) : Task<ActionResult<Notification>>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB DeleteNotification(id:int) : Task<IActionResult>\n}\nControllerBase <|-- NotificationsController\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "NotificationsController",
    "ControllerBase",
    "async"
  ],
  "description": "Diagramme de classe décrivant la structure d'une classe de contrôleur de notifications.",
  "source": "@startuml\nclass NotificationsController {\n    + NotificationsController(context:DefaultContext)\n    + \\u00AB\\u00A7async\\u00A0\\u00AB GetNotifications() : Task<ActionResult<IEnumerable<Notification>>>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB GetNotification(id:int) : Task<ActionResult<Notification>>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB PutNotification(id:int, notification:Notification) : Task<IActionResult>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB PostNotification(notification:Notification) : Task<ActionResult<Notification>>\n    + \\u00AB\\u00A7async\\u00A0\\u00AB DeleteNotification(id:int) : Task<IActionResult>\n}\nControllerBase <|-- NotificationsController\n@enduml"
}
,{
  "prompt": "@startuml\nclass Changelog_1_0_3 {\n    + Changelog_1_0_3(plugin:Plugin)\n    + <<override>> description : string <<get>>\n}\nclass \"IEnumerable`1\"<T> {\n}\nPluginChangelog <|-- Changelog_1_0_3\nChangelog_1_0_3 --> \"version\" SemanticVersion\nChangelog_1_0_3 --> \"date\" DateTime\nChangelog_1_0_3 --> \"changes<string>\" \"IEnumerable`1\"\n@enduml",
  "code": "@startuml\nclass Changelog_1_0_3 {\n    + Changelog_1_0_3(plugin:Plugin)\n    + <<override>> description : string <<get>>\n}\nclass \"IEnumerable`1\"<T> {\n}\nPluginChangelog <|-- Changelog_1_0_3\nChangelog_1_0_3 --> \"version\" SemanticVersion\nChangelog_1_0_3 --> \"date\" DateTime\nChangelog_1_0_3 --> \"changes<string>\" \"IEnumerable`1\"\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["PlantUML", "diagramme de classes"],
  "description": "Définition d'une classe Changelog_1_0_3 et de ses relations avec d'autres classes.",
  "source": "@startuml"
}
,{
  "prompt": "@startuml\n\ntitle \"org.apache.wicket.arquillian.testing.pages\"\n\nWebPage <|-- InsertContact\nclass InsertContact {\n    --(constructors)--\n    +InsertContact()\n    --(naming)--\n    +String getName()\n    +void setName(String name)\n    --(network)--\n    +String getEmail()\n    +void setEmail(String email)\n}\n\nWebPage <|-- ListContacts\nclass ListContacts {\n    --(constructors)--\n    +ListContacts()\n}\n@enduml",
  "code": "@startuml\n\ntitle \"org.apache.wicket.arquillian.testing.pages\"\n\nWebPage <|-- InsertContact\nclass InsertContact {\n    --(constructors)--\n    +InsertContact()\n    --(naming)--\n    +String getName()\n    +void setName(String name)\n    --(network)--\n    +String getEmail()\n    +void setEmail(String email)\n}\n\nWebPage <|-- ListContacts\nclass ListContacts {\n    --(constructors)--\n    +ListContacts()\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "plantuml",
    "uml",
    "diagramme",
    "classes",
    "association"
  ],
  "description": "Ce diagramme UML décrit les classes \"InsertContact\" et \"ListContacts\" qui héritent de la classe \"WebPage\".",
  "source": "@startuml\n\ntitle \"org.apache.wicket.arquillian.testing.pages\"\n\nWebPage <|-- InsertContact\nclass InsertContact {\n    --(constructors)--\n    +InsertContact()\n    --(naming)--\n    +String getName()\n    +void setName(String name)\n    --(network)--\n    +String getEmail()\n    +void setEmail(String email)\n}\n\nWebPage <|-- ListContacts\nclass ListContacts {\n    --(constructors)--\n    +ListContacts()\n}\n@enduml"
}
,{
  "prompt": "class",
  "code": "@startuml\nclass Point {\n    + Point()\n    + Point(x:double, y:double)\n    + Point(x:double, y:double, label:int)\n    + ID : int <<get>> <<set>>\n    + X : double <<get>> <<set>>\n    + Y : double <<get>> <<set>>\n    + Label : int <<get>> <<set>>\n    + <<override>> Equals(obj:object) : bool\n    + Equals(p:Point) : bool\n    + CompareTo(other:Point) : int\n    + <<override>> GetHashCode() : int\n}\nclass \"IComparable`1\"<T> {\n}\nclass \"IEquatable`1\"<T> {\n}\n\"IComparable`1\" \"<Point>\" <|-- Point\n\"IEquatable`1\" \"<Point>\" <|-- Point\n@enduml",
  "langage": "UML",
  "type": "class",
  "tags": [
    "UML",
    "Class",
    "Point",
    "IComparable`1",
    "IEquatable`1"
  ],
  "description": "Diagramme UML de classes définissant les propriétés et méthodes d'une classe Point ainsi que ses implémentations de interfaces IComparable`1 et IEquatable`1.",
  "source": "https://plantuml.com/fr/"
}
,{
  "prompt": "diagramme UML",
  "code": "@startuml\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('material-4/bootstrap')\ninclude('material-4/Av/Movie')\nMovie('Movie', 'Movie', 'an optional tech label', 'an optional description')\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "plantuml",
    "diagramme",
    "umlet",
    "sequence"
  ],
  "description": "Diagrame UML qui montre une application avec les éléments Movie.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "@startuml\n' configures the library...\n@enduml",
  "code": "@startuml\n' configures the library\n!global $INCLUSION_MODE=\"local\"\n!global $LIB_BASE_LOCATION=\"../..\"\n' loads the library's bootstrap\n!include $LIB_BASE_LOCATION/bootstrap.puml\n' loads the package bootstrap\ninclude('simpleicons-14/bootstrap')\n' loads the Item which embeds the element Veepee\ninclude('simpleicons-14/V/Veepee')\n' renders the element\nVeepee('Veepee', 'Veepee', 'an optional tech label', 'an optional description')\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["PlantUML", "diagramme UML", "component"],
  "description": "Diagramme UML qui configure la bibliothèque, charge les fichiers de bootstrap et déclare un élément Veepee.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "UML sequence diagram",
  "code": "@startuml   consultarReporteAspirante 7\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "UML",
    "sequence",
    "diagramme",
    "plantuml"
  ],
  "description": "Ce diagramme UML représente la séquence d'exécution d'une requête pour consulter un rapport d'aspirant. L'utilisateur est connecté et les privilèges sont vérifiés avant d'accéder aux données.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "@startuml !include ..\\..\\..\\..\\..\\..\\.c4s\\C4_Sequence.puml ... @enduml",
  "code": "@startuml !include ..\\..\\..\\..\\..\\..\\.c4s\\C4_Sequence.puml title Big Bank Plc - Internet Banking - API Application - Create Account - C4 Sequence - Context level System_Ext(C4InterFlow.SoftwareSystems.ExternalSystem, \"External\", \"\") System(BigBankPlc.SoftwareSystems.InternetBanking, \"Internet Banking\", \"Provided Internet Banking services\") System_Ext(BigBankPlc.SoftwareSystems.MainframeBankingSystem, \"Mainframe Banking System\", \"\") System_Ext(BigBankPlc.SoftwareSystems.EMailSystem, \"E-Mail System\", \"The internal Microsoft Exchange system\") Rel(C4InterFlow.SoftwareSystems.ExternalSystem, BigBankPlc.SoftwareSystems.InternetBanking, \"Create Account\") Rel(BigBankPlc.SoftwareSystems.InternetBanking, BigBankPlc.SoftwareSystems.MainframeBankingSystem, \"Create Account\") Rel(BigBankPlc.SoftwareSystems.InternetBanking, BigBankPlc.SoftwareSystems.EMailSystem, \"Send New Account Created Notification E-Mail\") @enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["C4 Sequence", "Context level", "Internet Banking"],
  "description": "Ce diagramme UML représente la séquence de création d'un compte en ligne pour l'application API du système bancaire Big Bank Plc. Il montre les systèmes et les relations entre eux.",
  "source": "https://plantuml.com/"
}

,{
  "prompt": "@startuml title Listar Egresados skinparam { NoteBackgroundColor #whiteSmoke ArrowColor #green NoteBorderColor #green linetype polyline } hide empty description state startState as \"GESTIÓN_EGRESADOS\" state endState as \"GESTIÓN_EGRESADOS\" startState --> ListarEgresados note on link <b>Administrador Solicita</b> * Listar Egresados en Alumni end note ListarEgresados --> endState state ListarEgresados { state 2 as \" \" [*] --> [*] note on link <b>Sistema Muestra</b> * Egresados en Alumni end note [*] -[#red]-> 2 note on link Error al listar Egresados en Alumni end note 2 -[#red]-> [*] note on link <b>Sistema Muestra</b> * Error al listar Egresados en Alumni end note } @enduml",
  "code": "@startuml title Listar Egresados skinparam { NoteBackgroundColor #whiteSmoke ArrowColor #green NoteBorderColor #green linetype polyline } hide empty description state startState as \"GESTIÓN_EGRESADOS\" state endState as \"GESTIÓN_EGRESADOS\" startState --> ListarEgresados note on link <b>Administrador Solicita</b> * Listar Egresados en Alumni end note ListarEgresados --> endState state ListarEgresados { state 2 as \" \" [*] --> [*] note on link <b>Sistema Muestra</b> * Egresados en Alumni end note [*] -[#red]-> 2 note on link Error al listar Egresados en Alumni end note 2 -[#red]-> [*] note on link <b>Sistema Muestra</b> * Error al listar Egresados en Alumni end note } @enduml",
  "langage": "PlantUML",
  "type": "state machine",
  "tags": [
    "diagramme d'état",
    "système de gestion des étudiants"
  ],
  "description": "Diagramme d'état représentant la gestion des étudiants, avec les états de début et fin, ainsi que le processus de liste des étudiants.",
  "source": "https://github.com/plantuml-stdlib/CatalogPlantUML/blob/master/uml/state-machine.uml"
}

,{
  "prompt": "@startuml\n' configures the library\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n\n' loads the library's bootstrap\n!include $LIB_BASE_LOCATION/bootstrap.puml\n\n' loads the package bootstrap\ninclude('simpleicons-14/bootstrap')\n\n' loads the Item which embeds the element Boulanger\ninclude('simpleicons-14/B/Boulanger')\n\n' renders the element\nBoulanger('Boulanger', 'Boulanger', 'an optional tech label', 'an optional description')\n@enduml",
  "code": "@startuml\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('simpleicons-14/bootstrap')\ninclude('simpleicons-14/B/Boulanger')\nBoulanger('Boulanger', 'Boulanger', 'an optional tech label', 'an optional description')\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "plantuml",
    "library",
    "bootstrap",
    "package",
    "item",
    "boulanger"
  ],
  "description": "Diagramme UML qui montre la configuration d'une bibliothèque et l'inclusion de plusieurs éléments.",
  "source": "https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution/bootstrap.puml"
}
,{
  "prompt": "Appointments BC Object Diagram",
  "code": "@startuml Appointments BC Object Diagram\n...\n@enduml",
  "langage": "PlantUML",
  "type": "object diagram",
  "tags": [
    "diagramme UML",
    "objets",
    "relations"
  ],
  "description": "Ce diagramme illustre les objets et leurs relations dans le contexte d'un atelier de réparation. Il montre comment ces objets interagissent pour représenter un processus.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "@startuml\n'https://plantuml.com/class-diagram\n\nclass Game {\n    List<Player> players\n    Board board\n    Dice dice\n    int turn\n    GameState state {NOT_STARTED, IN_PROGRESS, COMPLETED}\n    void start()\n    Position movePiece(Piece piece, int value)\n}\nGame o-- Dice\nGame o-- Board\nGame -- Player",
  "code": "@startuml\n'https://plantuml.com/class-diagram\n\nclass Game {\n    List<Player> players\n    Board board\n    Dice dice\n    int turn\n    GameState state {NOT_STARTED, IN_PROGRESS, COMPLETED}\n    void start()\n    Position movePiece(Piece piece, int value)\n}\nGame o-- Dice\nGame o-- Board\nGame -- Player",
  "langage": "plantuml",
  "type": "class-diagram",
  "tags": [
    "PlantUML",
    "diagramme de classe",
    "jeu"
  ],
  "description": "Ce diagramme de classes représente un jeu avec des joueurs, une board et des dés. Il décrit les relations entre ces entités.",
  "source": "@startuml\n'https://plantuml.com/class-diagram"
}
,{
  "prompt": "@startuml Algorithme : Recherche Paire\nactor user as user\nparticipant front as front\nclass control server as server\ndatabase bdd as bdd...",
  "code": "@startuml Algorithme : Recherche Paire\nactor user as user\nparticipant front as front\nclass control server as server\ndatabase bdd as bdd...\nserver --> server : vérifie la valeur du dé le plus haut de la Grande Suite...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "diagramme", "uml", "algorithmie"],
  "description": "Ce diagramme UML montre l'algorithme de recherche d'une paire entre deux joueurs.",
  "source": "@startuml Algorithme : Recherche Paire\nactor user as user\nparticipant front as front\nclass control server as server\ndatabase bdd as bdd..."
}
,{
  "prompt": "@startuml sprite ktor <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"243\" preserveAspectRatio=\"xMidYMid\"><defs><linearGradient id=\"a\" x1=\"23.965%\" x2=\"74.641%\" y1=\"23.965%\" y2=\"74.641%\"><stop offset=\"29.6%\" stop-color=\"#00AFFF\"/><stop offset=\"69.4%\" stop-color=\"#5282FF\"/><stop offset=\"100%\" stop-color=\"#945DFF\"/></linearGradient><linearGradient id=\"b\" x1=\"26.206%\" x2=\"74.117%\" y1=\"26.206%\" y2=\"74.117%\"><stop offset=\"10.8%\" stop-color=\"#C757BC\"/><stop offset=\"17.3%\" stop-color=\"#CD5CA9\"/><stop offset=\"49.2%\" stop-color=\"#E8744F\"/><stop offset=\"71.6%\" stop-color=\"#F88316\"/><stop offset=\"82.3%\" stop-color=\"#FF8900\"/></linearGradient></defs><path fill=\"url(#a)\" d=\"m161.667 80.833-40.25-40.249L80.834 0l-42.68 42.68L0 80.833l80.833 80.834z\"/><path fill=\"url(#b)\" d=\"m80.833 161.667 40.25 40.249 40.584 40.584 42.68-42.68 38.153-38.153-80.833-80.834z\"/><path d=\"M161.667 80.833H80.833v80.834h80.834z\"/><path fill=\"#27282C\" d=\"M312.036 160.523V138.23l7.392-8.69 21.661 30.983h18.715l-29.103-40.998 27.188-31.947h-17.37l-27.553 32.756h-.93V87.578h-15.612v72.945h15.612Zm59.243-68.949v13.794h-8.893v11.176h8.893v28.967c0 10.813 5.482 15.214 19.336 15.214 2.53.004 5.057-.216 7.549-.657V149.2a36.38 36.38 0 0 1-4.446.252c-5.119 0-7.393-2.324-7.393-7.326v-25.582h11.839v-11.171h-11.839V91.574H371.28Zm64.315 70.11c17.522 0 28.072-10.812 28.072-29.017 0-18.043-10.701-29.012-28.072-29.012s-28.073 11.015-28.073 29.012c0 18.15 10.545 29.018 28.073 29.018Zm0-11.625c-8.064 0-12.617-6.367-12.617-17.392 0-10.913 4.598-17.335 12.617-17.335 7.958 0 12.611 6.417 12.611 17.335 0 11.02-4.598 17.392-12.611 17.392Zm40.37 10.459h15.047v-31.135c0-7.831 5.634-12.637 13.855-12.637 2.43 0 5.947.405 7.134.809v-12.94c-1.288-.404-3.825-.657-5.891-.657-7.236 0-13.132 4.194-14.633 9.752h-.93v-8.842H475.97v55.655l-.005-.005Z\"/></svg> @enduml",
  "code": "@startuml sprite ktor <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"243\" preserveAspectRatio=\"xMidYMid\"><defs><linearGradient id=\"a\" x1=\"23.965%\" x2=\"74.641%\" y1=\"23.965%\" y2=\"74.641%\"><stop offset=\"29.6%\" stop-color=\"#00AFFF\"/><stop offset=\"69.4%\" stop-color=\"#5282FF\"/><stop offset=\"100%\" stop-color=\"#945DFF\"/></linearGradient><linearGradient id=\"b\" x1=\"26.206%\" x2=\"74.117%\" y1=\"26.206%\" y2=\"74.117%\"><stop offset=\"10.8%\" stop-color=\"#C757BC\"/><stop offset=\"17.3%\" stop-color=\"#CD5CA9\"/><stop offset=\"49.2%\" stop-color=\"#E8744F\"/><stop offset=\"71.6%\" stop-color=\"#F88316\"/><stop offset=\"82.3%\" stop-color=\"#FF8900\"/></linearGradient></defs><path fill=\"url(#a)\" d=\"m161.667 80.833-40.25-40.249L80.834 0l-42.68 42.68L0 80.833l80.833 80.834z\"/><path fill=\"url(#b)\" d=\"m80.833 161.667 40.25 40.249 40.584 40.584 42.68-42.68 38.153-38.153-80.833-80.834z\"/><path d=\"M161.667 80.833H80.833v80.834h80.834z\"/><path fill=\"#27282C\" d=\"M312.036 160.523V138.23l7.392-8.69 21.661 30.983h18.715l-29.103-40.998 27.188-31.947h-17.37l-27.553 32.756h-.93V87.578h-15.612v72.945h15.612Zm59.243-68.949v13.794h-8.893v11.176h8.893v28.967c0 10.813 5.482 15.214 19.336 15.214 2.53.004 5.057-.216 7.549-.657V149.2a36.38 36.38 0 0 1-4.446.252c-5.119 0-7.393-2.324-7.393-7.326v-25.582h11.839v-11.171h-11.839V91.574H371.28Zm64.315 70.11c17.522 0 28.072-10.812 28.072-29.017 0-18.043-10.701-29.012-28.072-29.012s-28.073 11.015-28.073 29.012c0 18.15 10.545 29.018 28.073 29.018Zm0-11.625c-8.064 0-12.617-6.367-12.617-17.392 0-10.913 4.598-17.335 12.617-17.335 7.958 0 12.611 6.417 12.611 17.335 0 11.02-4.598 17.392-12.611 17.392Zm40.37 10.459h15.047v-31.135c0-7.831 5.634-12.637 13.855-12.637 2.43 0 5.947.405 7.134.809v-12.94c-1.288-.404-3.825-.657-5.891-.657-7.236 0-13.132 4.194-14.633 9.752h-.93v-8.842H475.97v55.655l-.005-.005Z\"/></svg> @enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sprite", "ktor"],
  "description": "Diagramme UML représentant un sprite avec des fonctions de dessin SVG.",
  "source": "@startuml sprite ktor <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"243\" preserveAspectRatio=\"xMidYMid\">...</svg> @enduml"
}

,{
  "prompt": "@startuml\nautonumber \"<b>[00]\"\nparticipant Master as m\nparticipant Worker as w...",
  "code": "@startuml\nautonumber \"<b>[00]\"\nparticipant Master as m\nparticipant Worker as w...\nm->m : files = list_directory()...",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "sequence",
    "diagramme UML",
    "comparaison de performances"
  ],
  "description": "Ce diagramme décrit un processus de comparaison de performances entre deux processeurs : Master et Worker. Le Master charge les fichiers, les divise en groupes égaux et attribue le premier groupe au Worker.",
  "source": "@startuml..."
}
,{
  "prompt": "@startuml\n' configures the library\ngo\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n\n' loads the library's bootstrap\ngo\n!include $LIB_BASE_LOCATION/bootstrap.puml\n\n' loads the package bootstrap\ngo\ninclude('fontawesome-6/bootstrap')\n\n' loads the Item which embeds the element PesoSign\ngo\ninclude('fontawesome-6/Solid/PesoSign')\n\n' renders the element\ngo\nPesoSign('PesoSign', 'Peso Sign', 'an optional tech label', 'an optional description')\n@enduml",
  "code": "@startuml\n' configures the library\ngo\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n\n' loads the library's bootstrap\ngo\n!include $LIB_BASE_LOCATION/bootstrap.puml\n\n' loads the package bootstrap\ngo\ninclude('fontawesome-6/bootstrap')\n\n' loads the Item which embeds the element PesoSign\ngo\ninclude('fontawesome-6/Solid/PesoSign')\n\n' renders the element\ngo\nPesoSign('PesoSign', 'Peso Sign', 'an optional tech label', 'an optional description')\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["fontawesome", "plantuml", "solid", "peso"],
  "description": "Diagramme UML représentant l'élément PesoSign avec les caractéristiques de la bibliothèque fontawesome-6.",
  "source": "https://github.com/tmorin/plantuml-libs"
}
,{
  "prompt": "",
  "code": "@startuml\nhide circle\nhide stereotype\nclass User {\n    + id : Long\n    + name : String\n    + email : String\n    + password : String\n    --\n}\nclass Company {\n    + id : Long\n    + name : String\n    + email : String\n    + password : String\n    --\n}\nclass Offer {\n    + id : Long\n    + departureCity : String\n    + arrivalCity : String\n    + departureTime : DateTime\n    + arrivalTime : DateTime\n    + subscriptionStart : Date\n    + subscriptionEnd : Date\n    + description : String\n    + capacity : int\n    --\n}\nclass Subscription {\n    + id : Long\n    + dateSubscribed : DateTime\n    + status : String\n    --\n}\nclass Demand {\n    + id : Long\n    + departureCity : String\n    + arrivalCity : String\n    + desiredTime : DateTime\n    + desiredPeriodStart : Date\n    + desiredPeriodEnd : Date\n    + status : String\n    --\n}\nclass UserDemandInterest {\n    + id : Long\n    + dateInterested : DateTime\n    --\n}\n' Bridging entity for many-to-many between User and Demand'\nclass UserDemandInterest {\n    + id : Long\n    + dateInterested : DateTime\n    --\n}\n'' Associations'\n'' Company -- Offer'\nCompany \"1\" -- \"0..*\" Offer : creates\n' Offer -- Subscription'\nOffer \"1\" -- \"0..*\" Subscription : has\n' User -- Subscription'\nUser \"1\" -- \"0..*\" Subscription : subscribes to\n' The creator relationship: A user can create many demands'\nUser \"1\" -- \"0..*\" Demand : creates\n' The bridging entity for interest in demands'\nUser \"1\" -- \"0..*\" UserDemandInterest : is interested in\nDemand \"1\" -- \"0..*\" UserDemandInterest : has interest from\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "User",
    "Company",
    "Offer",
    "Subscription",
    "Demand",
    "UserDemandInterest"
  ],
  "description": "Diagramme de classes montrant les relations entre les entités User, Company, Offer, Subscription et Demand.",
  "source": ""
}
,{
  "prompt": "Le code UML ci-dessus",
  "code": "@startuml...@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "plantuml",
    "diagramme",
    "uml",
    "component"
  ],
  "description": "Ce diagramme UML représente les relations entre différentes artefacts et images Docker utilisés dans un projet Helm. Il montre également les dépendances entre ces artefacts.",
  "source": "@startuml...@enduml"
}
,{
  "prompt": "@startuml...@enduml",
  "code": "@startuml\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('fontawesome-6/bootstrap')\ninclude('fontawesome-6/Regular/FaceKiss')\nFaceKass('FaceKiss', 'Face Kiss', 'an optional tech label', 'an optional description')\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "plantuml", 
    "fontawesome", 
    "bootstrap"
  ],
  "description": "Diagramme de classe utilisant la bibliothèque Font Awesome, qui définit un élément FaceKiss.",
  "source": "https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution/bootstrap.puml"
}
,{
  "prompt": "Le code PlantUML ci-dessus",
  "code": "@startuml\n' configures the library\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n\n' loads the library's bootstrap\n!include $LIB_BASE_LOCATION/bootstrap.puml\n\n' loads the package bootstrap\ninclude('material-4/bootstrap')\n\n' loads the Item which embeds the element DirectionsBike\ninclude('material-4/Maps/DirectionsBike')\n\n' renders the element\nDirectionsBike('DirectionsBike', 'Directions Bike', 'an optional tech label', 'an optional description')\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["plantuml", "uml", "sequence", "usecase", "class", "component"],
  "description": "Ce diagramme UML charge un élément de type DirectionsBike.",
  "source": "https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution/bootstrap.puml"
}
,{
  "prompt": "PlantUML",
  "code": "@startuml\n' configures the library\n!global $INCLUSION_MODE=\"local\"\n!global $LIB_BASE_LOCATION=\"../..\"\n\n' loads the library's bootstrap\n!include $LIB_BASE_LOCATION/bootstrap.puml\n\n' loads the package bootstrap\ninclude('simpleicons-14/bootstrap')\n\n' loads the Item which embeds the element Paritysubstrate\ninclude('simpleicons-14/P/Paritysubstrate')\n\n' renders the element\nParitysubstrate('Paritysubstrate', 'Paritysubstrate', 'an optional tech label', 'an optional description')\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "plantuml",
    "diagramme",
    "uml",
    "composant",
    "élément"
  ],
  "description": "ce diagramme définit un composant PlantUML qui charge une bibliothèque et ses éléments associés",
  "source": "https://github.com/plantuml/plantuml-include"
}
,{
  "prompt": "Diagramme UML utilisant PlantUML",
  "code": "@startuml\n' configures the library\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n' loads the library's bootstrap\n!include $LIB_BASE_LOCATION/bootstrap.puml\n' loads the package bootstrap\ninclude('fontawesome-6/bootstrap')\n' loads the Item which embeds the element GoodreadsG\ninclude('fontawesome-6/Brands/GoodreadsG')\n' renders the element\nGoodreadsG('GoodreadsG', 'Goodreads G', 'an optional tech label', 'an optional description')\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["uml", "plantuml", "component"],
  "description": "Création d'un composant UML représentant l'élément GoodreadsG avec un label technique et une description.",
  "source": "https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution"
}
,{
  "prompt": "@startuml Database\n!theme crt-amber\nnamespace LunarDB.QueryData {\n struct Database {",
  "code": "@startuml Database\n!theme crt-amber\nnamespace LunarDB.QueryData {\n struct Database {\n    + operation_type : Primitives::EDatabaseOperationType\n    + name : std::string\n    + backup_path : std::optional<std::string>\n}\n}",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["uml", "plantuml", "database", "querydata"],
  "description": "Modèle de classe représentant une base de données avec ses propriétés.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "@startuml\n' configures the library\n!global $INCLUSION_MODE=\"local\"\n!global $LIB_BASE_LOCATION=\"../..\"\n\n' loads the library's bootstrap\n!include $LIB_BASE_LOCATION/bootstrap.puml\n\n' loads the package bootstrap\ninclude('simpleicons-14/bootstrap')\n\n' loads the Item which embeds the element Securityscorecard\ninclude('simpleicons-14/S/Securityscorecard')\n\n' renders the element\nSecurityscorecard('Securityscorecard', 'Securityscorecard', 'an optional tech label', 'an optional description')\n@enduml",
  "code": "@startuml\n!global $INCLUSION_MODE=\"local\"\n!global $LIB_BASE_LOCATION=\"../..\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('simpleicons-14/bootstrap')\ninclude('simpleicons-14/S/Securityscorecard')\nSecurityscorecard('Securityscorecard', 'Securityscorecard', 'an optional tech label', 'an optional description')\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["securityscorecard", "simpleicons-14", "bootstrap"],
  "description": "Diagramme UML qui définit une composante SecurityScorecard avec ses paramètres",
  "source": "https://github.com/plantuml-stdlib/C4/blob/master/docs/README.md"
}
,{
  "prompt": "",
  "code": "@startuml\n'' configures the library\n!global $LIB_BASE_LOCATION=\\'''https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\\'''\\n\n'' loads the library's bootstrap\n!include $LIB_BASE_LOCATION/bootstrap.puml\\n\n'' loads the package bootstrap\ninclude('fontawesome-6/bootstrap')\\n\n'' loads the Item which embeds the element BasketShopping\ninclude('fontawesome-6/Solid/BasketShopping')\\n\n'' renders the element\\nBasketShopping('BasketShopping', 'Basket Shopping', 'an optional tech label', 'an optional description')\\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["uml", "plantuml", "fontawesome"],
  "description": "Ce diagramme UML définit un composant nommé BasketShopping, qui inclut une icône de shopping, avec des étiquettes et descriptions optionnelles.",
  "source": ""
}
,{
  "prompt": "@startuml \n ... (code omis) ...\n @enduml",
  "code": "@startuml\nMCU -> Bootloader: reset\nactivate Bootloader\nBootloader -> Bootloader: Recover? (no)\nBootloader -> Bootloader: New version? (no)\nBootloader -> Application: Jump to primary slot\ndeactivate Bootloader\n\nactivate Application\nnote right: This is the current version of the firmware\nApplication -> Application: OTA procedure\nnote right: Download a new firmware version and\\n store it in secondary slot\nApplication -> MCU: Reset\ndeactivate Application\n@enduml",
  "langage": "plantuml",
  "type": "sequence",
  "tags": ["sequence", "diagramme", "UMl", "fichier de démarrage", "loader", "application"],
  "description": [
    "Ce diagramme décrit l'initialisation d'un système embarqué.",
    "Il montre les échanges entre le microcontrôleur, le bootloader et l'application."
  ],
  "source": "@startuml"
}
,{
  "prompt": "@startuml",
  "code": "",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["uml", "sequence", "diagramme"],
  "description": "Le diagramme décrit l'interaction entre un MCU et un bootloader, suivi de l'exécution d'un processus OTA par une application.",
  "source": "@startuml"
}
,{
  "prompt": "@startuml",
  "code": "@startuml\nMCU -> Bootloader: reset\nactivate Bootloader\nBootloader -> Bootloader: Recover? (no)\nBootloader -> Bootloader: New version? (no)\nBootloader -> Application: Jump to primary slot\ndeactivate Bootloader\n\nactivate Application\nnote right: This is the current version of the firmware\nApplication -> Application: OTA procedure\nnote right: Download a new firmware version and\\n store it in secondary slot\nApplication -> MCU: Reset\ndeactivate Application\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "diagramme de séquence", "mise à jour du firmware"],
  "description": "Ce diagramme illustre le processus de mise à jour du firmware d'un système, en particulier la procédure OTA (Over-The-Air).",
  "source": "@startuml"
}
,{
  "prompt": "@startuml",
  "code": "@startuml\nMCU -> Bootloader: reset\nactivate Bootloader\nBootloader -> Bootloader: Recover? (no)\nBootloader -> Bootloader: New version? (no)\nBootloader -> Application: Jump to primary slot\ndeactivate Bootloader\n\nactivate Application\nnote right: This is the current version of the firmware\nApplication -> Application: OTA procedure\nnote right: Download a new firmware version and\\n store it in secondary slot\nApplication -> MCU: Reset\ndeactivate Application\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["uml", "sequence", "diagramme"],
  "description": "Le diagramme décrit le processus de mise à jour d'un firmware via OTA (Over The Air) sur un appareil.",
  "source": "@startuml"
}
,{
  "prompt": "Création d'un diagramme UML représentant une entité matérialisée",
  "code": "@startuml\nsprite $skip_next [48x48/16] {\n...\n}\n!define MATERIAL_SKIP_NEXT(_alias)\n!define MATERIAL_SKIP_NEXT(_alias, _label)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape, _color)\nskinparam folderBackgroundColor<<MATERIAL SKIP NEXT>> White\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": [
    "sprite",
    "ENTITY",
    "rectangle",
    "black",
    "skip_next",
    "material",
    "Material Skip Next"
  ],
  "description": "Création d'une entité représentant un matériel avec des définitions de macro et une modification du style pour les chemins dans la couleur blanche.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "@startuml ...\n!define ...\n... @enduml",
  "code": "@startuml\nsprite $skip_next [48x48/16] {\n...\n}\ndefine MATERIAL_SKIP_NEXT(_alias) ENTITY(rectangle,black,skip_next,_alias,MATERIAL SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label) ENTITY(rectangle,black,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape) ENTITY(_shape,black,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape, _color) ENTITY(_shape,_color,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\nskinparam folderBackgroundColor<<MATERIAL SKIP NEXT>> White\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["PlantUML", "sprite", "ENTITY", "rectangle", "black"],
  "description": "Diagramme UML représentant un sprite et des définitions de macro pour l'affichage d'un rectangle noir.",
  "source": "@startuml ...\n!define ...\n... @enduml"
}
,{
  "prompt": "Diagramme UML en utilisant PlantUML",
  "code": "@startuml\nsprite $skip_next [48x48/16] {\n...\n}\ndefine MATERIAL_SKIP_NEXT(_alias) ENTITY(rectangle,black,skip_next,_alias,MATERIAL SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label) ENTITY(rectangle,black,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape) ENTITY(_shape,black,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape, _color) ENTITY(_shape,_color,skip_next,_label, _alias,MATERIAL SKIP_NEXT)\nskinparam folderBackgroundColor<<MATERIAL SKIP_NEXT>> White\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["PlantUML", "sprite", "ENTITY", "define", "skinparam"],
  "description": "Un diagramme UML en utilisant PlantUML pour définir un sprite nommé skip_next.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "@startuml\nsprite $skip_next [48x48/16] {\n...}\n!define MATERIAL_SKIP_NEXT(_alias) ENTITY(rectangle,black,skip_next,_alias,MATERIAL SKIP NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label) ENTITY(rectangle,black,skip_next,_label, _alias,MATERIAL SKIP NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape) ENTITY(_shape,black,skip_next,_label, _alias,MATERIAL SKIP NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape, _color) ENTITY(_shape,_color,skip_next,_label, _alias,MATERIAL SKIP NEXT)\nskinparam folderBackgroundColor<<MATERIAL SKIP NEXT>> White\n@enduml",
  "code": "@startuml\nsprite $skip_next [48x48/16] {\n...}\n!define MATERIAL_SKIP_NEXT(_alias) ENTITY(rectangle,black,skip_next,_alias,MATERIAL SKIP NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label) ENTITY(rectangle,black,skip_next,_label, _alias,MATERIAL SKIP NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape) ENTITY(_shape,black,skip_next,_label, _alias,MATERIAL SKIP NEXT)\n!define MATERIAL_SKIP_NEXT(_alias, _label, _shape, _color) ENTITY(_shape,_color,skip_next,_label, _alias,MATERIAL SKIP NEXT)\nskinparam folderBackgroundColor<<MATERIAL SKIP NEXT>> White\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["sprite", "material", "skipnext"],
  "description": "Ce diagramme UML définit un sprite nommé skip_next et définit des macros pour créer des entités rectangles avec ce sprite.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "Analyser le code PlantUML",
  "code": "@startuml\nsprite $ebanx [102x18/16] {\n...\n}\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["diagramme UML", "component"],
  "description": "Diagramme UML représentant un composant graphique.",
  "source": "https://example.com/code-plantuml"
}
,{
  "prompt": "# Generate with java -jar plantuml.jar -txt telemetry-seq.puml\n# plantuml.jar can be downloaded from plantuml.com",
  "code": "@startuml\ntitle Chef Workstation App - Telemetry Service\n\nactor Human\nHuman -> \"CLI Tool\" : execute\n\"CLI Tool\" -> CWA : POST /telemetry\n\nactivate CWA\nCWA --> \"CLI Tool\" : http response 201\ndeactivate CWA\nCWA -> CWA : prepare envelope\nCWA -> \"telemetry.chef.io\" : POST payload\n\nactivate \"telemetry.chef.io\"\n\"telemetry.chef.io\" -> CWA : http response\ndeactivate \"telemetry.chef.io\"\n@enduml",
  "langage": "plantuml",
  "type": "sequence",
  "tags": [
    "UML",
    "séquence",
    "diagramme",
    "Chef Workstation App",
    "Telemetry Service"
  ],
  "description": "Ce diagramme UML représente la séquence d'exécution de la commande CLI Tool qui envoie une requête POST à l'API Telemetry.",
  "source": "# Generate with java -jar plantuml.jar -txt telemetry-seq.puml\n# plantuml.jar can be downloaded from plantuml.com"
}
,{
  "prompt": "@startuml\nleft to right direction\nskinparam shadowing false\n...\n@enduml",
  "code": "@startuml\nleft to right direction\nskinparam shadowing false\ninterface Struct\ninterface Atom\ninterface Empty {\n  + {static} list(): EmptyList\n  + {static} set(): EmptySet\n}\ninterface EmptySet {\n  + {static} invoke(): EmptySet\n}\ninterface Set {\n  + unfoldedArray: Array<Term>\n  + unfoldedList: List<Term>\n  + unfoldedSequence: Sequence<Term>\n  + toArray(): Array<Term>\n  + toList(): List<Term>\n  + toSequence(): Sequence<Term>\n  + {static} empty(): Set\n  + {static} of(**varargs** items: Term): Set\n  + {static} of(items: Iterable<Term>): Set\n}\nStruct <|-- Atom\nStruct <|-- Set\nAtom <|-- Empty\nEmpty <|-- EmptySet\nSet <|-- EmptySet\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["interface", "struct", "atom", "empty", "set"],
  "description": "Diagramme d'interfaces UML définissant les interfaces Struct, Atom et Set ainsi que leurs relations.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^\n}\n@enduml",
  "code": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^\n}\n@enduml",
  "langage": "PlantUML",
  "type": "sequence", 
  "tags": [
    "plantuml",
    "notation",
    "texte",
    "bouton",
    "radio",
    "case à cocher",
    "droplist"
  ],
  "description": "Diagramme de notation PlantUML représentant différents éléments graphiques tels que des boutons, des cases à cocher et des listes déroulantes.",
  "source": "https://github.com/plantuml/plantuml/blob/master/src/main/resources/diagrams/notation.pu"
}
,{
  "prompt": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^",
  "code": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["button", "radio", "box", "droplist"],
  "description": "Un diagramme UML présentant un formulaire avec des éléments de saisie et de sélection.",
  "source": "@startuml"
}
,{
  "prompt": "",
  "code": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^\n}\n@enduml",
  "langage": "plantuml",
  "type": "component",
  "tags": ["plantuml", "component", "diagramme"],
  "description": "Ce diagramme représente un composant UML avec divers éléments tels que des boutons, des case à cocher et des champs de texte.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^\\n}\n@enduml",
  "code": "@startuml\nsalt\n{\n  Just plain text\n  [This is my button]\n  ()  Unchecked radio\n  (X) Checked radio\n  []  Unchecked box\n  [X] Checked box\n  \"Enter text here   \"\n  ^This is a droplist^\\n}\n@enduml",
  "langage": "PlantUML",
  "type": "usecase",
  "tags": ["plantuml", "uml", "diagramme"],
  "description": "Diagramme d'utilisation montrant un formulaire avec des champs et des boutons.",
  "source": "https://github.com/plantuml/plantuml/wiki"
}
,{
  "prompt": "@startuml\n'https://plantuml.com/use-case-diagram\n :Manager: as Admin\nAdmin -->(Create the Course)\n@enduml",
  "code": "@startuml\n'https://plantuml.com/use-case-diagram\n :Manager: as Admin\nAdmin -->(Create the Course)\n@enduml",
  "langage": "PlantUML",
  "type": "usecase",
  "tags": [
    "use_case_diagram",
    "uml",
    "plantuml"
  ],
  "description": "Diagramme d'utilisation représentant les interactions entre l'administrateur et la création d'un cours.",
  "source": "https://plantuml.com/use-case-diagram"
}
,{
  "prompt": "PlantUML",
  "code": "@startuml\n... (le code entier)\n@enduml",
  "langage": "UML",
  "type": "class",
  "tags": [
    "UML",
    "diagramme de classes",
    "Patron",
    "Library",
    "Checkable",
    "LibraryCard",
    "Checkout"
  ],
  "description": "Ce diagramme UML représente une structure hiérarchique des entités d'une bibliothèque, notamment les patrons, les livres et les prêts.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "@startuml\n...\n@enduml",
  "code": "@startuml\n...\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "UML",
    "diagramme de classes",
    "classes",
    "relations"
  ],
  "description": "Diagramme UML montrant les relations entre des classes telles que Patron, Library, Checkable et d'autres.",
  "source": "@startuml\n...\n@enduml"
}
,{
  "prompt": "Diagramme UML des classes pour les traitements d'arrays sur GPU",
  "code": "@startuml\ntitle Диаграмма классов модуля \"Arrays\"\nend title\n...\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "array", 
    "GPU", 
    "traitement", 
    "C++", 
    "cublas", 
    "cuda"
  ],
  "description": "Le diagramme UML représente les classes pour les traitements d'arrays sur GPU, notamment la classe ArrayHelper qui contient des méthodes statiques pour les opérations sur les arrays.",
  "source": "https://github.com/PlantUML/plantuml-include"
}
,{
  "prompt": "@startuml\n\ntitle Диаграмма классов модуля \"Arrays\"\nend title\n... (code entier)\n@enduml",
  "code": "@startuml\n\ntitle Диаграмма классов модуля \"Arrays\"\nend title\n' Параметры запуска функции обработки массива на GPU\nstruct ArrayGpuProcessingParams<T>\n{\n    + unsigned deviceId\n    + T* dev_arr\n    + size_t indStart\n    + size_t indEnd\n    + unsigned blocksNum\n    + unsigned threadsNum\n\n    + void Print()\n}\n... (tous les détails)\n@enduml",
  "langage": "UML",
  "type": "class",
  "tags": ["Arrays", "GPU", "C++", "PlantUML"],
  "description": "Ce diagramme de classes représente le module \"Arrays\" qui fournit des fonctionnalités d'algorithmes linéaires pour des arrays, y compris la sommation, le produit scalaire, etc. Il utilise les technologies CUDA et OpenMP.",
  "source": "@startuml\n\ntitle Диаграмма классов модуля \"Arrays\"\nend title\n... (code entier)\n@enduml"
}
,{
  "prompt": "@startuml\n... (code PlantUML)\n@enduml",
  "code": "@startuml\n...\n@enduml",
  "langage": "C++",
  "type": "class",
  "tags": [
    "UML", 
    "diagramme de classe", 
    "C++", 
    "GPU", 
    "CUDA"
  ],
  "description": "Ce diagramme UML décrit les classes et leurs méthodes pour gérer des tableaux en mémoire vive (RAM) et sur un GPU.",
  "source": "@startuml\n... (code PlantUML)\n@enduml"
}
,{
  "prompt": "SQ",
  "code": "@startuml SQ\nautonumber\ntitle SD10.5. Xuất tệp Excel\nactor \"Actor\" as actor\nboundary \"Transaction\\nView\" as view\ncontrol \"Transaction\\nController\" as controller\ncontrol \"ExcelService\" as service\nentity \"Transaction\\nRepository\" as model\ndatabase \"Database\" as database\nactivate actor\nactor -> view : click export button\nactivate view\nview -> view: open confirmation dialog\nalt click confirm\nview -> controller : call api POST /export-excel\nactivate controller\ncontroller -> model : inject repository\nactivate model\nmodel -> database : find data\nactivate database\ndatabase --> model : return data\ndeactivate database\nmodel --> controller : return list objects\ndeactivate model\ncontroller -> service: process data\nactivate service\nservice --> controller : callback\ndeactivate service\ncontroller --> view : return file Excel\ndeactivate controller\nview -> actor: download file Excel\ndeactivate actor\nelse click cancel\nview -> view: close dialog\nactivate view\ndeactivate view\ndeactivate view\nend\n@enduml",
  "langage": "plantuml",
  "type": "sequence",
  "tags": [
    "sequence",
    "uml",
    "diagramme",
    "export_excel"
  ],
  "description": "Ce diagramme UML décrit l'interaction entre différents composants d'une application pour exporter des données dans un fichier Excel.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "@startuml SQ\nautonumber\ntitle SD10.5. Xuất tệp Excel ...\n@enduml",
  "code": "@startuml SQ\nautonumber\ntitle SD10.5. Xuất tệp Excel ...\nactor \"Actor\" as actor\nboundary \"Transaction\\nView\" as view\ncontrol \"Transaction\\nController\" as controller\ncontrol \"ExcelService\" as service\nentity \"Transaction\\nRepository\" as model\ndatabase \"Database\" as database\nactivate actor\nactor -> view : click export button\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "uml",
    "diagramme de séquence",
    "transaction",
    "vue",
    "contrôleur",
    "service",
    "répertoire",
    "base de données"
  ],
  "description": "Ce diagramme UML décrit la séquence d'opérations pour exporter un fichier Excel. Il montre les interactions entre les différents acteurs et objets du système.",
  "source": "https://github.com/plantuml/plantuml#readme"
}
,{
  "prompt": "",
  "code": "@startuml\n...\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "PatientProfile",
    "PatientService",
    "MedicalRecordService",
    "Patient",
    "MedicalRecord",
    "Condition",
    "Allergy"
  ],
  "description": "Diagramme de classes montrant les relations entre PatientProfile, PatientService, MedicalRecordService et leurs attributs.",
  "source": ""
}
,{
  "prompt": "Code UML de séquence",
  "code": "@startuml\nparticipant \"Aplication\" as CCode\nparticipant \"Assembly Code\" as AssemblyCode\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "uml",
    "séquence",
    "diagramme",
    "programmation",
    "assembleur"
  ],
  "description": "Diagramme UML de séquence représentant l'appel à une fonction d'extraction de token entre une application et un code assembleur.",
  "source": "https://github.com/plantuml-stdlib/diagrams/tree/master/sequence"
}
,{
  "prompt": "@startuml !include <awslib/AWSCommon> ... @enduml",
  "code": "@startuml\n!include <awslib/AWSCommon>\n... \n@enduml",
  "langage": "puml",
  "type": "sequence",
  "tags": [
    "AWS",
    "EC2",
    "SMADEX",
    "USER",
    "AD_EXCHANGE"
  ],
  "description": "Diagramme de séquence représentant l'interaction entre différents composants (Smadex, Users, Ad Exchange et Mobile).",
  "source": "@startuml !include <awslib/AWSCommon> ... @enduml"
}
,{
    "prompt": "@startuml\n!include <awslib/AWSCommon>\n!include <awslib/AWSSimplified.puml>\n!include <awslib/Compute/all.puml>\n!include <awslib/mobile/all.puml>\n!include <awslib/general/all.puml>\n\nEC2(Smadex, \"Smadex Service\", \" \")\nUsers(Users, \"Users\", \" \")\nTraditionalServer(AdExchange, \"Ad Exchange\", \" \")\nMobile(Mobile, \"Publisher app or web\", \" \")\n\nUsers -down-> Mobile: 1. Visits\nMobile -right-> AdExchange: 2. Start auction\nAdExchange -right-> Smadex: 3. Bid request / response\nSmadex -left-> Mobile: 4. Show Ad\nUsers -right-> Smadex: 5. Impression / click / install / event {request id}\n@enduml",
    "code": "PlantUML code",
    "langage": "plantuml",
    "type": "sequence",
    "tags": ["AWS", "EC2", "Smadex", "Ad Exchange"],
    "description": "Diagramme de séquence montrant le flux de données entre les différents composants d'une application AWS.",
    "source": "https://github.com/plantuml/plantuml"
}
,
{
  "prompt": "@startuml\n/'la autora es imane Alouane'/\n",
  "code": "@startuml\n/'la autora es imane Alouane'/\n...\n@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": [
    "conversacion",
    "mensaje",
    "entidad",
    "asociacion"
  ],
  "description": "Diagramme UML représentant les classes de conversación et de message, avec leurs propriétés et relations.",
  "source": "@startuml\n...' la autora es imane Alouane'/\n..."
}
,{
  "prompt": "",
  "code": "@startuml\nautonumber...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": [
    "UML", 
    "diagramme de séquence", 
    "sequence", 
    "PlantUML"
  ],
  "description": "Ce diagramme UML illustre la création d'une pièce dans un bâtiment, en s'appuyant sur les services de contrôle et de données. Il met en évidence l'interaction entre différents acteurs et composants.",
  "source": ""
}
,{
  "prompt": "Création d'un diagramme UML pour la gestion des employés",
  "code": "@startuml\nskinparam classAttributeIconSize 0\nleft to right direction\n... (le reste du code)",
  "langage": "UML (Unified Modeling Language)",
  "type": "class",
  "tags": ["diagramme", "UML", "gestion des employés"],
  "description": "Ce diagramme représente les classes et les relations entre elles pour gérer les informations sur les employés.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "@startuml skinparam classAttributeIconSize 0 left to right direction ... @enduml",
  "code": "@startuml\nskinparam classAttributeIconSize 0\nleft to right direction\n...\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "UML",
    "diagramme de classe",
    "classes"
  ],
  "description": "Ce diagramme UML représente les classes et leurs relations dans un système de gestion d'employés. Les classes représentent les objets du système, telles que l'interface graphique utilisateur, le contrôleur, la store employé, l'employé lui-même et la société.",
  "source": "@startuml skinparam classAttributeIconSize 0 left to right direction ... @enduml"
}
,{
  "prompt": "",
  "code": "@startuml\nskinparam classAttributeIconSize 0\nleft to right direction\n\nclass RegisterEmployeeUI {\n}\n\nclass RegisterEmployeeController {\n+getEmployeeRoles()\n+registerEmployee(name, address, phone number, e-mail, Citizen Card number)\n+setRole(role)\n+saveEmployee()\n}\n\nclass EmployeeStore {\n+registerEmployee(name, address, phone number, e-mail, Citizen Card number)\n+setRole(role)\n+saveEmployee(employee)\n+validateEmployee(employee)\n+addEmployee(employee)\n}\n\nclass Employee {\n-name\n-address\n-phoneNumber\n-email\n-citizenCardNumber\n-role\n+getName\n+getAddress\n+getPhoneNumber\n+getEmail\n+getCitizenCardNumber\n+getRole\n+setName\n+setAddress\n+setPhoneNumber\n+setEmail\n+setCitizenCardNumber\n+setRole\n}\n\nclass Company {\n}\nRegisterEmployeeUI ..> RegisterEmployeeController\nRegisterEmployeeController ..> Company\nRegisterEmployeeController ..> Employee\nCompany \"1\"--\"1\" EmployeeStore : uses >\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["register", "employee", "UI", "controller", "store", "company"],
  "description": "Diagramme UML montrant les relations entre les composants d'une application de gestion d'employés.",
  "source": "Code PlantUML"
}
,{
  "prompt": "@startuml\nskinparam classAttributeIconSize 0\nleft to right direction\n\nclass RegisterEmployeeUI {\n}\nclass RegisterEmployeeController {\n  +getEmployeeRoles()\n  +registerEmployee(name, address, phone number, e-mail, Citizen Card number)\n  +setRole(role)\n  +saveEmployee()\n}\nclass EmployeeStore {\n  +registerEmployee(name, address, phone number, e-mail, Citizen Card number)\n  +setRole(role)\n  +saveEmployee(employee)\n  +validateEmployee(employee)\n  +addEmployee(employee)\n}\nclass Employee {\n  -name\n  -address\n  -phoneNumber\n  -email\n  -citizenCardNumber\n  -role\n  +getName\n  +getAddress\n  +getPhoneNumber\n  +getEmail\n  +getCitizenCardNumber\n  +getRole\n  +setName\n  +setAddress\n  +setPhoneNumber\n  +setEmail\n  +setCitizenCardNumber\n  +setRole\n}\nclass Company {\n}\nRegisterEmployeeUI ..> RegisterEmployeeController\nRegisterEmployeeController ..> Company\nRegisterEmployeeController ..> Employee\nCompany \"1\"--\"1\" EmployeeStore : uses >\n@enduml",
  "code": "@startuml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["register", "employee", "ui", "controller", "store"],
  "description": "Ce diagramme UML décrit la structure de classes pour un système d'enregistrement d'employés, y compris les classes RegisterEmployeeUI, RegisterEmployeeController, EmployeeStore et Employee.",
  "source": "PlantUML"
}
,{
  "prompt": "@startuml sequenceDiagram.puml\n...\n@enduml",
  "code": "@startuml sequenceDiagram.puml\nactor User\nUser -> ui.FrontPageController: click #addMoviebtn\nui.FrontPageController -> FXMLLoader: load(\"/movielibrary/ui/AddMoviePage.fxml\")\nFXMLLoader -> ui.AddMoviePageController: initialize AddMoviePageController\nui.FrontPageController -> Stage: display AddMoviePage.fxml scene\nUser -> ui.AddMoviePageController: input movie details and click #addMoviebtn\nui.AddMoviePageController -> ui.AddMoviePageController: validate input fields\nalt Validation Error\n    ui.AddMoviePageController -> User: display error alert with validation message\nelse Valid Input\n    ui.AddMoviePageController -> Movie: new Movie(title, movieLength, description)\n    ui.AddMoviePageController -> ui.RemoteMovieLibraryAccess: addMovie(newMovie)\n\n    ui.RemoteMovieLibraryAccess -> ObjectMapper: writeValueAsString(newMovie)\n    ui.RemoteMovieLibraryAccess -> HttpClient: send PUT request to /movielibrary/movies with JSON body\n\n    alt Success - 201 Created\n        HttpClient -> ui.RemoteMovieLibraryAccess: response 201 Created\n        ui.RemoteMovieLibraryAccess -> ui.AddMoviePageController: confirm success\n        ui.AddMoviePageController -> User: display success alert \"New movie is added!\"\n        ui.AddMoviePageController -> ui.AddMoviePageController: returnToFrontPage()\n        ui.AddMoviePageController -> FXMLLoader: load(\"/movielibrary/ui/FrontPage.fxml\")\n        FXMLLoader -> ui.FrontPageController: initialize FrontPageController\n        ui.AddMoviePageController -> Stage: display FrontPage.fxml scene\n    else Failure - 409 Conflict\n        HttpClient -> ui.RemoteMovieLibraryAccess: response 409 Conflict\n        ui.RemoteMovieLibraryAccess -> ui.AddMoviePageController: throw IllegalStateException\n        ui.AddMoviePageController -> User: display error alert \"Movie title already exists!\"\n    else Other Failure\n        HttpClient -> ui.RemoteMovieLibraryAccess: response other status code\n        ui.RemoteMovieLibraryAccess -> ui.AddMoviePageController: throw RuntimeException\n        ui.AddMoviePageController -> User: display error alert \"Failed to add movie\"\n    end\nend",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "uml", "diagramme", "java", "addmovie"],
  "description": "Diagramme de séquence montrant l'ajout d'un nouveau film dans une bibliothèque. L'utilisateur clique sur le bouton d'ajout, entre les informations du film et envoie la requête à la bibliothèque.",
  "source": "@startuml sequenceDiagram.puml\n...\n@enduml"
}
,{
  "prompt": "@startuml\nskinparam monochrome true\n... (le reste du code)",
  "code": "@startuml\nskinparam monochrome true\nskinparam packageStyle rectangle\n...\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "domaine",
    "modèle",
    "US7",
    "utilisateur",
    "personne",
    "propriété",
    "client",
    "adresse"
  ],
  "description": "Ce diagramme UML représente le modèle de domaine pour l'usine de commande US7. Il décrit les classes Utilisateur non enregistré, Personne, Propriété et Client.",
  "source": "@startuml\nskinparam monochrome true\n... (le reste du code)"
}
,{
  "prompt": "",
  "code": "@startuml\nskinparam monochrome true\nskinparam packageStyle rectangle\nskinparam shadowing false\nclass UnregisteredUser\nclass Person{\n    name\n    cardNumber\n    taxNumber\n    emailAddress\n    phoneNumber\n}\nclass Property\nclass Client {\n    password\n}\nclass Address{\n    street\n    cityName\n    districtName\n    stateAcronym\n    zipCode\n}\nUnregisteredUser \"1\" -- \"1\" Client: registered as >\nClient \"1\" -- \"1..*\" Property: buys/rents/sells >\nAddress \"1\" -- \"1\" Person : located at <\nClient --|> Person\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "domain model",
    "US7"
  ],
  "description": "Modèle de domaine décrivant les relations entre des classes telles que UnregisteredUser, Client, Person et Property.",
  "source": ""
}
,{
  "prompt": "Analyse du code PlantUML",
  "code": "@startuml\nsprite $frontapp [51x73/16] {\n...restant du code...\n} @enduml",
  "langage": "PlantUML",
  "type": "component", 
  "tags": ["diagramme", "uml", "plantuml"],
  "description": "Diagramme de composants UML représentant une application front-end.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "@startuml\n'https://plantuml.com/sequence-diagram\n!pragma layout smetana\nautonumber\nparticipant \" \" as HTTP\nbox \"SmartHome <<System (C4)>>\"\n    participant \"Backend\" as BE<<container (C4)>>\nend box\nHTTP o-> BE: GET /devices by room and temperature functionality\nactivate BE\nBE -->o HTTP: JSON 200\n@enduml",
  "code": "@startuml\n'https://plantuml.com/sequence-diagram\n!pragma layout smetana\nautonumber\nparticipant \" \" as HTTP\nbox \"SmartHome <<System (C4)>>\"\n    participant \"Backend\" as BE<<container (C4)>>\nend box\nHTTP o-> BE: GET /devices by room and temperature functionality\nactivate BE\nBE -->o HTTP: JSON 200\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "diagramme UML", "SmartHome", "Backend"],
  "description": "Diagramme de séquence représentant l'appel d'une API GET par le client HTTP vers le serveur Backend.",
  "source": "https://plantuml.com/sequence-diagram"
}
,{
  "prompt": "@startuml 'https://plantuml.com/sequence-diagram !pragma layout smetana autonumber participant \" \" as HTTP box \"SmartHome \\u<<System (C4)>>\" participant \"Backend\" as BE\\u<<container (C4)>>>> end box HTTP o-> BE: GET /devices by room and temperature functionality activate BE BE -->o HTTP: JSON 200 @enduml",
  "code": "@startuml 'https://plantuml.com/sequence-diagram !pragma layout smetana autonumber participant \" \" as HTTP box \"SmartHome \\u<<System (C4)>>\" participant \"Backend\" as BE\\u<<container (C4)>>>> end box HTTP o-> BE: GET /devices by room and temperature functionality activate BE BE -->o HTTP: JSON 200 @enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["uml", "plantuml", "sequence-diagram", "smart-home"],
  "description": "Le diagramme UML décrit une séquence de communication entre un client HTTP et le backend d'un système SmartHome. Le client envoie une requête GET pour récupérer des informations sur les appareils par pièce et température.",
  "source": "https://plantuml.com/sequence-diagram"
}

,{
    "prompt": "sequence-diagram",
    "code": "@startuml\n'https://plantuml.com/sequence-diagram\n!pragma layout smetana\nautonumber\nparticipant \" \" as HTTP\nbox \"SmartHome \\u<<System (C4)>>\"\n    participant \"Backend\" as BE\\u<<container (C4)>\">\nend box\nHTTP o-> BE: GET /devices by room and temperature functionality\nactivate BE\nBE -->o HTTP: JSON 200\n@enduml",
    "langage": "plantuml",
    "type": "sequence",
    "tags": [
        "UML",
        "sequencediagramme",
        "system"
    ],
    "description": "Ce diagramme UML représente une séquence d'événements entre le client HTTP et la partie Backend du système SmartHome.",
    "source": "https://plantuml.com/sequence-diagram"
}
,{
  "prompt": "@startuml title Connection Diagram (CandidateApp)_US3001 endumld",
  "code": "@startuml\ntitle Connection Diagram (CandidateApp)_US3001\n...\n@enduml",
  "langage": "plantuml",
  "type": "sequence",
  "tags": ["connection", "diagram", "candidateapp", "us3001"],
  "description": "Diagramme de séquence montrant la connexion entre le candidat et l'application CandidateApp.",
  "source": "@startuml title Connection Diagram (CandidateApp)_US3001 endumld"
}
,{
  "prompt": "",
  "code": "@startuml\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["communication", "connection", "diagramme UML"],
  "description": "Diagramme de séquence montrant la communication entre l'application CandidateApp et les services Core et FollowUpServer.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "",
  "code": "@startuml\nclass X86 <<unsafe>> <<static>> <<partial>> {\n}\nclass Bmi1 <<static>> {\n    + {static} IsBmi1Supported : bool <<get>>\n    + {static} andn_u32(a:uint, b:uint) : uint\n    + {static} andn_u64(a:ulong, b:ulong) : ulong\n    + {static} bextr_u32(a:uint, start:uint, len:uint) : uint\n    + {static} bextr_u64(a:ulong, start:uint, len:uint) : ulong\n    + {static} bextr2_u32(a:uint, control:uint) : uint\n    + {static} bextr2_u64(a:ulong, control:ulong) : ulong\n    + {static} blsi_u32(a:uint) : uint\n    + {static} blsi_u64(a:ulong) : ulong\n    + {static} blsmsk_u32(a:uint) : uint\n    + {static} blsmsk_u64(a:ulong) : ulong\n    + {static} blsr_u32(a:uint) : uint\n    + {static} blsr_u64(a:ulong) : ulong\n    + {static} tzcnt_u32(a:uint) : uint\n    + {static} tzcnt_u64(a:ulong) : ulong\n}\nX86 +-- Bmi1\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["UML", "sequence", "class", "association"],
  "description": "Le diagramme montre une classe X86 associée à la classe Bmi1.",
  "source": ""
}
,{
  "prompt": "@startuml\nclass X86 <<unsafe>> <<static>> <<partial>> {\n}\nclass Bmi1 <<static>> {\n    + {static} IsBmi1Supported : bool <<get>>\n    + {static} andn_u32(a:uint, b:uint) : uint\n    + {static} andn_u64(a:ulong, b:ulong) : ulong\n    + {static} bextr_u32(a:uint, start:uint, len:uint) : uint\n    + {static} bextr_u64(a:ulong, start:uint, len:uint) : ulong\n    + {static} bextr2_u32(a:uint, control:uint) : uint\n    + {static} bextr2_u64(a:ulong, control:ulong) : ulong\n    + {static} blsi_u32(a:uint) : uint\n    + {static} blsi_u64(a:ulong) : ulong\n    + {static} blsmsk_u32(a:uint) : uint\n    + {static} blsmsk_u64(a:ulong) : ulong\n    + {static} blsr_u32(a:uint) : uint\n    + {static} blsr_u64(a:ulong) : ulong\n    + {static} tzcnt_u32(a:uint) : uint\n    + {static} tzcnt_u64(a:ulong) : ulong\n}\nX86 +-- Bmi1\n@enduml",
  "code": "@startuml\nclass X86 <<unsafe>> <<static>> <<partial>> {\n}\nclass Bmi1 <<static>> {\n    + {static} IsBmi1Supported : bool <<get>>\n    + {static} andn_u32(a:uint, b:uint) : uint\n    + {static} andn_u64(a:ulong, b:ulong) : ulong\n    + {static} bextr_u32(a:uint, start:uint, len:uint) : uint\n    + {static} bextr_u64(a:ulong, start:uint, len:uint) : ulong\n    + {static} bextr2_u32(a:uint, control:uint) : uint\n    + {static} bextr2_u64(a:ulong, control:ulong) : ulong\n    + {static} blsi_u32(a:uint) : uint\n    + {static} blsi_u64(a:ulong) : ulong\n    + {static} blsmsk_u32(a:uint) : uint\n    + {static} blsmsk_u64(a:ulong) : ulong\n    + {static} blsr_u32(a:uint) : uint\n    + {static} blsr_u64(a:ulong) : ulong\n    + {static} tzcnt_u32(a:uint) : uint\n    + {static} tzcnt_u64(a:ulong) : ulong\n}\nX86 +-- Bmi1\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["class", "diagramme UML"],
  "description": "Ce diagramme représente deux classes, X86 et Bmi1. Les méthodes de la classe Bmi1 sont définies comme statiques.",
  "source": "@startuml\nclass X86 <<unsafe>> <<static>> <<partial>> {\n}\nclass Bmi1 <<static>> {\n    + {static} IsBmi1Supported : bool <<get>>\n    + {static} andn_u32(a:uint, b:uint) : uint\n    + {static} andn_u64(a:ulong, b:ulong) : ulong\n    + {static} bextr_u32(a:uint, start:uint, len:uint) : uint\n    + {static} bextr_u64(a:ulong, start:uint, len:uint) : ulong\n    + {static} bextr2_u32(a:uint, control:uint) : uint\n    + {static} bextr2_u64(a:ulong, control:ulong) : ulong\n    + {static} blsi_u32(a:uint) : uint\n    + {static} blsi_u64(a:ulong) : ulong\n    + {static} blsmsk_u32(a:uint) : uint\n    + {static} blsmsk_u64(a:ulong) : ulong\n    + {static} blsr_u32(a:uint) : uint\n    + {static} blsr_u64(a:ulong) : ulong\n    + {static} tzcnt_u32(a:uint) : uint\n    + {static} tzcnt_u64(a:ulong) : ulong\n}\nX86 +-- Bmi1\n@enduml"
}
,{
  "prompt": "@startuml\nclass X86 <<unsafe>> <<static>> <<partial>> {\n}\nclass Bmi1 <<static>> {\n    + {static} IsBmi1Supported : bool <<get>>\n    + {static} andn_u32(a:uint, b:uint) : uint\n    + {static} andn_u64(a:ulong, b:ulong) : ulong\n    + {static} bextr_u32(a:uint, start:uint, len:uint) : uint\n    + {static} bextr_u64(a:ulong, start:uint, len:uint) : ulong\n    + {static} bextr2_u32(a:uint, control:uint) : uint\n    + {static} bextr2_u64(a:ulong, control:ulong) : ulong\n    + {static} blsi_u32(a:uint) : uint\n    + {static} blsi_u64(a:ulong) : ulong\n    + {static} blsmsk_u32(a:uint) : uint\n    + {static} blsmsk_u64(a:ulong) : ulong\n    + {static} blsr_u32(a:uint) : uint\n    + {static} blsr_u64(a:ulong) : ulong\n    + {static} tzcnt_u32(a:uint) : uint\n    + {static} tzcnt_u64(a:ulong) : ulong\n}\nX86 +-- Bmi1\n@enduml",
  "code": "@startuml\nclass X86 <<unsafe>> <<static>> <<partial>> {\n}\nclass Bmi1 <<static>> {\n    + {static} IsBmi1Supported : bool <<get>>\n    + {static} andn_u32(a:uint, b:uint) : uint\n    + {static} andn_u64(a:ulong, b:ulong) : ulong\n    + {static} bextr_u32(a:uint, start:uint, len:uint) : uint\n    + {static} bextr_u64(a:ulong, start:uint, len:uint) : ulong\n    + {static} bextr2_u32(a:uint, control:uint) : uint\n    + {static} bextr2_u64(a:ulong, control:ulong) : ulong\n    + {static} blsi_u32(a:uint) : uint\n    + {static} blsi_u64(a:ulong) : ulong\n    + {static} blsmsk_u32(a:uint) : uint\n    + {static} blsmsk_u64(a:ulong) : ulong\n    + {static} blsr_u32(a:uint) : uint\n    + {static} blsr_u64(a:ulong) : ulong\n    + {static} tzcnt_u32(a:uint) : uint\n    + {static} tzcnt_u64(a:ulong) : ulong\n}\nX86 +-- Bmi1\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "class",
    "plantuml"
  ],
  "description": "Diagramme UML représentant les classes X86 et Bmi1 avec leurs méthodes statiques.",
  "source": "@startuml\nclass X86 <<unsafe>> <<static>> <<partial>> {\n}\nclass Bmi1 <<static>> {\n    + {static} IsBmi1Supported : bool <<get>>\n    + {static} andn_u32(a:uint, b:uint) : uint\n    + {static} andn_u64(a:ulong, b:ulong) : ulong\n    + {static} bextr_u32(a:uint, start:uint, len:uint) : uint\n    + {static} bextr_u64(a:ulong, start:uint, len:uint) : ulong\n    + {static} bextr2_u32(a:uint, control:uint) : uint\n    + {static} bextr2_u64(a:ulong, control:ulong) : ulong\n    + {static} blsi_u32(a:uint) : uint\n    + {static} blsi_u64(a:ulong) : ulong\n    + {static} blsmsk_u32(a:uint) : uint\n    + {static} blsmsk_u64(a:ulong) : ulong\n    + {static} blsr_u32(a:uint) : uint\n    + {static} blsr_u64(a:ulong) : ulong\n    + {static} tzcnt_u32(a:uint) : uint\n    + {static} tzcnt_u64(a:ulong) : ulong\n}\nX86 +-- Bmi1\n@enduml"
}
,{
  "prompt": "Code UML pour la bibliothèque BMII",
  "code": "@startuml\nclass X86 <<unsafe>> <<static>> <<partial>> {\n}\nclass Bmi1 <<static>> {\n+ {static} IsBmi1Supported : bool <<get>>\n+ {static} andn_u32(a:uint, b:uint) : uint\n+ {static} andn_u64(a:ulong, b:ulong) : ulong\n+ {static} bextr_u32(a:uint, start:uint, len:uint) : uint\n+ {static} bextr_u64(a:ulong, start:uint, len:uint) : ulong\n+ {static} bextr2_u32(a:uint, control:uint) : uint\n+ {static} bextr2_u64(a:ulong, control:ulong) : ulong\n+ {static} blsi_u32(a:uint) : uint\n+ {static} blsi_u64(a:ulong) : ulong\n+ {static} blsmsk_u32(a:uint) : uint\n+ {static} blsmsk_u64(a:ulong) : ulong\n+ {static} blsr_u32(a:uint) : uint\n+ {static} blsr_u64(a:ulong) : ulong\n+ {static} tzcnt_u32(a:uint) : uint\n+ {static} tzcnt_u64(a:ulong) : ulong\n}\nX86 +-- Bmi1\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["Bmi1", "X86", "bibliothèque"],
  "description": "Le diagramme montre la relation entre les classes X86 et Bmi1, avec des méthodes statiques définies dans la classe Bmi1.",
  "source": "https://github.com/PlantUML/plantuml-examples/blob/master/class/UmlClassStaticMethod.puml"
}
,{
  "prompt": "Class Diagram",
  "code": "@startuml\nclass SelectableEditor {\n    + \u00ab\u00aboverride\u00bb\u00b7 OnInspectorGUI() : void\n}\nEditor \u2192 SelectableEditor\n@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": ["UML", "diagramme de classes", "PlantUML"],
  "description": "Diagramme de classes montrant l'héritage entre Editor et SelectableEditor.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "@startuml\nclass SelectableEditor {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml",
  "code": "@startuml\nclass SelectableEditor {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["SelectableEditor", "Editor", "uml"],
  "description": "Diagramme UML de classe montrant l'héritage entre Editor et SelectableEditor.",
  "source": "https://github.com/plantuml/plantuml"
}
,{
  "prompt": "@startuml\nclass SelectableEditor {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml",
  "code": "@startuml\nclass SelectableEditor {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["PlantUML", "diagramme UML", "class"],
  "description": "Un diagramme de classe décrivant la relation entre l'éditeur et la sélectionnableEditor.",
  "source": "@startuml\nclass SelectableEditor {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <|-- SelectableEditor\n@enduml"
}
,{
  "prompt": "",
  "code": "@startuml\nclass SelectableEditor {\n    + <<override>> OnInspectorGUI() : void\n}\nEditor <--|> SelectableEditor\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["UML", "PlantUML", "diagramme de classes"],
  "description": "Diagramme de classes définissant une relation d'héritance entre Editor et SelectableEditor, avec une méthode OnInspectorGUI() à surcharger.",
  "source": ""
}
,{
  "prompt": "@startuml\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml",
  "code": "@startuml\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["UML", "diagramme de classes"],
  "description": "Le diagramme représente une classe nommée LocksTab qui hérite de deux interfaces : IRefreshableView et ILockMenuOperations.",
  "source": ""
}
,{
  "prompt": "@startuml\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml",
  "code": "@startuml\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme UML", "classes", "inheritance"],
  "description": "Définition d'une classe nommée LocksTab avec des méthodes et des attributs, ainsi que deux classes qui l'héritent.",
  "source": "@startuml\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml"
}
,{
  "prompt": "@startuml\\nclass LocksTab \\<<sealed>> {\\}\\nIRefreshableView \\<|--\\> LocksTab\\nILockMenuOperations \\<|--\\> LocksTab\\n@enduml",
  "code": "@startuml\nclass LocksTab <<sealed>> {\n}\nIRefreshableView <|-- LocksTab\nILockMenuOperations <|-- LocksTab\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["UML", "diagramme de classe"],
  "description": "Ce diagramme représente les relations entre les classes LocksTab, IRefreshableView et ILockMenuOperations.",
  "source": "@startuml\\nclass LocksTab \\<<sealed>> {\\}\\nIRefreshableView \\<|--\\> LocksTab\\nILockMenuOperations \\<|--\\> LocksTab\\n@enduml"
}
,{
  "prompt": "Diagramme UML pour la classe `math` et son utilisation",
  "code": "@startuml\nstruct int4x3 {\n    + ...\n}\nclass math <<static>> <<partial>> {\n    + ...\n}\n...\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["math", "int4x3", "IEquatable", "IFormattable"],
  "description": "Ce diagramme décrit la classe `math` et son utilisation pour créer des matrices 4x3 à l'aide de divers types de données.",
  "source": "https://github.com/plantuml/plantuml/blob/master/examples/class.plantuml"
}
,{
  "prompt": "",
  "code": "@startuml\nstruct int4x3 {\n    + int4x3(c0:int4, c1:int4, c2:int4)\n    + int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int)\n    + int4x3(v:int)\n    + int4x3(v:bool)\n    + int4x3(v:bool4x3)\n    + int4x3(v:uint)\n    + int4x3(v:uint4x3)\n    + int4x3(v:float)\n    + int4x3(v:float4x3)\n    + int4x3(v:double)\n    + int4x3(v:double4x3)\n    + Equals(rhs:int4x3) : bool\n    + <<override>> Equals(o:object) : bool\n    + <<override>> GetHashCode() : int\n    + <<override>> ToString() : string\n    + ToString(format:string, formatProvider:IFormatProvider) : string\n}\nclass math <<static>> <<partial>> {\n    + {static} int4x3(c0:int4, c1:int4, c2:int4) : int4x3\n    + {static} int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int) : int4x3\n    + {static} int4x3(v:int) : int4x3\n    + {static} int4x3(v:bool) : int4x3\n    + {static} int4x3(v:bool4x3) : int4x3\n    + {static} int4x3(v:uint) : int4x3\n    + {static} int4x3(v:uint4x3) : int4x3\n    + {static} int4x3(v:float) : int4x3\n    + {static} int4x3(v:float4x3) : int4x3\n    + {static} int4x3(v:double) : int4x3\n    + {static} int4x3(v:double4x3) : int4x3\n    + {static} transpose(v:int4x3) : int3x4\n    + {static} hash(v:int4x3) : uint\n    + {static} hashwide(v:int4x3) : uint4\n}\nclass \"IEquatable`1\"<T> {\n}\nIFormattable <|-- int4x3\nint4x3 --> \"c0\" int4\nint4x3 --> \"c1\" int4\nint4x3 --> \"c2\" int4\nint4x3 --> \"zero\" int4x3\n@enduml",
  "langage": "",
  "type": "class",
  "tags": ["UML", "PlantUML", "struct", "class", "math"],
  "description": "Définition d'une structure de données et de classes mathématiques, notamment la classe int4x3 et les méthodes statiques de la classe math.",
  "source": ""
}
,{
  "prompt": "",
  "code": "@startuml\nstruct int4x3 {\n    + int4x3(c0:int4, c1:int4, c2:int4)\n    + int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int)\n    + int4x3(v:int)\n    + int4x3(v:bool)\n    + int4x3(v:bool4x3)\n    + int4x3(v:uint)\n    + int4x3(v:uint4x3)\n    + int4x3(v:float)\n    + int4x3(v:float4x3)\n    + int4x3(v:double)\n    + int4x3(v:double4x3)\n    + Equals(rhs:int4x3) : bool\n    + <<override>> Equals(o:object) : bool\n    + <<override>> GetHashCode() : int\n    + <<override>> ToString() : string\n    + ToString(format:string, formatProvider:IFormatProvider) : string\n}\nclass math <<static>> <<partial>> {\n    + {static} int4x3(c0:int4, c1:int4, c2:int4) : int4x3\n    + {static} int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int) : int4x3\n    + {static} int4x3(v:int) : int4x3\n    + {static} int4x3(v:bool) : int4x3\n    + {static} int4x3(v:bool4x3) : int4x3\n    + {static} int4x3(v:uint) : int4x3\n    + {static} int4x3(v:uint4x3) : int4x3\n    + {static} int4x3(v:float) : int4x3\n    + {static} int4x3(v:float4x3) : int4x3\n    + {static} int4x3(v:double) : int4x3\n    + {static} int4x3(v:double4x3) : int4x3\n    + {static} transpose(v:int4x3) : int3x4\n    + {static} hash(v:int4x3) : uint\n    + {static} hashwide(v:int4x3) : uint4\n}\nclass \"IEquatable`1\"<T> {\n}\nIFormattable <|-- int4x3\nint4x3 --> \"c0\" int4\nint4x3 --> \"c1\" int4\nint4x3 --> \"c2\" int4\nint4x3 --> \"zero\" int4x3\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["struct", "class", "static", "partial"],
  "description": "Définition d'une classe mathématique avec des méthodes statiques pour manipuler des matrices 4x3.",
  "source": ""
}
,{
  "prompt": "",
  "code": "@startuml\nstruct int4x3 {\n    + int4x3(c0:int4, c1:int4, c2:int4)\n    + int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int)\n    + int4x3(v:int)\n    + int4x3(v:bool)\n    + int4x3(v:bool4x3)\n    + int4x3(v:uint)\n    + int4x3(v:uint4x3)\n    + int4x3(v:float)\n    + int4x3(v:float4x3)\n    + int4x3(v:double)\n    + int4x3(v:double4x3)\n    + Equals(rhs:int4x3) : bool\n    + <<override>> Equals(o:object) : bool\n    + <<override>> GetHashCode() : int\n    + <<override>> ToString() : string\n    + ToString(format:string, formatProvider:IFormatProvider) : string\n}\nclass math <<static>> <<partial>> {\n    + {static} int4x3(c0:int4, c1:int4, c2:int4) : int4x3\n    + {static} int4x3(m00:int, m01:int, m02:int, m10:int, m11:int, m12:int, m20:int, m21:int, m22:int, m30:int, m31:int, m32:int) : int4x3\n    + {static} int4x3(v:int) : int4x3\n    + {static} int4x3(v:bool) : int4x3\n    + {static} int4x3(v:bool4x3) : int4x3\n    + {static} int4x3(v:uint) : int4x3\n    + {static} int4x3(v:uint4x3) : int4x3\n    + {static} int4x3(v:float) : int4x3\n    + {static} int4x3(v:float4x3) : int4x3\n    + {static} int4x3(v:double) : int4x3\n    + {static} int4x3(v:double4x3) : int4x3\n    + {static} transpose(v:int4x3) : int3x4\n    + {static} hash(v:int4x3) : uint\n    + {static} hashwide(v:int4x3) : uint4\n}\nclass \"IEquatable`1\"<T> {\n}\nIFormattable <|-- int4x3\nint4x3 --> \"c0\" int4\nint4x3 --> \"c1\" int4\nint4x3 --> \"c2\" int4\nint4x3 --> \"zero\" int4x3\n@enduml",
  "langage": "",
  "type": "class",
  "tags": ["UML", "PlantUML", "diagramme de classe"],
  "description": "Ce diagramme UML représente une structure de données nommée int4x3 et sa relation avec la classe math. La structure int4x3 possède plusieurs constructeurs, ainsi que des méthodes pour l'égalité, le hachage et la représentation en chaîne.",
  "source": ""
}
,{
  "prompt": "",
  "code": "@startuml\nclass FieldExtensions <<static>> {\n    + {static} HasPreprocessor(descriptor:FieldDescriptor) : bool\n    + {static} HasSemantic(descriptor:FieldDescriptor) : bool\n    + {static} HasFlag(descriptor:FieldDescriptor, options:StructFieldOptions) : bool\n    + {static} ToFieldString(descriptor:FieldDescriptor) : string\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "uml",
    "diagramme de classe",
    "plantuml"
  ],
  "description": "Le diagramme décrit les méthodes statiques d'une classe nommée FieldExtensions.",
  "source": "https://github.com/plantuml/plantuml/blob/master/diagrams/class.pu"
}
,{
  "prompt": "",
  "code": "@startuml\nclass FieldExtensions <<static>> {\n    + {static} HasPreprocessor(descriptor:FieldDescriptor) : bool\n    + {static} HasSemantic(descriptor:FieldDescriptor) : bool\n    + {static} HasFlag(descriptor:FieldDescriptor, options:StructFieldOptions) : bool\n    + {static} ToFieldString(descriptor:FieldDescriptor) : string\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["uml", "plantuml", "diagramme", "class"],
  "description": "Diagrame UML représentant une classe avec des méthodes statiques.",
  "source": ""
}
,{
  "prompt": "",
  "code": "@startuml\nclass FieldExtensions <<static>> {\n    + {static} HasPreprocessor(descriptor:FieldDescriptor) : bool\n    + {static} HasSemantic(descriptor:FieldDescriptor) : bool\n    + {static} HasFlag(descriptor:FieldDescriptor, options:StructFieldOptions) : bool\n    + {static} ToFieldString(descriptor:FieldDescriptor) : string\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["class", "diagramme UML", "plantuml"],
  "description": "Diagramme de classes pour le type FieldExtensions avec méthodes statiques et paramètres.",
  "source": ""
}
,{
  "prompt": "@startuml\nclass NoneChunk {\n}\nBaseChunk <|-- NoneChunk\n@enduml",
  "code": "@startuml\nclass NoneChunk {\n}\nBaseChunk <|-- NoneChunk\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["UML", "diagramme de classes"],
  "description": "Diagramme de classes définissant la hiérarchie entre les classes \"NoneChunk\" et \"BaseChunk\"",
  "source": "@startuml\nclass NoneChunk {\n}\nBaseChunk <|-- NoneChunk\n@enduml"
}
,{
  "prompt": "sprite $google-developers [102x11/16] { ... }",
  "code": "@startuml\nsprite $google-developers [102x11/16] {\n...}\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["sprite", "Google Developers", "image"],
  "description": "Diagramme UML représentant une image de sprite pour Google Developers.",
  "source": "https://plantuml.com/fr/"
}
,{
  "prompt": "@startuml\nsprite $google-developers [102x11/16] {\n001999009997000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n... (trunc.) ... \n}\n@enduml",
  "code": "@startuml\nsprite $google-developers [102x11/16] {\n001999009997000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n... (trunc.) ... \n}\n@enduml",
  "langage": "plantuml",
  "type": "sequence",
  "tags": ["UML", "PlantUML", "Sequence"],
  "description": "Diagramme de séquence représentant la méthode de gestion des sprites graphiques du langage PlantUML.",
  "source": "https://plantuml.com/"
}
,{
  "prompt": "Définir un sprite dans UML",
  "code": "@startuml\nsprite $google-developers [102x11/16] {\n...}\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["uml", "plantuml", "sprite"],
  "description": "Ce diagramme définit un sprite UML nommé $google-developers avec des dimensions spécifiques.",
  "source": "@startuml\nsprite $google-developers [102x11/16] {\n...}\n@enduml"
}
,{
  "prompt": "@startuml\nsprite $google-developers [102x11/16] {\n...}\n@enduml",
  "code": " @startuml\nsprite $google-developers [102x11/16] {\n001999009997000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n...}\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["plantuml", "sprite"],
  "description": "Diagramme UML représentant un sprite de développeur Google",
  "source": "@startuml\nsprite $google-developers [102x11/16] {\n...}\n@enduml"
}
,{
  "prompt": "Code UML PlantUML",
  "code": "@startuml\nstruct GraphDataReadOnly {\n    + GraphDataReadOnly(graph:GraphData)\n    + AnyVertexAnimationActive() : bool\n    + IsVFXCompatible() : bool\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["diagramme", "uml", "struct", "graph"],
  "description": "Décrit une structure de données nommée GraphDataReadOnly avec ses méthodes et attributs.",
  "source": "@startuml\nstruct GraphDataReadOnly {\n    + GraphDataReadOnly(graph:GraphData)\n    + AnyVertexAnimationActive() : bool\n    + IsVFXCompatible() : bool\n}\n@enduml"
}
,{
  "prompt": "@startuml struct GraphDataReadOnly { + GraphDataReadOnly(graph:GraphData) + AnyVertexAnimationActive() : bool + IsVFXCompatible() : bool } @enduml",
  "code": "@startuml\nstruct GraphDataReadOnly {\n    + GraphDataReadOnly(graph:GraphData)\n    + AnyVertexAnimationActive() : bool\n    + IsVFXCompatible() : bool\n}\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "GraphDataReadOnly",
    "GraphData",
    "AnyVertexAnimationActive",
    "IsVFXCompatible"
  ],
  "description": "Diagramme de classe décrivant les méthodes d'un objet GraphDataReadOnly",
  "source": "PlantUML"
}
,{
  "prompt": "@startuml\nhide circle\nskinparam classAttributeIconSize 0\n... (restant du code)",
  "code": "@startuml\nhide circle\nskinparam classAttributeIconSize 0\nskinparam backgroundColor White\nskinparam RoundCorner 10\ndefault\nskinparam Shadowing true\n...\n@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": ["UML", "diagramme de classes", "PlantUML"],
  "description": "Diagramme de classes représentant les relations entre les classes Proyecto, Empresa et Empleado.",
  "source": "https://github.com/plantuml/plantuml-include"
}
,{
  "prompt": "",
  "code": "@startuml\\nclass UnitEditor {\\n    + UnitEditor(metadata:Metadata)\\n}\\nclass \"GraphElementEditor`1\"<T> {\\n}\\nclass Styles <<new>> <<static>> {\\n    + {static} <<readonly>> spaceBetweenPorts : float = 5\\n}\\n\"GraphElementEditor`1\" \">FlowGraphContext\" <|-- UnitEditor\\nUnitEditor +-- Styles\\nStyles --> \"portsBackground\" GUIStyle\\nStyles --> \"portsLabel\" GUIStyle\\nStyles --> \"portLabel\" GUIStyle\\nStyles --> \"portDescription\" GUIStyle\\nStyles --> \"portIcon\" GUIStyle\\nStyles --> \"inspectorBackground\" GUIStyle\\n@enduml",
  "langage": "plantuml",
  "type": "class",
  "tags": ["UnitEditor", "GraphElementEditor`1`, Styles"],
  "description": "Diagramme UML représentant les classes UnitEditor, GraphElementEditor`1` et Styles, ainsi que leurs relations.",
  "source": ""
}
,{
  "prompt": "@startuml\nclass UnitEditor {\n    + UnitEditor(metadata:Metadata)\n}\nclass \\\"GraphElementEditor`1\\\"><T> {\n}\nclass Styles <<new>> <<static>> {\n    + {static} <<readonly>> spaceBetweenPorts : float = 5\n}\n\\\"GraphElementEditor`1\\\" \\<FlowGraphContext> \\|-- UnitEditor\nUnitEditor +-- Styles\nStyles --> \"portsBackground\" GUIStyle\nStyles --> \"portsLabel\" GUIStyle\nStyles --> \"portLabel\" GUIStyle\nStyles --> \"portDescription\" GUIStyle\nStyles --> \"portIcon\" GUIStyle\nStyles --> \"inspectorBackground\" GUIStyle\n@enduml",
  "code": "@startuml\nclass UnitEditor {\n    + UnitEditor(metadata:Metadata)\n}\nclass \\\"GraphElementEditor`1\\\"><T> {\n}\nclass Styles <<new>> <<static>> {\n    + {static} <<readonly>> spaceBetweenPorts : float = 5\n}\n\\\"GraphElementEditor`1\\\" \\<FlowGraphContext> \\|-- UnitEditor\nUnitEditor +-- Styles\nStyles --> \"portsBackground\" GUIStyle\nStyles --> \"portsLabel\" GUIStyle\nStyles --> \"portLabel\" GUIStyle\nStyles --> \"portDescription\" GUIStyle\nStyles --> \"portIcon\" GUIStyle\nStyles --> \"inspectorBackground\" GUIStyle\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "UnitEditor",
    "GraphElementEditor`1`",
    "Styles",
    "FlowGraphContext"
  ],
  "description": "Le diagramme décrit les relations entre les classes UnitEditor, GraphElementEditor et Styles. Les styles sont définis comme statiques et readonly.",
  "source": "@startuml\n..."
}
,{
  "prompt": "Code de la spécification UML",
  "code": "@startuml\nclass UnitEditor {\n    + UnitEditor(metadata:Metadata)\n}\nclass \"GraphElementEditor`1\"<T> {\n}\n\nclass Styles <<new>> <<static>> {\n    + {static} <<readonly>> spaceBetweenPorts : float = 5\n}\n\"GraphElementEditor`1\" \">FlowGraphContext\" <|-- UnitEditor\nUnitEditor +-- Styles\nStyles --> \"portsBackground\" GUIStyle\nStyles --> \"portsLabel\" GUIStyle\nStyles --> \"portLabel\" GUIStyle\nStyles --> \"portDescription\" GUIStyle\nStyles --> \"portIcon\" GUIStyle\nStyles --> \"inspectorBackground\" GUIStyle\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["UnitEditor", "GraphElementEditor`1", "Styles"],
  "description": "Diagramme de classes décrivant les relations entre les unités d'édition, les graphiques et les styles.",
  "source": "https://example.com/code-uml"
}
,{
  "prompt": "@startuml\nclass Texture2DArrayShaderProperty {\n}\nclass \"AbstractShaderProperty`1\"<T> {\n}\n\"AbstractShaderProperty`1\" \"<SerializableTextureArray>\" <|-- Texture2DArrayShaderProperty\nTexture2DArrayShaderProperty --> \"propertyType\" PropertyType\n@enduml",
  "code": "@startuml\nclass Texture2DArrayShaderProperty {\n}\nclass \"AbstractShaderProperty`1\"<T> {\n}\n\"AbstractShaderProperty`1\" \"<SerializableTextureArray>\" <|-- Texture2DArrayShaderProperty\nTexture2DArrayShaderProperty --> \"propertyType\" PropertyType\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "shader",
    "property",
    "texture",
    "array"
  ],
  "description": "Diagramme de classe montrant les relations entre Texture2DArrayShaderProperty et AbstractShaderProperty`1'",
  "source": "@startuml\nclass Texture2DArrayShaderProperty {\n}\nclass \"AbstractShaderProperty`1\"<T> {\n}\n\"AbstractShaderProperty`1\" \"<SerializableTextureArray>\" <|-- Texture2DArrayShaderProperty\nTexture2DArrayShaderProperty --> \"propertyType\" PropertyType\n@enduml"
}
,{
  "prompt": "@startuml\nclass Texture2DArrayShaderProperty {\n}\nclass \"AbstractShaderProperty`1\"<T> {\n}\n\"AbstractShaderProperty`1\" \" <SerializableTextureArray>\" <|-- Texture2DArrayShaderProperty\nTexture2DArrayShaderProperty --> \"propertyType\" PropertyType\n@enduml",
  "code": "@startuml\nclass Texture2DArrayShaderProperty {\n}\nclass \"AbstractShaderProperty`1\"<T> {\n}\n\"AbstractShaderProperty`1\" \" <SerializableTextureArray>\" <|-- Texture2DArrayShaderProperty\nTexture2DArrayShaderProperty --> \"propertyType\" PropertyType\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": [
    "UML",
    "diagramme",
    "classe"
  ],
  "description": "Un diagramme de classe UML représentant les relations entre les classes Texture2DArrayShaderProperty et AbstractShaderProperty`1",
  "source": "@startuml\nclass Texture2DArrayShaderProperty {\n}\nclass \"AbstractShaderProperty`1\"<T> {\n}\n\"AbstractShaderProperty`1\" \" <SerializableTextureArray>\" <|-- Texture2DArrayShaderProperty\nTexture2DArrayShaderProperty --> \"propertyType\" PropertyType\n@enduml"
}
,
{
  "prompt": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n...\n}\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\n...\n@enduml",
  "code": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n...\n}\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\n...\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["sprite", "pied-piper", "rectangle", "entity"],
  "description": "Diagramme UML représentant un pied-piper en tant que composant.",
  "source": "https://github.com/plantuml/plantuml"
}
,
{
  "prompt": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n...}\n!define FA_PIED_PIPER_PP(...)\nskinparam folderBackgroundColor<<FA PIED_PIPER_PP>> White\n@enduml",
  "code": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n...}\n!define FA_PIED_PIPER_PP(...)\nskinparam folderBackgroundColor<<FA PIED_PIPER_PP>> White\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["pied_piper", "sprite", "entity", "rectangle", "black"],
  "description": "Ce diagramme UML représente un sprite personnalisé pour le pied-piper. Il définit une entité rectangle avec une couleur noire, étiquetée « FA PIED_PIPER_PP ». Le skinparam définit également la couleur de fond des dossiers en blanc.",
  "source": "https://github.com/plantuml/plantuml/blob/master/src/main/resources/diagrams/component/FA_PiedPiperPP.pu"
}
,
{
  "prompt": "@startuml\nsprite $pied_piper_pp [48x48/16] { ... }\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label) ENTITY(rectangle,black,pied_piper_pp,_label, _alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label, _shape) ENTITY(_shape,black,pied_piper_pp,_label, _alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label, _shape, _color) ENTITY(_shape,_color,pied_piper_pp,_label, _alias,FA PIED_PIPER_PP)\nskinparam folderBackgroundColor<<FA PIED_PIPER_PP>> White\n@enduml",
  "code": "@startuml\nsprite $pied_piper_pp [48x48/16] { ... }\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label) ENTITY(rectangle,black,pied_piper_pp,_label, _alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label, _shape) ENTITY(_shape,black,pied_piper_pp,_label, _alias,FA PIED_PIPER_PP)\n!define FA_PIED_PIPER_PP(_alias, _label, _shape, _color) ENTITY(_shape,_color,pied_piper_pp,_label, _alias,FA PIED_PIPER_PP)\nskinparam folderBackgroundColor<<FA PIED_PIPER_PP>> White\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["sprite", "entity", "rectangle", "black", "pied_piper_pp"],
  "description": "Diagramme de component représentant un sprite avec des définitions d'entité et de skinparam.",
  "source": "@startuml"
}
,
{
  "prompt": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n...}\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\n... skinparam folderBackgroundColor<<FA PIED_PIPER_PP>> White \n@enduml",
  "code": "@startuml\nsprite $pied_piper_pp [48x48/16] {\n...}\n!define FA_PIED_PIPER_PP(_alias) ENTITY(rectangle,black,pied_piper_pp,_alias,FA PIED_PIPER_PP)\n... skinparam folderBackgroundColor<<FA PIED_PIPER_PP>> White \n@enduml",
  "langage": "plantuml",
  "type": "component",
  "tags": ["pied-piper", "entity", "rectangle", "black", "white"],
  "description": "Diagramme UML représentant un pied-piper avec des personnages et des entités",
  "source": "PlantUML"
}
,
{
  "prompt": "",
  "code": "@startuml\ntitle Motorblok\nfooter: OpenWoo.app\nheader: OpenWoo.app\n...\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["uml", "plantuml", "component", "diagramme"],
  "description": "Diagramme montrant les différentes couches d'une application, notamment les publicités, les services, l'intégration et les API.",
  "source": ""
}
,
{
  "prompt": "@startuml ...\n@enduml",
  "code": "@startuml\n...\n@enduml",
  "langage": "PlantUML",
  "type": "component",
  "tags": ["Publicatie platformen", "Services", "Integratie", "Bronnen", "API"],
  "description": "Diagramme UML montrant les différentes couches d'une application, notamment la couche de publicatie, la couche des services, la couche d'intégration et la couche des API.",
  "source": "https://example.com"
}
,
{
  "prompt": "@startuml\ntitle Motorblok\nfooter: OpenWoo.app\nheader: OpenWoo.app...",
  "code": "@startuml\ntitle Motorblok\nfooter: OpenWoo.app\nheader: OpenWoo.app...\n' Publicatie platformen (Laag 5 UI)...\n@enduml",
  "langage": "PlantUML",
  "type": "usecase",
  "tags": [
    "Publicatie platformen",
    "Services",
    "Integratie",
    "API",
    "Bronnen",
    "Searchsite",
    "OpenWoo Service",
    "Open Index"
  ],
  "description": "Le diagramme décrit les différentes couches d'une architecture, notamment la couche de publicité, les services, l'intégration et les API.",
  "source": "@startuml\ntitle Motorblok\nfooter: OpenWoo.app\nheader: OpenWoo.app..."
}
,
{
  "prompt": "",
  "code": "@startuml\nactor Actor as Actor\nparticipant \"SPA\" as Container <<Container (C4)>>\nparticipant \"GestaoInfoAPI\" as API <<Container (C4)>>\n...\n@enduml",
  "langage": "",
  "type": "sequence",
  "tags": ["UML", "diagramme de séquence", "actor", "participeur", "communication"],
  "description": "Ce diagramme UML décrit une interaction entre un acteur et deux participants : le SPA (Simple Public Access) et l'API GestaoInfo.",
  "source": ""
}


,
{
  "prompt": "@startuml\nactor Actor as Actor\nparticipant \"SPA\" as Container <<Container (C4)>>\nparticipant \"GestaoInfoAPI\" as API <<Container (C4)>>\n...\n@enduml",
  "code": "@startuml\nactor Actor as Actor\nparticipant \"SPA\" as Container <<Container (C4)>>\nparticipant \"GestaoInfoAPI\" as API <<Container (C4)>>\nActor -> Container: Criar novo tipo de robo\nContainer --> Actor: Requisita dados do novo tipo de robo\n...\n@enduml",
  "langage": "PlantUML",
  "type": "sequence",
  "tags": ["sequence", "actor", "participant", "container"],
  "description": "Ce diagramme UML représente une séquence d'événements décrivant l'interaction entre un acteur, un conteneur SPA et un conteneur API.",
  "source": "@startuml\n..."
}
,
{
  "prompt": "@startuml",
  "code": "@startuml\nabstract class GraphElementDescription {\n}\nDescription <|-- GraphElementDescription\nIGraphElementDescription <|-- GraphElementDescription\n@enduml",
  "langage": "PlantUML",
  "type": "class",
  "tags": ["uml", "plantuml", "diagramme", "classe"],
  "description": "Définition d'une classe abstraite qui hérite de plusieurs interfaces.",
  "source": "@startuml"
}
]