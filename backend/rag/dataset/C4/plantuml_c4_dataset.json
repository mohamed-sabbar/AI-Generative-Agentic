[
{
  "prompt": "C4_UC_PainelFinanceiro",
  "code": "@startuml \"C4_UC_PainelFinanceiro\"\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n\nLAYOUT_TOP_DOWN()\ntitle Painel de Gestão Financeira Pessoal - Casos de Uso\n\nPerson(usuario, \"Usuário\", \"Pessoa que utiliza o painel para gerenciar suas finanças pessoais\")\n\nSystem(painel, \"Painel Financeiro\", \"Sistema de gestão financeira pessoal\")\n\nRel(usuario, painel, \"Consulta métricas e relatórios\")\nRel(usuario, painel, \"Registra receitas e despesas\")\nRel(usuario, painel, \"Recebe alertas de orçamento\")\n\nSHOW_LEGEND()\n@enduml",
  "langage": "PlantUML",
  "type": "c4_context",
  "tags": ["gestao financeira", "painel de visualizacao", "casos de uso"],
  "description": "Diagramme C4 montrant le contexte du système de gestion financière personnelle, avec les cas d'utilisation liés au painel de visualisation.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml"
},
{
  "prompt": "Notification Module dans un container boundary",
  "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\n\nLAYOUT_TOP_DOWN()\ntitle DemoModulithApplication - Composant Notificacao\n\nContainer_Boundary(app, \"DemoModulithApplication\", \"Application Modulaire\") {\n  Component(notificacao, \"Notificacao\", \"Module\", \"Responsável pelo envio de notificações ao usuário\")\n}\n\nSHOW_LEGEND(true)\n@enduml",
  "langage": "plantuml",
  "type": "c4_container",
  "tags": ["C4", "PlantUML", "Container Boundary"],
  "description": "Diagramme C4 représentant un conteneur de bord avec une notification comme composant.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/"
},
{
  "prompt": "Architecture e-commerce au niveau conteneur",
  "code": "@startuml\n!include ../../../../../../.c4s/C4_Container.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Plateforme e-commerce - Contexte Conteneurs\n\nSystem_Boundary(ecommerce, \"E-commerce Platform\") {\n    Container(web, \"Web Frontend\", \"React\", \"Interface utilisée par les clients\")\n    Container(api, \"API Gateway\", \"NodeJS/Express\", \"Point d'entrée pour les services backend\")\n    Container(servicePaiement, \"Payment Service\", \"Java Spring Boot\", \"Gère les paiements clients\")\n    Container(serviceMessage, \"Message Broker\", \"Kafka\", \"Gère les événements et la communication asynchrone\")\n    ContainerDb(db, \"Database\", \"PostgreSQL\", \"Stocke produits, utilisateurs et transactions\")\n}\n\nRel(web, api, \"Consomme\", \"HTTPS\")\nRel(api, servicePaiement, \"Appelle\", \"REST/JSON\")\nRel(api, serviceMessage, \"Publie des événements\")\nRel(servicePaiement, db, \"Lit/Écrit\", \"SQL\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_container",
  "tags": ["c4", "container", "system_boundary", "rel"],
  "description": "Diagramme C4 montrant la structure de la plateforme e-commerce, notamment le service de paiement et le gestionnaire de messages.",
  "source": "https://example.com/plantuml-code"
}


,
{
  "prompt": "Diagramme C4 - EEG et Robot - Contexte système",
  "code": "@startuml Overview\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/v2.8.0/C4_Container.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/v2.8.0/C4_Component.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Système EEG et Robot - Diagramme de Contexte\n\nPerson(user, \"Chercheur\", \"Personne utilisant le système pour collecter et analyser des données EEG\")\n\nSystem_Boundary(robotEEG, \"EEG-Robot System\") {\n  Container(robot, \"Robot\", \"Système embarqué\", \"Reçoit et exécute les commandes basées sur les signaux EEG\")\n  Container(eegCollector, \"EEG Collector\", \"Capteur EEG\", \"Collecte et transmet les signaux EEG\")\n  Container(analysisModule, \"Module d'Analyse\", \"Application\", \"Analyse les données EEG pour générer des commandes\")\n}\n\nRel(user, eegCollector, \"Utilise pour collecter des données EEG\")\nRel(eegCollector, analysisModule, \"Transmet les signaux EEG\")\nRel(analysisModule, robot, \"Envoie des commandes\")\n\nSHOW_LEGEND()\n@enduml",
  "langage": "PlantUML",
  "type": "c4_context",
  "tags": ["C4", "Context Diagram", "EEG", "Robot"],
  "description": "Diagramme de contexte C4 montrant les éléments du système, notamment le robot, le collecteur EEG et le module d'analyse.",
  "source": "https://github.com/plantuml-stdlib/C4-PlantUML/v2.8.0"
},
{
  "prompt": "Diagramme C4 - Ontologie Mazak PersonnelM",
  "code": "@startuml\n!include ../iof.iuml\n\ntitle Ontologie Mazak - PersonnelM\n\nLAYOUT_WITH_LEGEND()\nSystem_Boundary(mazak, \"Mazak PersonnelM\") {\n  Person(personnel, \"Employé Mazak\", \"Individu représenté dans l'ontologie\")\n  Container(ontology, \"Ontologie Mazak-PersonnelM\", \"Sémantique\", \"Représente individus et propriétés liées au personnel\")\n}\n\nRel(personnel, ontology, \"Est représenté par\")\nSHOW_LEGEND()\n@enduml",
  "langage": "PlantUML",
  "type": "c4_context",
  "tags": ["Mazak", "personnelm", "ontology"],
  "description": "Diagramme C4 context représentant l'ontologie de Mazak-personnelm, avec des individus et des propriétés.",
  "source": "https://raw.githubusercontent.com/iofoundry/ontopuml/refs/heads/Development/iof.iuml"
},
{
  "prompt": "Diagramme C4 - To Do App - Contexte Web API et Base de Données",
  "code": "@startuml\n!include ../../../../../../.c4s/C4_Container.puml\n!define ICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/refs/heads/main/icons\n!include ICONS/devicons/dotnet.puml\n!include ICONS/devicons/msql_server.puml\n\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green)\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange)\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red)\n\nLAYOUT_TOP_DOWN()\ntitle To Do App - Diagramme de Contexte (Web API et Base de Données)\n\nSystem_Boundary(todo, \"To Do App\") {\n    Container(webApi, \"Web API\", \"ASP.NET Core\", \"Exposition des fonctionnalités de gestion des tâches\", \"dotnet\", $tags=\"c4interflow:lifecycle:changed\")\n    Container(database, \"Base de Données\", \"MS SQL Server\", \"Stocke les tâches\", \"msql_server\", $tags=\"c4interflow:lifecycle:changed\")\n}\n\nRel(webApi, database, \"Lit/Écrit\")\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_container",
  "tags": ["c4interflow:lifecycle:new", "c4interflow:lifecycle:changed", "c4interflow:lifecycle:removed"],
  "description": "Diagramme représentant le système 'To Do App' avec son API Web et sa base de données. Les relations entre les éléments sont indiquées par des flèches colorées.",
  "source": ""
},
{
  "prompt": "Diagramme C4 - Internet Banking - Vue Conteneurs",
  "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons\n!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5\n\n!include DEVICONS/angular.puml\n!include DEVICONS/dotnet.puml\n!include DEVICONS/java.puml\n!include DEVICONS/msql_server.puml\n!include FONTAWESOME/server.puml\n!include FONTAWESOME/envelope.puml\n\ntitle Internet Banking System - Diagramme Conteneurs\n\nPerson(customer, \"Client\", \"Un client de la banque\")\nSystem_Boundary(banking, \"Internet Banking\") {\n  Container(webApp, \"Web Application\", \"Java, Spring MVC\", \"Fournit le contenu statique et le SPA\", \"java\")\n  Container(spa, \"Single-Page App\", \"Angular\", \"Interface utilisateur complète\", \"angular\")\n  Container(mobile, \"Mobile App\", \"C#, Xamarin\", \"Version mobile de l’application bancaire\", \"dotnet\")\n  ContainerDb(db, \"Base de Données\", \"MS SQL Server\", \"Stocke utilisateurs, comptes, transactions\", \"msql_server\")\n  Container(api, \"API Application\", \"Java, Docker\", \"Services bancaires exposés via API\", \"server\")\n}\n\nSystem_Ext(email, \"Système Email\", \"Microsoft Exchange\", \"envelope\")\nSystem_Ext(coreBanking, \"Mainframe Banking System\", \"Stocke les informations centrales sur les clients et transactions\")\n\nRel(customer, webApp, \"Utilise\")\nRel(customer, spa, \"Utilise\")\nRel(customer, mobile, \"Utilise\")\nRel(spa, api, \"Appelle\")\nRel(mobile, api, \"Appelle\")\nRel(api, db, \"Lit/Écrit\")\nRel(api, coreBanking, \"Appelle\")\nRel_Back(api, email, \"Envoie des notifications\")\n\nSHOW_LEGEND()\n@enduml",
  "langage": "plantuml",
  "type": "c4_container",
  "tags": ["C4", "PlantUML", "Internet Banking System", "Container diagram"],
  "description": "Ce diagramme représente le système Internet Banking avec ses différents composants, notamment la web application, l'application mobile et la base de données.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/examples/Internet-Banking-C4.puml"
}

,
{
  "prompt": "Diagramme C4 - Catalog API - Infrastructure - Niveau Conteneur",
  "code": "@startuml\n!include ..\\..\\..\\..\\.c4s\\C4_Container.puml\n\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green)\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange)\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red)\n\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\n\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\n\ntitle Dot Net E Shop - Catalog Api - Infrastructure - C4 Static - Container level\n\nSystem_Boundary(DotNetEShop.SoftwareSystems.CatalogApi, \"Catalog Api\") {\n    Container(infra, \"Infrastructure\", \"Service technique\", \"Composants et services d’infrastructure pour l’API Catalog\")\n    ContainerDb(catalogDb, \"Catalog Database\", \"SQL Database\", \"Stocke les données de produits et de catalogues\")\n    Container(serviceBus, \"Service Bus\", \"Messaging\", \"Gestion des événements et communication asynchrone\")\n}\n\nRel(infra, catalogDb, \"Lit/Écrit\")\nRel(infra, serviceBus, \"Publie/Souscrit\")\n\nSHOW_LEGEND()\n@enduml",
  "langage": "puml",
  "type": "c4_container",
  "tags": ["catalog", "api", "infrastructure", "container"],
  "description": "Diagramme C4 montrant la structure de l'application Catalog Api au niveau conteneur, incluant la base de données et le bus de messages.",
  "source": ""
},
{
  "prompt": "Diagramme C4 - Exemple de Composants Personnalisés",
  "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Exemple de diagramme de composants personnalisés\n\nPerson(user, \"Utilisateur\", \"Personne interagissant avec le système\")\n\nSystem_Boundary(customSystem, \"Système Exemple\") {\n  Container(app, \"Application Web\", \"React + Node.js\", \"Application utilisée par l’utilisateur\")\n  Component(auth, \"Service d’Authentification\", \"API REST\", \"Gère l’identification et les autorisations\")\n  Component(order, \"Service de Commande\", \"Microservice\", \"Traite et gère les commandes\")\n  Component(notification, \"Service de Notification\", \"Microservice\", \"Envoie des notifications aux utilisateurs\")\n}\n\nRel(user, app, \"Utilise\")\nRel(app, auth, \"Appelle\")\nRel(app, order, \"Appelle\")\nRel(order, notification, \"Déclenche des notifications\")\n\nSHOW_LEGEND()\n@enduml",
  "langage": "PlantUML",
  "type": "c4_component",
  "tags": ["C4_Component", "diagramme de composant"],
  "description": "Ce diagramme C4 montre un exemple de création de composants personnalisés, incluant une application, un service d’authentification, un service de commande et un service de notification.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
}

,
{
  "prompt": "C4 Component diagram with tagged containers and styled persons",
  "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Exemple de C4 Component avec styles et tags\n\nAddElementTag(\"taggedContainer\", $bgColor=\"#E0F7FA\", $borderColor=\"#00796B\", $fontColor=\"#004D40\")\nAddElementTag(\"taggedPerson\", $bgColor=\"#FFF9C4\", $borderColor=\"#FBC02D\", $fontColor=\"#827717\")\nAddElementTag(\"yellowTagged\", $bgColor=\"#FFF59D\", $borderColor=\"#FDD835\")\nAddElementTag(\"greenTagged\", $bgColor=\"#C8E6C9\", $borderColor=\"#388E3C\")\n\nPerson(admin, \"Admin User\", \"Gère le système\", $tags=\"taggedPerson\")\nContainer(webApp, \"Application Web\", \"React\", \"Interface utilisateur\", $tags=\"taggedContainer\")\nContainerDb(db, \"Base de données\", \"PostgreSQL\", \"Stockage des données critiques\", $tags=\"greenTagged\")\n\nComponent(authService, \"Service d'authentification\", \"Spring Boot\", \"Gère les connexions\", $tags=\"yellowTagged\")\n\nRel(admin, webApp, \"Utilise\")\nRel(webApp, authService, \"Appels API REST\")\nRel(authService, db, \"Lit/écrit\")\n\nSHOW_LEGEND()\n@enduml",
  "langage": "PlantUML",
  "type": "c4_component",
  "tags": [
    "C4_Component",
    "taggedContainer",
    "taggedPerson",
    "shapeRound",
    "shapeOct",
    "shadowed",
    "yellowTagged",
    "greenTagged"
  ],
  "description": "Un diagramme C4 Component avec des exemples de styles et de tags appliqués à des conteneurs, des personnes et des composants.",
  "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
},
{
  "prompt": "C4 Component diagram with containers, persons and components",
  "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Exemple de diagramme C4 Component avec conteneurs et composants\n\nPerson(user, \"Utilisateur\", \"Interagit avec le système\")\nContainer(mobileApp, \"Application Mobile\", \"Flutter\", \"Permet l'accès en mobilité\")\nContainer(api, \"API Backend\", \"Node.js\", \"Expose des services REST\")\nContainerDb(database, \"Base de Données\", \"MySQL\", \"Stockage persistant des données\")\n\nComponent(payment, \"Module de Paiement\", \"Java\", \"Gère les transactions financières\")\nComponent(notification, \"Service Notification\", \"Python\", \"Envoie des emails et SMS\")\n\nRel(user, mobileApp, \"Utilise\")\nRel(mobileApp, api, \"Appels API REST\")\nRel(api, payment, \"Appelle pour les paiements\")\nRel(api, notification, \"Déclenche les notifications\")\nRel(payment, database, \"Stocke les transactions\")\nRel(notification, database, \"Lit les préférences utilisateurs\")\n\nSHOW_LEGEND()\n@enduml",
  "langage": "PlantUML",
  "type": "c4_component",
  "tags": [
    "Component",
    "Container",
    "Person",
    "C4-PlantUML",
    "taggedContainer",
    "taggedPerson"
  ],
  "description": "Un diagramme C4 Component illustrant des utilisateurs, des conteneurs et des composants logiciels reliés entre eux.",
  "source": "https://github.com/plantuml-stdlib/C4-PlantUML"
}
,
  {
  "prompt": "C4 Static - Component level for Catalog API",
  "code": "@startuml\n!include ../../../../../../../../.c4s/C4_Component.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Catalog API - Diagramme de composants (C4 Static)\n\nContainer_Boundary(catalog, \"Catalog API\") {\n  Component(controller, \"Catalog Controller\", \"ASP.NET Core\", \"Gère les requêtes API du catalogue\")\n  Component(service, \"Catalog Service\", \"C# Service\", \"Logique métier pour la gestion du catalogue\")\n  ContainerDb(db, \"Catalog Database\", \"SQL Server\", \"Stocke les données de produits et de catégories\")\n}\n\nRel(controller, service, \"Appelle\")\nRel(service, db, \"Lit/Écrit\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_component",
  "tags": ["c4_static", "component_level", "catalog_api", "infrastructure"],
  "description": "Diagramme C4 montrant la structure de composants du Catalog Api.",
  "source": "https://example.com"
},
{
  "prompt": "C4 Component diagram for Catalogue API",
  "code": "@startuml\n!include ../../../../../../../../.c4s/C4_Component.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Catalogue API - Diagramme des composants\n\nContainer_Boundary(catalog, \"Catalogue API\") {\n  Component(apiController, \"API Controller\", \"Spring Boot\", \"Gère les endpoints REST du catalogue\")\n  Component(catalogService, \"Catalogue Service\", \"Java Service\", \"Implémente la logique métier du catalogue\")\n  Component(repo, \"Catalogue Repository\", \"JPA\", \"Accès aux données de catalogue\")\n}\n\nContainerDb(catalogDb, \"Catalogue Database\", \"PostgreSQL\", \"Stocke les données de catalogue et produits\")\n\nRel(apiController, catalogService, \"Appelle\")\nRel(catalogService, repo, \"Utilise\")\nRel(repo, catalogDb, \"Lit/Écrit\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_component",
  "tags": ["c4", "diagramme_de_composition", "catalogue", "api"],
  "description": "Diagramme représentant la structure et les relations entre les composants de l'API de catalogue, montrant l'utilisation du contexte de catalogue.",
  "source": "https://example.com/c4-diagramme"
},
{
  "prompt": "C4 Context diagram for Catalog API",
  "code": "@startuml\n!include ../../../../../../../../.c4s/C4_Context.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Catalog API - Diagramme de contexte\n\nPerson(user, \"Utilisateur\", \"Consulte le catalogue et interagit avec l'API\")\n\nSystem_Boundary(catalogContext, \"E-Shop\") {\n  System(catalogApi, \"Catalog API\", \"Expose des services REST pour accéder au catalogue\")\n}\n\nSystem_Ext(paymentSystem, \"Système de paiement\", \"Gère les paiements des commandes\")\nSystem_Ext(inventorySystem, \"Système d'inventaire\", \"Fournit les informations de stock\")\n\nRel(user, catalogApi, \"Envoie des requêtes HTTP\")\nRel(catalogApi, inventorySystem, \"Interroge les stocks\")\nRel(catalogApi, paymentSystem, \"Interagit pour la réservation\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["c4", "component_level", "context"],
  "description": "Diagramme C4 montrant le contexte de catalogue pour l'API de catalogue d'un e-shop Dot Net.",
  "source": ""
},
{
  "prompt": "C4 Context diagram definition (PlantUML include)",
  "code": "@startuml\n!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Définition des éléments graphiques pour un diagramme C4\n\nPerson(user, \"Utilisateur générique\", \"Acteur du système\")\nSystem(system, \"Système cible\", \"Système principal représenté\")\n\nRel(user, system, \"Utilise\")\n\nSHOW_LEGEND()\n@enduml",
  "langage": "puml",
  "type": "c4_context",
  "tags": ["C4", "plantuml", "context", "diagramme"],
  "description": "Définition des éléments graphiques pour le diagramme C4",
  "source": "https://github.com/RicardoNiepel/C4-PlantUML"
}

,{
  "prompt": "C4 Context Diagram for Propulsion (+Equinox)",
  "code": "@startuml\n!includeurl https://raw.githubusercontent.com/skleanthous/C4-PlantumlSkin/master/build/output/c4.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Propulsion System (+Equinox) - Diagramme de Contexte\n\nPerson(user, \"Utilisateur\", \"Interagit avec le système Propulsion\")\n\nSystem_Boundary(propulsion, \"Propulsion System\") {\n  System(ingesters, \"Ingesteurs de Propulsion\", \"Ingestion de données\")\n  System(reactors, \"Réacteurs\", \"Traitement en temps réel\")\n  System(publishers, \"Éditeurs\", \"Publication des résultats\")\n}\n\nContainerDb(db, \"Base de données Propulsion\", \"SQL/NoSQL\")\nContainer(cache, \"Caches\", \"Redis/Memcached\", \"Accélération des accès\")\n\nRel(user, ingesters, \"Soumet des données\")\nRel(ingesters, reactors, \"Transmet des événements\")\nRel(reactors, publishers, \"Envoie des résultats\")\nRel(publishers, db, \"Stocke\")\nRel(reactors, cache, \"Utilise\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": [
    "system context diagram",
    "propulsion",
    "equinox",
    "applications",
    "services",
    "database",
    "caches",
    "ingesters",
    "reactors",
    "publishers"
  ],
  "description": "Diagramme de contexte du système Propulsion (+Equinox) montrant l'organisation haute niveau des Ingesteurs de Propulsion, des Réacteurs et des Éditeurs.",
  "source": "https://raw.githubusercontent.com/skleanthous/C4-PlantumlSkin/master/build/output/c4.puml"
}

,{
  "prompt": "C4 Context Diagram - Site de Músicas",
  "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Site de Músicas - Diagramme de Contexte\n\nPerson(user, \"Utilisateur\", \"Accède au site de musique\")\n\nSystem_Boundary(musicSite, \"Play My Music LTDA\") {\n  System(musicPlatform, \"Plateforme de musique\", \"Streaming et gestion de playlists\")\n}\n\nSystem_Ext(googleAuth, \"Google Authentication\", \"Service externe pour login\")\nSystem_Ext(correios, \"Correios\", \"Service postal pour adresse\")\n\nRel(user, musicPlatform, \"Écoute et gère sa musique\")\nRel(musicPlatform, googleAuth, \"Authentifie via OAuth\")\nRel(musicPlatform, correios, \"Utilise pour validation d'adresse\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["context", "site", "musiques", "user"],
  "description": "Le diagramme décrit le contexte d'un site de musique où les utilisateurs peuvent accéder et utiliser la plateforme.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
}

,{
  "prompt": "C4 Context Diagram - Système Rvprio et Mop",
  "code": "@startuml\n!include C4_Context.puml\n!include C4_Container.puml\n!include C4_Component.puml\n!include constants.puml\n\nLAYOUT_WITH_LEGEND()\ntitle rvprio - Diagramme de Contexte\n\nPerson(user, \"Utilisateur\", \"Interagit avec Rvprio\")\nSystem(rvprio, \"Rvprio\", \"Système principal\")\nSystem_Ext(mop, \"Mop\", \"Système externe\")\n\nRel(user, rvprio, \"Utilise\", \"Web/Mobile\")\nRel(rvprio, mop, \"Appelle\", \"API REST\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["C4", "contextuel", "diagramme"],
  "description": "Diagramme C4 contextuel représentant les relations entre les utilisateurs, le système Rvprio et l'extérieur (Mop).",
  "source": "PlantUML"
}

,{
  "prompt": "C4 Context Diagram - Application Android",
  "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Application Android - Diagramme de Contexte\n\nPerson(user, \"Utilisateur\", \"Utilise l'application Android\")\nSystem_Boundary(androidApp, \"Application Android\") {\n  Container(businessLogic, \"Logique Métier\", \"Java/Kotlin\", \"Gère les règles métier\")\n  Container(androidFramework, \"Framework Android\", \"SDK Android\", \"Gestion des composants natifs\")\n}\n\nRel(user, businessLogic, \"Interagit via l'UI\")\nRel(businessLogic, androidFramework, \"Appels système\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["C4", "PlantUML", "context diagram", "system boundary", "container boundary"],
  "description": "Ce diagramme C4 représente le contexte d'une application Android, avec des conteneurs pour la logique métier et le framework Android.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml"
},
{
  "prompt": "C4 Context Diagram - SinNet Reports",
  "code": "@startuml C4_Elements\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nLAYOUT_WITH_LEGEND()\ntitle SinNet Reports - Diagramme de Contexte\n\nPerson(user, \"Utilisateur\", \"Consulte les rapports\")\nSystem(sinNet, \"SinNet Reports\", \"Application d'entreprise\")\n\nContainerDb(db, \"Base de Données Rapports\", \"SQL Server\")\nContainer(web, \"Frontend Web\", \"Angular\", \"Interface utilisateur\")\nContainer(api, \"API\", \".NET Core\", \"Logique applicative\")\n\nRel(user, web, \"Utilise via le navigateur\")\nRel(web, api, \"Appelle API REST\")\nRel(api, db, \"Lit/Écrit\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["C4", "Context Diagramme"],
  "description": "Le diagramme C4 montre les éléments du système d'entreprise SinNet Reports, y compris les systèmes, les conteneurs et les relations entre eux.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
},
{
  "prompt": "C4 Context & Container Diagram - Websocket Communication",
  "code": "@startuml C4_Websocket_Communication\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Communication WebSocket - Frontend & Backend\n\nPerson(user, \"Utilisateur\", \"Accède au client Web\")\nSystem_Boundary(frontend, \"Frontend (WASM)\") {\n  Container(client, \"Client Web\", \"Rust + WebAssembly\", \"Interface utilisateur\")\n}\nSystem_Boundary(backend, \"Backend\") {\n  Container(server, \"Serveur\", \"Rust\", \"Gestion de la logique et persistance\")\n}\n\nRel(user, client, \"Utilise via navigateur\")\nRel(client, server, \"Échange via WebSocket\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["websocket", "communication", "frontend", "backend", "rust", "wasm"],
  "description": "Le diagramme représente la communication entre le client et le serveur via des websockets. Il montre les composants et les relations entre eux.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
},
{
  "prompt": "C4 Context Diagram - PPS Application Integration Landscape",
  "code": "@startuml PPS_Application_Integration_Landscape\n!include https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n\nLAYOUT_WITH_LEGEND()\ntitle PPS Mutual - Paysage d'Intégration Applicative\n\nPerson(user, \"Employé PPS\", \"Utilise le système\")\nEnterprise_Boundary(pps, \"PPS Mutual\") {\n  System(core, \"Core Insurance System\", \"Système de gestion central\")\n  System(crm, \"CRM\", \"Gestion de la relation client\")\n  System(finance, \"Finance System\", \"Gestion financière\")\n}\n\nSystem_Ext(mail, \"Email Service\", \"Communication externe\")\n\nRel(user, crm, \"Consulte les données client\")\nRel(crm, core, \"Synchronise données\")\nRel(finance, core, \"Transmet rapports\")\nRel(core, mail, \"Notifications\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["application_integration", "landscape", "c4", "context"],
  "description": "Diagramme de l'environnement d'intégration des applications PPS Mutual, montrant les différents systèmes et les relations entre eux.",
  "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml"
},
{
  "prompt": "C4 Component Diagram - Music Store",
  "code": "@startuml music-store-phase-3\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nHIDE_STEREOTYPE()\n\ntitle Music Store - Diagramme de Composants\n\nPerson(user, \"Client\", \"Achète de la musique\")\n\nSystem_Boundary(musicStore, \"Music Store\") {\n  Container(web, \"Site Web\", \"React\", \"UI client\")\n  Container(api, \"API\", \"Spring Boot\", \"Logique métier\")\n  ContainerDb(db, \"Base de Données\", \"PostgreSQL\", \"Stockage des morceaux\")\n}\n\nRel(user, web, \"Navigue et achète\")\nRel(web, api, \"Appels REST\")\nRel(api, db, \"Lit/Écrit\")\n\n@enduml",
  "language": "plantuml",
  "type": "c4_component",
  "tags": ["C4", "PlantUML", "Component"],
  "description": "Diagramme C4 montrant les composants d'un magasin de musique, notamment un guitariste, un amplificateur et des effets.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
},
{
  "prompt": "C4 Context Diagram - Big Bank Plc Internet Banking",
  "code": "@startuml\n!include ../../../.c4s/C4_Context.puml\n\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\n\nLAYOUT_WITH_LEGEND()\ntitle Big Bank Plc - Internet Banking System\n\nPerson(customer, \"Client Bancaire\", \"Accède à ses comptes en ligne\")\nSystem(banking, \"Internet Banking System\", \"Consultation et paiements\")\nSystem_Ext(atm, \"ATM\", \"Retrait d'argent\")\nSystem_Ext(mail, \"Email System\", \"Communication interne\")\n\nRel(customer, banking, \"Utilise\")\nRel(banking, atm, \"Interagit avec\")\nRel(banking, mail, \"Envoie des notifications\")\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["c4", "context", "diagramme", "internet_banking", "banque"],
  "description": "Diagramme de contexte C4 du système d'Internet Banking de Big Bank Plc, montrant les relations entre les différents composants.",
  "source": "https://example.com/source"
}

,{
  "prompt": "C4 Component Diagram - Online Shop Modulith",
  "code": "@startuml component-view\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\n\ntitle Online Shop Modulith - Vue Composants\n\nPerson(customer, \"Client\", \"Achète en ligne\")\nSystem_Boundary(onlineShop, \"Online Shop Modulith\") {\n  Container(web, \"Frontend Web\", \"React\", \"Interface utilisateur\")\n  Container(api, \"API Backend\", \"Spring Boot\", \"Logique métier\")\n  ContainerDb(db, \"Base de Données\", \"PostgreSQL\", \"Stockage des produits et commandes\")\n}\n\nRel(customer, web, \"Parcourt et commande\")\nRel(web, api, \"Appels REST\")\nRel(api, db, \"Lit/Écrit données\")\n\n@enduml",
  "language": "plantuml",
  "type": "c4_component",
  "tags": ["C4", "component", "view", "online shop", "modulith"],
  "description": "Ce diagramme représente la vue composante de l'architecture du magasin en ligne, montrant les différents composants et leurs relations.",
  "source": "https://github.com/plantuml-stdlib/C4"
},
{
  "prompt": "C4 Component Diagram - E-commerce Application",
  "code": "@startuml\n!include ..\\.c4s\\C4_Component.puml\n\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\n\ntitle E-commerce Application - Vue Composants\n\nPerson(user, \"Client\", \"Parcourt et commande des produits\")\nSystem_Boundary(shop, \"E-commerce Application\") {\n  Container(web, \"WebApp\", \"Angular\", \"Interface utilisateur\")\n  Container(api, \"Backend API\", \"Java Spring\", \"Logique applicative\")\n  ContainerDb(db, \"Database\", \"MySQL\", \"Stockage des données clients et produits\")\n}\n\nRel(user, web, \"Navigue et achète\")\nRel(web, api, \"Appels REST\")\nRel(api, db, \"Requêtes SQL\")\n\n@enduml",
  "language": "plantuml",
  "type": "c4_component",
  "tags": ["C4", "component", "diagramme", "uml", "plantuml"],
  "description": "Ce diagramme C4 montre la structure de composants d'une application e-commerce, avec les relations entre les différents éléments.",
  "source": "https://github.com/plantuml-stdlib/C4-PlantUML/"
},
{
  "prompt": "C4 Context Diagram - Xerbutri Website",
  "code": "@startuml XerbutriContext\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n\nLAYOUT_WITH_LEGEND()\ntitle System Context Diagram for Xerbutri\n\nPerson(visitor, \"Visitor\", \"Visite le site web\")\nSystem(xerbutri, \"Xerbutri Website\", \"Le site principal Xerbutri\")\nSystem_Ext(cms, \"TX CMS\", \"Application locale de gestion de contenu\")\n\nRel(visitor, xerbutri, \"Consulte le site\")\nRel(cms, xerbutri, \"Ajoute et maintient le contenu\")\n\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["system context", "xerbutri", "website"],
  "description": "Diagramme de contexte système pour Xerbutri. Affiche les relations entre le visiteur, le site web Xerbutri et la CMS local.",
  "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml"
},
{
  "prompt": "C4 Container Diagram - Twitter Timeline Comparison App",
  "code": "@startuml BasicSample\n!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Container.puml\n\ntitle Twitter Timeline Comparison - Vue Conteneurs\n\nPerson(admin, \"Administrateur\")\nSystem_Boundary(sampleSystem, \"Sample System\") {\n    Container(webApp, \"Web Application\", \"C#, ASP.NET Core 2.1 MVC\", \"Permet de comparer plusieurs timelines Twitter\")\n}\nSystem_Ext(twitter, \"Twitter\", \"API de flux sociaux\")\n\nRel(admin, webApp, \"Utilise\", \"HTTPS\")\nRel(webApp, twitter, \"Récupère les tweets\", \"HTTPS\")\n\n@enduml",
  "language": "plantuml",
  "type": "c4_container",
  "tags": ["c4", "plantuml", "uml", "system_boundary", "container"],
  "description": "Ce diagramme représente le système d'application Web qui permet aux utilisateurs de comparer plusieurs timelines Twitter. Il montre également les relations entre l'utilisateur, le système et Twitter.",
  "source": "https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Container.puml"
},
{
  "prompt": "C4 Container Diagram - E-commerce Platform Product Service",
  "code": "@startuml E_Commerce_Platform_Product_Service\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red, $shadowing=\"False\")\n\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\n\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\n\ntitle E-Commerce Platform - Product Service (Container Level)\n\nSystem_Boundary(productService, \"Product Service\") {\n    ContainerQueue(messaging, \"Messaging\", \"RabbitMQ/Kafka\", \"Gère les événements produits et messages\")\n}\n\nSHOW_LEGEND()\n@enduml",
  "language": "plantuml",
  "type": "c4_container",
  "tags": ["c4", "container", "uml", "system boundary", "queue", "ecommerce"],
  "description": "Diagramme C4 Container de la plateforme e-commerce, focalisé sur le Product Service et son composant de messagerie.",
  "source": "https://github.com/plantuml-stdlib/C4-PlantUML"
},
{
  "prompt": "C4 Context Diagram - Big Bank plc System Landscape",
  "code": "@startuml BigBankLandscape\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n\nLAYOUT_WITH_LEGEND()\ntitle System Landscape Diagram for Big Bank plc\n\nPerson(customer, \"Client\")\nSystem(bankingSystem, \"Internet Banking\", \"Services bancaires en ligne\")\nSystem_Ext(atm, \"ATM\", \"Distributeur automatique\")\nSystem_Ext(mail, \"Email System\", \"Communication\")\n\nRel(customer, bankingSystem, \"Utilise\")\nRel(bankingSystem, atm, \"Transactions\")\nRel(bankingSystem, mail, \"Notifications\")\n\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["C4", "PlantUML", "Context Diagram", "Big Bank plc"],
  "description": "Le diagramme représente le paysage système de Big Bank plc, montrant les systèmes et personnes impliquées dans la fourniture des services bancaires.",
  "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml"
},
{
  "prompt": "C4 Context Diagram - OntoPuml Extension",
  "code": "@startuml OntoPuml_Context\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n\ntitle OntoPuml - Contexte Système\n\nPerson(user, \"Utilisateur\")\nSystem(app, \"Application\", \"Exemple d'application avec extension OntoPuml\")\n\nRel(user, app, \"Utilise\")\n\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["ontopuml", "iof.iuml"],
  "description": "Diagramme de contexte utilisant la notation C4 et l'extension OntoPuml.",
  "source": ""
},
{
  "prompt": "C4 Container Diagram - Cinema Backend System",
  "code": "@startuml CinemaBackend\n!include https://raw.githubusercontent.com/kirchsth/C4-PlantUML/extended/C4_Container.puml\n\nLAYOUT_LANDSCAPE()\ntitle Container Diagram For Cinema Backend System\n\nAddElementTag(\"container (frontend)\", $bgColor=\"#888888\", $borderColor=\"#7c7c7c\", $fontColor=\"#ffffff\")\n\nPerson(user, \"Spectateur\")\nSystem_Boundary(cinema, \"Cinema Backend System\") {\n  Container(web, \"Frontend App\", \"React\", \"Interface utilisateur\")\n  Container(api, \"API Service\", \"Node.js\", \"Gestion logique métier\")\n  ContainerDb(db, \"Movies Database\", \"MongoDB\", \"Données des films\")\n  Container(etl, \"ETL Service\", \"Python\", \"Synchronisation des données\")\n}\n\nRel(user, web, \"Consulte films\")\nRel(web, api, \"Appels REST\")\nRel(api, db, \"Lit/Écrit films\")\nRel(etl, db, \"Charge et nettoie données\")\n\n@enduml",
  "language": "plantuml",
  "type": "c4_container",
  "tags": ["C4", "container", "diagramme"],
  "description": "Le diagramme C4 montre les containers et leurs relations dans le système de backend du cinéma. Il décrit les conteneurs tels que l'application cliente, la base de données des films, le service ETL, le service d'API async, etc.",
  "source": "https://raw.githubusercontent.com/kirchsth/C4-PlantUML/extended/C4_Container.puml"
},
{
  "prompt": "C4 Sequence Diagram - Internet Banking Sign In",
  "code": "@startuml InternetBanking_SignIn\n!include ..\\..\\..\\..\\..\\...\\.c4s\\C4_Sequence.puml\n\ntitle Big Bank Plc - Internet Banking - Sign In Sequence (Container Level)\n\nSystem_Ext(external, \"External System\")\n\nSystem_Boundary(internetBanking, \"Internet Banking\") {\n    Container(spa, \"Single-Page App\", \"\", \"\")\n    Container(api, \"API Application\", \"\", \"\")\n    ContainerDb(db, \"Database\", \"\", \"\")\n}\n\nRel(external, spa, \"Sign In\")\nRel(spa, api, \"Sign In Request\")\nRel(api, db, \"Authenticate User\")\n\n@enduml",
  "language": "plantuml",
  "type": "c4_sequence",
  "tags": ["c4", "sequence", "container", "internet banking", "single-page app"],
  "description": "Le diagramme décrit la séquence de connexion d'un utilisateur pour l'application internet banking du Big Bank Plc, à partir du point de vue du conteneur.",
  "source": ""
},
{
  "prompt": "C4 Context Diagram - Bookish List System",
  "code": "@startuml BookishList\n!include <c4/C4_Context.puml>\n!include <office/Users/user.puml>\n!include <office/Users/mobile_user.puml>\n\nscale max 1100 width\ntitle System Context Diagram for Bookish List System\n\nPerson(user, \"Utilisateur\", \"<$user> <$mobile_user>\\nUn utilisateur du système Bookish List\")\nSystem(bookish, \"Bookish List\", \"Permet aux utilisateurs de gérer leur liste de livres\")\nSystem_Ext(googleBooks, \"Google Books\", \"API Google Books pour rechercher des livres\")\n\nRel(user, bookish, \"Recherche, ajoute, commente, met à jour\")\nRel(bookish, googleBooks, \"Recherche des livres et métadonnées\")\n\n@enduml",
  "language": "plantuml",
  "type": "c4_context",
  "tags": ["system", "context", "diagram", "bookish list"],
  "description": "Ce diagramme représente le contexte du système Bookish List, y compris les utilisateurs et les systèmes externes avec lesquels il interagit.",
  "source": "https://plantuml.com/"
}

,{
    "prompt": "Diagramme C4 représentant le conteneur Live Sport Events pour SportRadar.",
    "code": "@startuml SportRadar\n!include <C4/C4_Container>\nSystem_Ext(LiveSportEvents, \"Live Sport Events\", $link=\"./container/index.puml\")\n@enduml",
    "langage": "plantuml",
    "type": "c4_container",
    "tags": ["diagramme c4", "conteneur"],
    "description": "Diagramme C4 représentant le conteneur Live Sport Events.",
    "source": "./container/index.puml"
  },
  {
    "prompt": "Diagramme C4 montrant l'architecture d'une API de vérification NodeJs avec ses composants.",
    "code": "@startuml\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nLAYOUT_WITH_LEGEND()\ntitle verify API\n[NodeJs User API]\nContainer(Web_Moservice, \"Web Moservice\", \"Website | JavaScript\", \"moservice.id main services for Customer\")\nBoundary(api, \"verify API [Component]\" {\n  ... // Ajouter ici les composants spécifiques de l'API\n})\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["C4", "component", "API", "NodeJs"],
    "description": "Le diagramme montre l'architecture d'une API de vérification avec des composants NodeJs.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
  },
  {
    "prompt": "Diagramme C4 montrant le composant harcinasLeadBoard API et ses interactions avec l'application Adiraku.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nLAYOUT_WITH_LEGEND()\n// Décrire ici le composant harcinasLeadBoard et ses relations\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["C4", "diagramme", "component"],
    "description": "Diagramme C4 montrant le composant \"harcinasLeadBoard API\" et ses interactions avec l'application Adiraku.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
  },
  {
    "prompt": "Diagramme C4 représentant la structure d'un système de gestion des informations sur les produits pour une plateforme e-commerce.",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\...\\.c4s\\C4_Container.puml\n// Ajouter ici les conteneurs et relations principaux du système de gestion des produits\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["PlantUML", "C4", "Container"],
    "description": "Diagramme C4 montrant la structure d'un système de gestion des informations sur les produits pour une plateforme e-commerce.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme C4 montrant l'architecture d'une application en construction avec styles personnalisés.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\n!include ./c4_styles.puml\ncenter header\n\t<font size=30 color=black>Under construction...</font>\nend header\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "diagramme"],
    "description": "Diagramme C4 montrant l'architecture d'une application en construction",
    "source": "https://plantuml.com/fr/c4n"
  },
  {
    "prompt": "Diagramme de l'architecture de la gestion des données et de la confidentialité pour l'application LemonQwest.",
    "code": "@startuml data-management-privacy-architecture\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nLAYOUT_WITH_LEGEND()\n// Décrire les composants de gestion de données et privacy\nSHOW_LEGEND()\n@enduml",
    "langage": "C4 PlantUML",
    "type": ["c4_context", "c4_container"],
    "tags": ["data-management", "privacy", "architecture", "c4-plantuml", "kotlin", "compose"],
    "description": "Diagramme de l'architecture de la gestion des données et de la confidentialité pour l'application LemonQwest.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
  },
  {
    "prompt": "Diagramme C4 Context pour l'application Foodscapes montrant les utilisateurs, l'infrastructure DevOps et les équipes scientifiques et d'ingénierie.",
    "code": "@startuml \"Foodscapes contexts\"\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\nPerson(user, \"Users of the application\", \"\")\nBoundary(app, \"Foodscapes application\", \"Web application and associated backend services\")\nPerson(sci_eng_teams, \"Science and engineering teams\", \"\")\nBoundary(devops, \"DevOps infrastructure\", \"Supporting services for development and deployment\")\nRel_R(user, app, \"Users explore Foodscapes maps, data and case studies through the web application\")\nRel_U(sci_eng_teams, devops, \"Science and engineering teams push Foodscapes feature and data updates to the DevOps infrastructure\")\nRel(devops, app, \"Updates to the application are deployed through the supporting DevOps infrastructure\")\nRel(sci_eng_teams, app, \"Science and engineering teams oversee the running application\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "context", "diagramme", "Foodscapes"],
    "description": "Le diagramme décrit les contextes de l'application Foodscapes, en mettant en avant les utilisateurs, l'infrastructure DevOps et les équipes de science et d'ingénierie.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML"
  },
  {
    "prompt": "Diagramme C4 représentant les éléments d'un système de jeu incluant la salle, les objets et les ferramentas.",
    "code": "@startuml C4_Elements\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\nclass Ferramenta{\n    -String nome\n    --\n    +void usar()\n}\nclass Objeto{\n    -String nome\n    -String descricaoAntesAcao\n    -String descricaoDepoisAcao\n    -Boolean acaoOk\n    --\n    +String descricao()\n    +void usar()\n}\nclass Sala{\n    -String nome\n    -Map objetos\n    -Map ferramentas\n    -Map portas\n    -Engine engine\n    --\n    +void pega()\n    +void sai()\n    +void usar()\n}\nclass Engine{\n    -Mochila mochila\n    -Sala salaCorrente\n    -Boolean fim\n    --\n    +void indicaFimDeJogo()\n    +void criaCenario()\n    +void joga()\n}\nSala --> Ferramenta\nSala --> Objeto\nSala --> Sala\nEngine --> Sala\nObjeto <|-- Armario\nObjeto <|-- Bilhete\nObjeto <|-- PoteDeAcucar\nObjeto <|-- PoteDeArroz\nFerramenta <|-- Chave\nFerramenta <|-- Martelo\nEngine <|-- Jogodemo\n@enduml",
    "language": "plantuml",
    "type": "c4_container",
    "tags": ["c4", "plantuml", "uml", "diagramme", "conteneur"],
    "description": "Diagramme C4 représentant les éléments d'un système de jeu, incluant la salle, les objets et les ferramentas.",
    "source": "https://medium.com/@robertdennyson/creating-c4-and-uml-diagrams-using-plantuml-with-vscode-extension-90032a21ec43"
  },
  {
    "prompt": "Diagramme C4 Container pour le site Play My Music LTDA avec différents conteneurs et systèmes externes.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n// Ajouter les conteneurs : login, sélection de musique, sauvegarde de favoris, suppression de compte\n// Ajouter les systèmes externes : authentification Google, site des Correios\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["C4", "Container", "Site de Músicas"],
    "description": "Le diagramme montre le site web \"Play My Music LTDA\" composé de différents conteneurs (login, sélection de musique, sauvegarde de favoris, suppression de compte) et des systèmes externes (autentification Google, site des Correios).",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
  },
  {
    "prompt": "Diagramme C4 Context pour l'application e-commerce montrant les principales entités et leur interactions.",
    "code": "@startuml\n!include ..\\..\\..\\.c4s\\C4_Context.puml\n// Ajouter ici les systèmes, acteurs et relations principales\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["commerce", "e-commerce", "platform", "product", "buying", "merchandising"],
    "description": "Diagramme de contexte pour l'application de commerce électronique",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Diagramme C4 Context montrant les différents services et leur relation dans un cluster de développement.",
    "code": "@startuml\ntitle Development Cluster\ntop to bottom direction\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n// Ajouter les services et leurs relations\n@enduml",
    "langage": "plantuml",
    "type": "c4_context",
    "tags": ["C4", "Context", "Container", "Component"],
    "description": "Diagrame de contexte montrant les différents services et leurs relations.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/"
  },
 {
    "prompt": "Créer un diagramme C4 statique pour la plateforme Big Bank Plc, incluant les systèmes internes et externes associés.",
    "code": "@startuml\n!include ../../../../../../.c4s/C4_Context.puml\nLAYOUT_WITH_LEGEND()\ntitle Diagramme de Contexte - Big Bank Plc\nPerson(customer, \"Client\", \"Utilisateur des services bancaires\")\nSystem(internal_bank_system, \"Système bancaire interne\", \"Gère les comptes et transactions\")\nSystem_Ext(payment_gateway, \"Passerelle de paiement\", \"Service externe de paiement\")\nRel(customer, internal_bank_system, \"Utilise\")\nRel(internal_bank_system, payment_gateway, \"Communique avec\")\nSHOW_LEGEND()\n@enduml",
    "language": "plantuml",
    "type": "c4_context",
    "tags": ["c4_context", "static_diagram", "big_bank_plc"],
    "description": "Diagramme C4 représentant le contexte de la plateforme Big Bank Plc, incluant les systèmes internes et externes associés.",
    "source": "https://github.com/carlosble/C4-PlantUML"
  },
  {
    "prompt": "Créer un diagramme C4 de composants pour un système industriel Mazak-Z, incluant tous les composants et propriétés.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/iofoundry/ontopuml/refs/heads/Development/iof.iuml\nLAYOUT_WITH_LEGEND()\ntitle Diagramme de composants - Système Mazak-Z\nComponent(controller, \"Controller\", \"Gère les mouvements\")\nComponent(sensor, \"Capteur\", \"Mesure la position\")\nComponent(actuator, \"Actionneur\", \"Déplace le moteur\")\nRel(controller, sensor, \"Lit données\")\nRel(controller, actuator, \"Commande\")\nSHOW_LEGEND()\n@enduml",
    "language": "PlantUML",
    "type": "c4_component",
    "tags": ["ontology", "industrial", "equipment", "system"],
    "description": "Diagramme représentant la composition d'un système de motion linéaire Mazak-Z avec ses composants et propriétés.",
    "source": "https://github.com/iofoundry/ontopuml/blob/refs/heads/Development/iof.iuml"
  },
  {
    "prompt": "Créer un diagramme de contexte pour la BDD Bot Application, mettant en évidence les acteurs et systèmes associés.",
    "code": "@startuml C4_Context\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\nLAYOUT_WITH_LEGEND()\ntitle Diagramme de Contexte - BDD Bot Application\nPerson(user, \"Utilisateur\", \"Interagit avec le bot\")\nSystem(bot_system, \"BDD Bot Application\", \"Gère les interactions avec les utilisateurs\")\nSystem_Ext(database, \"Base de données externe\", \"Stocke les informations utilisateurs\")\nRel(user, bot_system, \"Interagit avec\")\nRel(bot_system, database, \"Lit et écrit des données\")\nSHOW_LEGEND()\n@enduml",
    "language": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "Context", "BDD", "Bot", "Application"],
    "description": "Ce diagramme représente le contexte de la BDD Bot Application en mettant en évidence les acteurs, les systèmes et les relations entre eux.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml"
  },
  {
    "prompt": "Créer un diagramme C4 Container pour le système TraderX, incluant les conteneurs Web GUI et services de gestion.",
    "code": "@startuml\n!include ../../../../../../.c4s/C4_Container.puml\nLAYOUT_WITH_LEGEND()\ntitle Diagramme Container - TraderX System\nPerson(user, \"Utilisateur\", \"Utilise le système TraderX\")\nContainer(web_gui, \"Web GUI\", \"React\", \"Interface utilisateur\")\nContainer(account_service, \"Account Service\", \"Java Spring\", \"Gère les comptes\")\nContainerDb(account_db, \"Account DB\", \"MySQL\", \"Stocke les données des comptes\")\nRel(user, web_gui, \"Utilise\")\nRel(web_gui, account_service, \"Appelle\")\nRel(account_service, account_db, \"Lit et écrit\")\nSHOW_LEGEND()\n@enduml",
    "language": "plantuml",
    "type": "c4_container",
    "tags": ["c4", "container", "context", "component"],
    "description": "Diagramme C4 montrant la structure d'un système TraderX, incluant un conteneur Web GUI et un service de gestion des comptes.",
    "source": ""
  },
  {
    "prompt": "Créer un diagramme C4 Container pour le Pickles Wallet System, incluant tous les services et bases de données.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\nLAYOUT_WITH_LEGEND()\ntitle Pickles Wallet System\nPerson(customer, \"Customer\", \"Digital Wallet System customer\")\nSystem_Ext(payment_gateway ,\"Payment Gateway\",\"Payment Processor\")\nSystem_Boundary(wallet_system, \"Digital Wallet System\") {\n    Container(spa, \"SPA\", \"React\", \"Single Page Application\")\n    Container(wallet_core,  \"Wallet Core\", \"Go\", \"Wallet Core is responsible for all transactions\")\n    Container(balance_service,  \"Balance Service\",\"Go\", \"Returns customer balance\")\n    Container(statement_service,  \"Statement Service\", \"Go\",\"Returns customer statements\")\n    Container(payment_acl, \"Payment ACL\",\"Go\",  \"Anticorruption Layer for Payment Gateway\")\n    ContainerDb(wallet_db, \"Wallet DB\", \"MySQL\")\n    ContainerDb(balance_db, \"Balance DB\", \"MySQL\")\n    ContainerDb(statement_db, \"Statement DB\", \"MySQL\")\n    ContainerDb(payment_acl_db, \"Payment DB\", \"MySQL\")\n    Rel(customer, spa, \"Uses\", \"JSON/HTTPS\")\n    Rel(spa, wallet_core, \"Uses\", \"JSON/HTTPS\")\n    Rel(spa, balance_service, \"Uses\", \"JSON/HTTPS\")\n    Rel(spa, statement_service, \"Uses\", \"JSON/HTTPS\")\n    Rel(wallet_core, payment_acl, \"Uses\", \"JSON/HTTPS\")\n    Rel(payment_acl, payment_gateway, \"Uses\", \"JSON/HTTPS\")\n    Rel(wallet_core, balance_service, \"Uses\", \"Topic\", $tags = \"async\")\n    Rel(wallet_core, statement_service, \"Uses\", \"Topic\", $tags = \"async\")\n}\nSHOW_LEGEND()\n@enduml",
    "language": "plantuml",
    "type": "c4_container",
    "tags": ["wallet", "system", "spa", "react", "go", "mysql"],
    "description": "Ce diagramme décrit le système de gestion de portefeuille Pickles. Il montre les différents composants du système, notamment l'application SPA utilisant les services de balance et de statut.",
    "source": ""
  }
,
 {
    "prompt": " Créer un diagramme C4 de niveau composant pour trouver une réservation par UUID, incluant API, middleware, controller et base de données.",
    "code": "@startuml\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\n\nLAYOUT_WITH_LEGEND()\ntitle API Reservation - Component Level\n\nComponent(auth_middleware, \"Auth Middleware\", \"Middleware | NodeJs\", \"Vérifie l'authentification des requêtes\")\nComponent(reservation_controller, \"Reservation Controller\", \"Controller | NodeJs\", \"Gère les requêtes de réservation\")\nComponent(reservation_service, \"Reservation Service\", \"Service | NodeJs\", \"Logique métier pour les réservations\")\nComponent(database, \"Reservation Database\", \"Database | MySQL\", \"Stocke toutes les réservations\")\n\nRel_D(auth_middleware, reservation_controller, \"Filtre et authentifie les requêtes\")\nRel_D(reservation_controller, reservation_service, \"Transmet les requêtes métier\")\nRel_D(reservation_service, database, \"Récupère et stocke les données\")\n\n@enduml",
    "langage": "plantuml",
    "type": "c4_component",
    "tags": ["API", "authentification", "middleware", "controller", "database"],
    "description": "Diagramme C4 décrivant la logique d'un API pour trouver une réservation par UUID.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
  },
  {
    "prompt": " Créer un diagramme C4 de contexte pour le Big Bank Plc, montrant les relations entre les acteurs et les systèmes internes et externes.",
    "code": "@startuml\n!include ../../../.c4s/C4_Context.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red, $shadowing=\"False\")\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\n\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\n\ntitle Big Bank Plc - Context Level\n\nPerson(Customer, \"Customer\", \"A customer of the bank, with personal bank accounts\")\nSystem(InternetBanking, \"Internet Banking\", \"Fournit les services de banque en ligne\")\nSystem_Ext(MainframeBankingSystem, \"Mainframe Banking System\", \"Système bancaire principal\")\nSystem_Ext(EMailSystem, \"E-Mail System\", \"Système interne Microsoft Exchange\")\n\nRel(Customer, InternetBanking, \"Uses\\n[HTTPS]\", $tags='protocol:https')\nRel(InternetBanking, MainframeBankingSystem, \"Uses\\n[TCP/IP]\", $tags='protocol:tcp/ip')\nRel(InternetBanking, EMailSystem, \"Uses\\n[SMTP]\", $tags='protocol:smtp')\nRel(Customer, EMailSystem, \"Uses\\n[POP3]\", $tags='protocol:pop3')\n\nSHOW_LEGEND()\n@enduml",
    "language": "plantuml",
    "type": "c4_context",
    "tags": ["C4", "context", "diagramme", "UML"],
    "description": "Diagramme de contexte C4 décrivant les relations entre les acteurs, les systèmes et les extensions du Big Bank Plc.",
    "source": "https://plantuml.com/fr/"
  },
  {
    "prompt": " Créer un diagramme C4 pour l'application getListTier API en NodeJs, incluant conteneurs et relations entre eux.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nLAYOUT_WITH_LEGEND()\ntitle getListTier API - NodeJs\n\nContainer(WebApp, \"Web Application\", \"NodeJs\", \"Application front-end\")\nContainer(API, \"getListTier API\", \"NodeJs\", \"API pour récupérer la liste des niveaux\")\nContainerDb(Database, \"MySQL Database\", \"Base de données pour stocker les informations\")\n\nRel(WebApp, API, \"Appelle l'API\")\nRel(API, Database, \"Lit et écrit les données\")\n\n@enduml",
    "langage": "plantuml",
    "type": "c4_context",
    "tags": ["C4", "Context", "API", "NodeJs", "Bengkel"],
    "description": "Ce diagramme C4 représente le contexte de l'application getListTier API, qui est une application NodeJs. Il décrit les composants et les conteneurs de l'application, ainsi que les relations entre eux.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
  },
  {
    "prompt": " Créer un diagramme C4 de niveau composant pour l'API bookingGetCarModelList Moadmin, incluant middleware, controller, fonction et base de données.",
    "code": "@startuml\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nLAYOUT_WITH_LEGEND()\ntitle bookingGetCarModelList Moadmin API - NodeJs Katalog API\n\nContainer(Web_Moservice, \"Web Moservice\", \"Website | JavaScript\", \"moservice.id main services for Customer\")\nBoundary(api, \"bookingGetCarModelList Moadmin API\" {\n  Component(auth_middleware, \"auth.verify\", \"Middleware | NodeJs\", \"Middleware for Verification\")\n  Component(reference_controller, \"Reference Controller\", \"Controller | NodeJs\", \"Controller for Reference Related function\")\n  Component(bookingGetCarModelList, \"bookingGetCarModelList\", \"Function | NodeJs\", \"Function to get booking car model list\")\n  Component(getCarModel, \"Mobil.getCarModel\", \"Function | NodeJs\", \"Function to get car model\")\n})\nContainerDb(database, \"Moservice Storage\", \"MySQL Database\", \"Stocke toutes les données du Moservice.id\")\n\nRel_D(Web_Moservice, auth_middleware, \"1. Request get booking car model list\")\nRel_D(auth_middleware, reference_controller, \"2. Request get booking car model list\")\nRel_D(reference_controller, bookingGetCarModelList, \"3. Request get booking car model list\")\nRel_D(bookingGetCarModelList, getCarModel, \"4. Request get booking car model list\")\nRel_D(getCarModel, database, \"5. Get booking car model list\")\n\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["c4", "plantuml", "component"],
    "description": "Diagramme C4 qui montre la structure d'un composant de l'API NodeJs Katalog API, notamment les fonctions et les mécanismes de sécurité.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
  },
  {
    "prompt": " Créer un diagramme C4 de niveau composant pour l'application Catalog API, incluant middleware, controller, service et base de données.",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\..\\....\\.c4s\\C4_Component.puml\n\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red, $shadowing=\"False\")\n\nLAYOUT_WITH_LEGEND()\ntitle Catalog API - Component Level\n\nComponent(auth_middleware, \"Auth Middleware\", \"Middleware | NodeJs\", \"Vérifie les droits d'accès\")\nComponent(catalog_controller, \"Catalog Controller\", \"Controller | NodeJs\", \"Gère les requêtes du catalogue\")\nComponent(catalog_service, \"Catalog Service\", \"Service | NodeJs\", \"Logique métier pour les opérations du catalogue\")\nComponent(database, \"Catalog Database\", \"Database | MySQL\", \"Stocke toutes les données du catalogue\")\n\nRel_D(auth_middleware, catalog_controller, \"Filtre et authentifie les requêtes\")\nRel_D(catalog_controller, catalog_service, \"Transmet les requêtes métier\")\nRel_D(catalog_service, database, \"Récupère et stocke les données\")\n\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["c4", "component"],
    "description": "Diagramme de niveau composant pour l'application Catalog Api",
    "source": ""
  },
  {
    "prompt": " Créer un diagramme C4 de type conteneur pour représenter les éléments et relations associés à une application.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Container View Example\n\n' Définir les conteneurs et relations ici\nContainer(App, \"Application\", \"Java\", \"Application principale\")\nContainer(Db, \"Database\", \"MySQL\", \"Stocke les données\")\nRel(App, Db, \"Lit et écrit les données\")\n\n@enduml",
    "langage": "C4 PlantUML",
    "type": "c4_container",
    "tags": ["C4", "Container", "View"],
    "description": "Diagramme C4 représentant une vue de conteneur avec les éléments et relations associés.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master"
  },
  {
    "prompt": " Créer un diagramme C4 de contexte pour le catalogue API, incluant infrastructure et acteurs.",
    "code": "@startuml\n!include ../../../.c4s/C4_Context.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\n\ntitle Catalog API - Context Level\n\nPerson(Customer, \"Customer\", \"Utilisateur du catalogue API\")\nSystem(CatalogAPI, \"Catalog API\", \"API principale pour les opérations du catalogue\")\nSystem_Ext(Database, \"Catalog Database\", \"Base de données MySQL\")\n\nRel(Customer, CatalogAPI, \"Utilise l'API pour consulter le catalogue\")\nRel(CatalogAPI, Database, \"Lit et écrit les données\")\n\n@enduml",
    "language": "plantuml",
    "type": "c4_context",
    "tags": ["c4_context", "catalog_api", "infrastructure", "context_level"],
    "description": "Diagramme de contexte C4 décrivant la structure d'un catalogue API et son infrastructure, au niveau du contexte.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/"
  },
  {
    "prompt": " Créer un diagramme C4 de type conteneur pour un système de mini URL incluant Web, base de données et cache.",
    "code": "@startuml mini_url_container\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nLAYOUT_WITH_LEGEND()\ntitle Mini URL System - Container View\n\nPerson(User, \"User\", \"Utilisateur du service\")\nContainer(WebApp, \"Web App\", \"NodeJs\", \"Application front-end\")\nContainer(Db, \"URL Database\", \"MySQL\", \"Stocke les URL et redirections\")\nContainer(Cache, \"Cache\", \"Redis\", \"Stocke les URL fréquemment utilisées\")\n\nRel(User, WebApp, \"Soumet les URL à raccourcir\")\nRel(WebApp, Db, \"Lit et écrit les URL\")\nRel(WebApp, Cache, \"Lit et écrit les URL mises en cache\")\n\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["C4-PlantUML", "Container", "System_Boundary", "Enterprise_Boundary", "Person", "Rel"],
    "description": "Ce diagramme montre l'architecture d'un système de mini URL avec un conteneur et plusieurs systèmes, dont un pour la base de données et un pour le cache.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
  },
 {
    "prompt": "C4 Component Diagram for createBusiness Bengkel API using NodeJs",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nLAYOUT_WITH_LEGEND()\ntitle createBusiness Bengkel API\nContainer(Web_Moservice, \"Web Moservice\", \"Website | JavaScript\", \"Moservice.id Main Services for Customer\")\nBoundary(api, \"createBusiness Bengkel API [Component]\"){\n  Component(Business, \"Business Controller\", \"Controller | NodeJs\", \"Controller for Business Function related\\n(NodeJs Bengkel API)\")\n  Component(createBusiness, \"createBusiness\", \"Function | NodeJs\", \"Function for Create Business data\\n(NodeJs Bengkel API)\")\n  Component(create, \"Business.create\", \"Function | NodeJs\", \"Function for Create Business data\\n(NodeJs Bengkel API)\")\n}\nContainerDb(database, \"Moservice Storage\", \"mySQL Database\", \"All store for save data and content for Moservice.id\")\nRel(Web_Moservice, Business, \"1. Request Create Business data\")\nRel(Business, createBusiness, \"2. Request Create Business data\")\nRel(createBusiness, create, \"3. Request Create Business data\")\nRel(create, database, \"4. Create Business data\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["C4-PlantUML", "Component", "NodeJs", "API"],
    "description": "Diagramme C4 Component décrivant la structure d'un composant logiciel, notamment le contrôleur de business et les fonctions liées à la création de données.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
  },
  {
    "prompt": "C4 Container Sequence Diagram for E Commerce Platform - Fraud Management API",
    "code": "@startuml\n!include ../../../../../../.c4s/C4_Sequence.puml\n\ntitle E Commerce Platform - Fraud Management - API - Update Order Fraud Check Result\nSystem_Ext(User, \"External User\")\nSystem(ECommercePlatform, \"Deliver Fraud Service\", \"Handles fraud management\")\nContainer(FraudService, \"Fraud Service\", \"Microservice\", \"Manages fraud detection\")\nDatabase(Db, \"Fraud Database\", \"mySQL\")\nRel(User, FraudService, \"Send Fraud Check Request\")\nRel(FraudService, Db, \"Read/Write Fraud Data\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["c4_sequence", "container_level", "fraud_management", "api", "database", "messaging"],
    "description": "Ce diagramme C4 illustre la structure du service de gestion des fraude dans l'application e-commerce Deliver. Il montre les composants et les relations entre eux.",
    "source": ""
  },
  {
    "prompt": "C4 Container Diagram for Diet Planner System",
    "code": "@startuml\n!include <c4/C4_Container>\nPerson(user, \"Application User\", \"A user of the Diet Planner application\")\nSystem_Boundary(dietPlanner, \"Diet Planner System\") {\n    Container(webApp, \"Web Application\", \"React\", \"Web-based access to the Diet Planner\")\n    Container(mobileApp, \"Mobile Application\", \"React Native\", \"Mobile access to the Diet Planner\")\n    Container(api, \"API Server\", \"Spring Boot\", \"Provides diet planning functionality via REST API\")\n    Container(desktop, \"Desktop Application\", \"Java Swing\", \"Provides diet planning functionality to users\")\n    ContainerDb(db, \"Database\", \"SQLite\", \"Stores user accounts, meals, foods, and nutritional data\")\n}\nRel(user, webApp, \"Uses\", \"HTTP/HTTPS\")\nRel(user, mobileApp, \"Uses\", \"HTTP/HTTPS\")\nRel(user, desktop, \"Uses\")\nRel(webApp, api, \"Uses\", \"JSON/HTTPS\")\nRel(mobileApp, api, \"Uses\", \"JSON/HTTPS\")\nRel(api, db, \"Reads/Writes\", \"JDBC\")\nRel(desktop, db, \"Reads/Writes\", \"JDBC\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["C4", "Container Diagram", "Diet Planner", "Application User"],
    "description": "Ce diagramme C4 montre la structure du système de planification alimentaire, y compris les composants web, mobile, API et base de données.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "C4 Container Diagram for Authentication and Services Architecture",
    "code": "@startuml C4-Container\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\nSystem_Boundary(authSystem, \"Auth & Services\") {\n  Container(authService, \"Auth Service\", \"NodeJs\", \"Handles authentication and authorization\")\n  Container(cache, \"Redis Cache\", \"Redis\", \"Cache for sessions\")\n  Container(queue, \"RabbitMQ\", \"Messaging\", \"Handles asynchronous messages\")\n  Container(db, \"Postgres\", \"Database\", \"Stores user and auth data\")\n}\nRel(authService, db, \"Reads/Writes user data\")\nRel(authService, cache, \"Reads/Writes session\")\nRel(authService, queue, \"Sends events\")\n@enduml",
    "langage": "C4 PlantUML",
    "type": "c4_container",
    "tags": ["authentification", "service", "API", "Postgres", "RabbitMQ", "Redis", "cache"],
    "description": "Diagramme C4 de conteneur représentant l'architecture du système d'autorisation, des services et des bases de données.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
  },
  {
    "prompt": "C4 Container Diagram for Basket Service in E-commerce Platform",
    "code": "@startuml\n!include ../../../../../../.c4s/C4_Container.puml\nSystem_Boundary(basketService, \"Basket Service\") {\n  Container(webApi, \"Web API\", \".NET Core\", \"Handles basket operations\")\n  Container(database, \"SQL Database\", \"SQL Server\", \"Stores basket data\")\n}\nRel(webApi, database, \"Reads/Writes basket data\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["c4", "diagramme", "conteneur", "système"],
    "description": "Diagramme C4 du conteneur \"Basket Service\" dans le contexte d'une plateforme e-commerce.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 de conteneur pour Basket API",
    "code": "@startuml\n!include ../../../../../../../../.c4s/C4_Container.puml\n\ntitle Basket API - Container Level\nSystem_Boundary(BasketAPI, \"Basket API\") {\n    Container(BasketService, \"Basket Service\", \"REST API\", \"Gère les opérations de panier pour les clients\")\n    Container(Database, \"Basket DB\", \"SQL Database\", \"Stocke les informations des paniers des clients\")\n    Container(GrpcService, \"gRPC Service\", \"gRPC\", \"Exposition des services basket pour d'autres systèmes\")\n}\nRel(BasketService, Database, \"CRUD\")\nRel(GrpcService, BasketService, \"Invoke basket operations\")\n@enduml",
    "language": "PlantUML",
    "type": "c4_container",
    "tags": ["c4", "container", "basket api", "grpc"],
    "description": "Diagramme C4 représentant la structure d'un conteneur au niveau de l'application Basket Api.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 contextuel pour Internet Banking de Big Bank Plc",
    "code": "@startuml\n!include ../../../../../../.c4s/C4_Context.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red, $shadowing=\"False\")\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\n\ntitle Big Bank Plc - Internet Banking - Context Level\nSystem(BigBankPlc.SoftwareSystems.InternetBanking, \"Internet Banking\", \"Service bancaire en ligne\")\nSystem_Ext(BigBankPlc.SoftwareSystems.MainframeBankingSystem, \"Mainframe Banking System\", \"Système bancaire central\")\nRel(BigBankPlc.SoftwareSystems.InternetBanking, BigBankPlc.SoftwareSystems.MainframeBankingSystem, \"Get Account Transactions\")\nSHOW_LEGEND()\n@enduml",
    "language": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "context", "diagramme"],
    "description": "Diagramme C4 représentant le contexte de l'Internet Banking de Big Bank Plc, montrant les relations entre les composants du système.",
    "source": "https://www.plantuml.com/"
  },
  {
    "prompt": "Diagramme C4 de composant pour un réseau Kubernetes",
    "code": "@startuml\n!global $INCLUSION_MODE=\"local\"\n!global $LIB_BASE_LOCATION=\"../..\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('c4k8s/bootstrap')\ninclude('c4k8s/Element/NetworkPolicy')\nNetworkPolicy('NetworkPolicy', 'Network Policy', 'Permet de restreindre le trafic réseau dans un cluster Kubernetes')\n@enduml",
    "language": "PlantUML",
    "type": "c4_component",
    "tags": ["C4", "Component"],
    "description": "Définit un réseau politique avec son nom et une description.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 de composant pour un utilisateur externe",
    "code": "@startuml\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('c4model/bootstrap')\ninclude('c4model/Element/ExternalPerson')\nExternalPerson('ExternalPerson', 'External Person', 'Utilisateur externe accédant au système', 'HTTP/REST')\n@enduml",
    "language": "PlantUML",
    "type": "c4_component",
    "tags": ["C4", "Component", "ExternalPerson"],
    "description": "Définit un composant externe appelé External Person avec une description et une technologie associées.",
    "source": "https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution"
  },
  {
    "prompt": "Diagramme C4 contextuel pour l'e-Shop Dot Net",
    "code": "@startuml\n!include ../../../../../../../../.c4s/C4_Context.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red, $shadowing=\"False\")\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\n\ntitle Dot Net E Shop - Catalog Api - Infrastructure - Catalog Context\nSystem(DotNetEShop.SoftwareSystems.CatalogApi, \"Catalog Api\", \"Gère les services de catalogue pour l'e-Shop\")\nSystem_Ext(ExternalSystem, \"External System\", \"Système externe interagissant avec le catalogue\")\nRel(DotNetEShop.SoftwareSystems.CatalogApi, ExternalSystem, \"Synchronisation des données\")\nSHOW_LEGEND()\n@enduml",
    "language": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "context", "lifecycle", "DotNetEShop", "CatalogApi"],
    "description": "Diagramme C4 Context décrivant le contexte du catalogue d'une e-Shop Dot Net, montrant les relations entre les éléments de l'infrastructure du catalogue.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML"
  },
  {
    "prompt": "Diagramme C4 conteneur pour un système de gestion de prêts",
    "code": "@startuml desenho-arquitetura\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons\n!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5\n!include DEVICONS/go.puml\n!include DEVICONS/mongodb.puml\nleft to right direction\nSystem_Boundary(fluxo, \"Bank\") {  \n    Container(LoanAPI, \"Loan API\", \"Golang\", \"API de gestion de prêts\")\n    Container(RiskWorker, \"Risk Worker\", \"Golang\", \"Analyse le risque des prêts\")\n    Container(RabbitMQ, \"reservation-notifier\", \"RabbitMQ\", \"Queue pour analyse de risque\")\n    ContainerDb(CustomerDB, \"Customer DB\", \"MongoDB\", \"Informations clients\")\n    ContainerDb(LoanDB, \"Loan DB\", \"MongoDB\", \"Informations prêts\")\n    Container(CustomerAPI, \"Customer API\", \"Golang\", \"Gestion clients\")\n\n    Rel(CustomerAPI, CustomerDB, \"Création et recherche de clients\", \"go.mongodb.org/mongo-driver\")\n    Rel_R(LoanAPI, CustomerAPI, \"Vérifie si client existe\", \"http/json\")\n    Rel_L(LoanAPI, LoanDB, \"Création demande de prêt\", \"go.mongodb.org/mongo-driver\")\n    Rel(LoanAPI, RabbitMQ, \"Envoi événement LoanMade\", \"amqp\")\n    Rel_R(RabbitMQ, RiskWorker, \"Analyse risque prêt\", \"amqp\")\n    Rel(RiskWorker, LoanAPI, \"Mise à jour état prêt\", \"amqp\")\n}",
    "language": "PlantUML",
    "type": "c4_container",
    "tags": ["C4", "conteneur", "architecture", "Golang", "MongoDB", "RabbitMQ"],
    "description": "Ce diagramme C4 montre l'architecture d'un système de gestion de prêts. Il décrit les conteneurs, leurs relations et les services qui y sont associés.",
    "source": "https://github.com/tupadr3/plantuml-icon-font-sprites"
  }
,{
    "prompt": "Diagramme C4 de composants pour l'application TodoList",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\n\ntitle TodoList Application - Component Level\nContainer(TodoApp, \"TodoList App\", \"Application Web\", \"Application de gestion de tâches\") {\n    Component(TodoController, \"Todo Controller\", \"REST API\", \"Gère les requêtes CRUD des tâches\")\n    Component(TodoService, \"Todo Service\", \"Service\", \"Logique métier pour la gestion des tâches\")\n    Component(TodoRepository, \"Todo Repository\", \"Database\", \"Stocke les tâches dans la base de données\")\n}\nRel(TodoController, TodoService, \"Appelle\")\nRel(TodoService, TodoRepository, \"CRUD\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "contenu", "diagramme", "modèle", "plantuml", "uml", "UML"],
    "description": "Ce diagramme C4 représente le modèle de contenu d'une application TodoList. Il montre les composants, les relations entre eux et la base de données.",
    "source": "@startuml !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml ... @enduml"
  },
  {
    "prompt": "Diagramme C4 montrant les utilisateurs d'un produit",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\nSHOW_PERSON_OUTLINE()\nAddElementTag(users, $bgColor=\"#DDDDDD\", $borderColor=\"#DDDDDD\", $fontColor=\"#000000\")\nPerson(customer, \"Customers\", \"Utilisateurs qui achètent des produits\", $tags=users)\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["customer", "user", "product"],
    "description": "Diagramme C4 montrant les utilisateurs qui achètent des produits.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
  },
  {
    "prompt": "System Landscape diagram pour Big Bank plc",
    "code": "@startuml\n!include <C4/C4_Context>\n\ntitle Big Bank plc - System Landscape\nSystem_Ext(InternetBanking, \"Internet Banking\", \"Système bancaire en ligne\")\nSystem_Ext(ATM, \"ATM\", \"Distributeur automatique de billets\")\nSystem_Ext(EmailSystem, \"Email System\", \"Système de messagerie\")\nSystem_Ext(MainframeBanking, \"Mainframe Banking System\", \"Système bancaire central\")\nRel(InternetBanking, MainframeBanking, \"Obtenir transactions\")\nRel(ATM, MainframeBanking, \"Consulter solde\")\nRel(EmailSystem, InternetBanking, \"Envoi notifications\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["system_landscape", "big_bank_plc", "internet_banking", "atm", "email_system", "mainframe"],
    "description": "Diagramme montrant l'architecture du système de la banque Big Bank plc, comprenant des systèmes d'internet banking, d'ATM et de messagerie.",
    "source": "https://plantuml.com/"
  },
  {
    "prompt": "Diagramme C4 Container pour Checkout dans une application e-commerce",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\n\ntitle EcommerceApplication - Checkout Container\nContainer_Boundary(\"EcommerceApplication.EcommerceApplication_boundary\", \"EcommerceApplication\") {\n  Component(Common, \"Common\", \"Module\", \"Modules communs\")\n  Component(Checkout, \"Checkout\", \"Module\", \"Gestion du processus de paiement\")\n}\nRel_D(Checkout, Common, \"utilise\")\nSHOW_LEGEND(true)\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["C4", "Container", "Boundary"],
    "description": "Diagramme C4 représentant la frontière d'application de l'EcommerceApplication.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML"
  },
  {
    "prompt": "Diagramme C4 Container pour l'architecture Contralto",
    "code": "@startuml \"Contralto Container Diagram\"\n!include ../C4-PlantUML/C4_Context.puml\n!include ../C4-PlantUML/C4_Container.puml\n!include ../C4-PlantUML/C4_Component.puml\n\nskinparam wrapWidth 200\nLAYOUT_LEFT_RIGHT\n\nPerson_Ext(user, \"Telegram User\", \"Utilisateur Telegram\")\nSystem_Boundary(c1, \"Telegram\") {\n    System_Ext(telegramWebhookService, \"Telegram Webhook Server\")\n}\nSystem_Boundary(c2, \"AWS\") {\n    Container(awsAPIGateway, \"Webhook Gateway\", \"AWS API Gateway\", \"Reçoit les webhooks\")\n    Container(processingQueue, \"Task Processing Queue\", \"SQS\", \"File pour traitement des tâches\")\n    Container(requestQueue, \"Network Requests Queue\", \"SQS\", \"File pour requêtes réseau\")\n    Container(processingLambda, \"Processing Lambda\", \"AWS Lambda\", \"Traitement\")\n    Container(requestLambda, \"Network Request Lambda\", \"AWS Lambda\", \"Requêtes externes\")\n    ContainerDb(dynamoDb, \"Tenor ID Store\", \"DynamoDB\", \"Stockage IDs Tenor\")\n}\nSystem_Boundary(c3, \"Tenor API\") {\n    System_Ext(tenorApiService, \"Tenor API Gateway\")\n}\nRel(user, telegramWebhookService, \"Envoie requête\")\nRel(telegramWebhookService, awsAPIGateway, \"POST webhook\")\nRel(awsAPIGateway, processingQueue, \"Queue Search Query\")\nRel_Neighbor(processingQueue, processingLambda, \"Invoke\")\nRel(processingLambda, requestQueue, \"Queue Network Requests\")\nRel_Neighbor(requestQueue, requestLambda, \"Invoke\")\nRel(requestLambda, processingQueue, \"Queue Responses\")\nRel(requestLambda, tenorApiService, \"Requête API\")\nRel(requestLambda, dynamoDb, \"Query Tenor ID\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["container", "AWS", "Telegram", "API Gateway"],
    "description": "Diagramme montrant les différentes couches de l'architecture Contralto, les composants et les flux de données.",
    "source": "https://github.com/contralto/container-diagram"
  },
  {
    "prompt": "Diagramme C4 Container pour le protocole Humain - Human API",
    "code": "@startuml\n!include https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml\n\ntitle Human Protocol - Human API\nContainer(HumanAPI, \"Human API\", \"REST API\", \"API pour le protocole humain\")\nContainerDb(HumanDB, \"Human DB\", \"Database\", \"Stocke les informations humaines\")\nRel(HumanAPI, HumanDB, \"CRUD\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["C4", "Container Diagram", "Human Protocol", "Human API"],
    "description": "Diagramme de conteneur pour le protocole Humain - L'API Humaine.",
    "source": "https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml"
  }
,{
    "prompt": "@startuml social_network_context",
    "code": "@startuml social_network_context\n!include tmpl/C4_Context.puml\nSHOW_PERSON_OUTLINE()\nPerson(user, \"User\", \"Utilisateur du réseau social\")\nSystem(social_network, \"Social Network\", \"Plateforme réseau social\")\nRel(user, social_network, \"Interagit avec\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["social_network", "user", "system"],
    "description": "Diagramme de contexte d'un réseau social avec les relations entre utilisateur et système.",
    "source": "@startuml social_network_context"
  },
  {
    "prompt": "Diagramme C4 Context avec utilisateurs, films et messagerie",
    "code": "@startuml\n!include tmpl/C4_Context.puml\nSHOW_PERSON_OUTLINE()\nPerson(user, \"User\", \"Utilisateur\")\nSystem(movies, \"Movies\", \"Service de films\")\nSystem_Ext(mail_system, \"E-mail\", \"Système de messagerie\")\nRel_Down(user, movies, \"Utilise\")\nRel_Up(mail_system, user, \"Envoie notifications\")\nRel_Right(movies, mail_system, \"Envoie e-mails\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "Context", "diagramme"],
    "description": "Ce diagramme C4 montre le contexte d'une application avec des utilisateurs, des films et un système de messagerie.",
    "source": "https://example.com"
  },
  {
    "prompt": "Diagramme C4 Context pour le déploiement d'une application web avec MongoDB et Docker",
    "code": "@startuml\n!include tmpl/C4_Context.puml\nSystem(web_app, \"Web App\", \"Application Web\")\nContainerDb(mongoDB, \"MongoDB\", \"Base de données\", \"Stocke les données de l'application\")\nContainer(web_container, \"Web Container\", \"Docker\", \"Conteneur de déploiement\")\nRel(web_app, mongoDB, \"CRUD\")\nRel(web_app, web_container, \"Déployé sur\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "déploiement", "MongoDB", "Docker"],
    "description": "Le diagramme représente le déploiement d'une application web avec une base de données MongoDB et des conteneurs Docker.",
    "source": "./lib/C4_Deployment.puml, ./lib/C4_Container.puml"
  },
  {
    "prompt": "Diagramme C4 Context pour l'architecture To Do App",
    "code": "@startuml\n!include tmpl/C4_Context.puml\nSystem(ToDoApp, \"To Do App\", \"Application de gestion de tâches\")\nContainer(ToDoFrontend, \"Frontend\", \"Application Web\")\nContainer(ToDoBackend, \"Backend\", \"Service API\")\nRel(ToDoFrontend, ToDoBackend, \"Appelle API\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["c4", "context", "container", "component"],
    "description": "Le diagramme représente l'architecture du système To Do App, en montrant les différents conteneurs et leurs relations.",
    "source": "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/refs/heads/main/icons"
  },
  {
    "prompt": "Diagramme C4 Sequence pour la gestion des commandes e-commerce et vérification anti-fraude",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\..\\..\\.c4s\\C4_Sequence.puml\n\ntitle E Commerce Platform - Order Service - Fraud Check\nSystem_Ext(ExternalSystem, \"External System\", \"\")\nSystem(OrderService, \"Order Service\", \"Gère les commandes\")\nSystem(FraudService, \"Fraud Service\", \"Vérification anti-fraude\")\n\nRel(ExternalSystem, OrderService, \"Handle Fraud Check Result Event\")\nRel(OrderService, FraudService, \"Receive Fraud Check Result Event\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4 Sequence Diagram", "Context Level", "E Commerce Platform"],
    "description": "Ce diagramme C4 démontre la séquence de traitement pour gérer les demandes d'un e-commerce, en intégrant une vérification anti-fraude.",
    "source": "https://github.com/plantuml-stdlib/C4/blob/master/diagrams/C4_Sequence.puml"
  },
  {
    "prompt": "Diagramme C4 Context pour une application avec divers services et composants",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\nSystem(App, \"Application\", \"Application avec plusieurs services\")\nContainer(Service1, \"Service 1\", \"Service\", \"Premier service\")\nContainer(Service2, \"Service 2\", \"Service\", \"Deuxième service\")\nRel(App, Service1, \"Appelle\")\nRel(App, Service2, \"Appelle\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "plantuml", "diagramme"],
    "description": "Diagramme C4 montrant la structure d'une application avec divers services et composants.",
    "source": ""
  }
,{
    "prompt": "Diagramme C4 Container pour un jeu en temps réel",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\nHIDE_STEREOTYPE()\nContainer(GameEngine, \"Game Engine\", \"OOP\", \"Moteur de jeu en temps réel\")\nContainer(Player, \"Player\", \"OOP\", \"Joueur\")\nContainer(GameWorld, \"Game World\", \"OOP\", \"Monde du jeu\")\nRel(Player, GameEngine, \"Interagit avec\")\nRel(GameEngine, GameWorld, \"Gère\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["game", "oop", "plantuml"],
    "description": "Diagramme de classes pour un jeu en temps réel, avec les éléments du jeu et leurs relations.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 Context du système de pop-ups",
    "code": "@startuml\n!include <C4/C4_Component>\nLAYOUT_WITH_LEGEND()\ntitle 弹幕列表组件图\nSystem(PopupSystem, \"Popup System\", \"Système gérant les pop-ups\")\nComponent(ListComponent, \"List Component\", \"Composant pour l'affichage des pop-ups\")\nRel(ListComponent, PopupSystem, \"Communique avec\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "context", "diagramme"],
    "description": "Le diagramme présente le contexte du système de pop-ups en montrant les différents composants et systèmes impliqués.",
    "source": "PlantUML"
  },
  {
    "prompt": "Diagramme C4 Container pour les ressources Azure",
    "code": "@startuml\n!pragma revision 1\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n!define AzurePuml https://raw.githubusercontent.com/plantuml-stdlib/Azure-PlantUML/master/dist\n!includeurl AzurePuml/AzureCommon.puml\n!includeurl AzurePuml/AzureC4Integration.puml\n!includeurl AzurePuml/Management/AzureResourceGroups.puml\n\nAzureResourceGroups(cloud_shell_storage_westeurope, 'cloud-shell-storage-westeurope', 'Azure Resource Group')\nAzureStorage(csb100320041428ff8f, 'csb100320041428ff8f', 'Microsoft.Storage/storageAccounts')\nAzureStorage(csb1003200033b9b8b7, 'csb1003200033b9b8b7', 'Microsoft.Storage/storageAccounts')\nRel(cloud_shell_storage_westeurope, csb100320041428ff8f, 'Uses', 'Resource')\nRel(cloud_shell_storage_westeurope, csb1003200033b9b8b7, 'Uses', 'Resource')\nLAYOUT_WITH_LEGEND()\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["Azure", "C4-Container", "ResourceGroup"],
    "description": "Diagramme C4 représentant les ressources Azure et leurs relations.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 Sequence pour la gestion des prix sur une plateforme e-commerce",
    "code": "@startuml\n!include ../../../../../../../../.c4s/C4_Sequence.puml\n\ntitle E-Commerce Platform - Price Management Sequence\nSystem_Ext(ExternalSystem, \"External System\", \"\")\nSystem(ProductService, \"Product Service\", \"Gère les produits\")\nSystem(PriceService, \"Price Service\", \"Gère les prix\")\nRel(ExternalSystem, ProductService, \"Crée/Met à jour un produit\")\nRel(ProductService, PriceService, \"Met à jour le prix\")\n@enduml",
    "language": "PlantUML",
    "type": "c4_sequence",
    "tags": ["C4", "sequence", "diagramme", "PlantUML", "ecommerce", "price_management"],
    "description": "Diagramme C4 Sequence représentant le processus de création et de gestion d’un produit dans une plateforme e-commerce, incluant les interactions entre les services liés au prix.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML"
  },
  {
    "prompt": "Diagramme C4 Container des relations des composants métiers des biens",
    "code": "@startuml \"goods_relations\"\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\nSystem(GoodsService, \"Goods Service\", \"Service de gestion des biens\")\nContainer(GoodsDB, \"Goods Database\", \"Base de données\", \"Stocke les informations des biens\")\nContainer(GoodsSearch, \"Goods Search\", \"Service\", \"Indexe les biens pour recherche\")\nRel(GoodsService, GoodsDB, \"Stocke les informations\")\nRel(GoodsService, GoodsSearch, \"Indexe les informations\")\n@enduml",
    "langage": "puml",
    "type": "c4_container",
    "tags": ["C4", "container", "PlantUML", "uml"],
    "description": "Le diagramme représente les relations entre les composants de la logique métier liée aux biens.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
  }
, {
    "prompt": "Diagramme C4 Container illustrant l’architecture d’un système e-commerce",
    "code": "@startuml\n!include ../../../../../../.c4s/C4_Container.puml...\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")...\n@enduml",
    "language": "PlantUML",
    "type": "c4_container",
    "tags": ["C4", "container", "PlantUML", "architecture", "ecommerce", "analyse", "modele"],
    "description": "Diagramme C4 Container illustrant l’architecture d’un système e-commerce. Il montre les relations entre les composants principaux, tels que l’application Storefront App, le service de gestion des commandes et le service de gestion des paniers.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML"
  },
  {
    "prompt": "Diagramme C4 Container représentant une architecture Azure",
    "code": "@startuml\n!pragma revision 1\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n... (le reste du code)\n@enduml",
    "langage": "plantuml",
    "type": "c4_container",
    "tags": ["azure", "resource_group", "data_factory", "managed_identity", "storage", "system_topic"],
    "description": "Diagrame C4 représentant une architecture Azure avec des ressources et des identités gérées.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
  },
  {
    "prompt": "Diagramme C4 Container pour l'application Modulith",
    "code": "' Generated with Spring Modulith\n@startuml\n\ntitle ModulithApplication\n\ntop to bottom direction\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nContainer_Boundary(\"ModulithApplication.ModulithApplication_boundary\", \"ModulithApplication\", $tags=\"\") {\n  Component(ModulithApplication.ModulithApplication.Ui, \"Ui\", \"Module\", \"\", $tags=\"\")\n  ' ... ajouter d'autres composants ici\n}\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["Spring", "Modulith", "C4", "Container"],
    "description": "Diagramme de container C4 représentant l'application Modulith avec ses modules et leurs relations.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML"
  },
  {
    "prompt": "Diagramme C4 Component pour Basket API",
    "code": "@startuml\n!include ..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\.c4s\\\\C4_Component.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\n' ... ajouter ici les composants et relations\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["component", "c4", "plantuml"],
    "description": "Diagramme C4 Component décrivant la structure d'un composant de l'application Basket Api",
    "source": "https://github.com/C4Model/C4-PlantUML"
  },
  {
    "prompt": "Diagramme C4 Component de l'API Mission",
    "code": "@startuml\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nLAYOUT_WITH_LEGEND()\ntitle remove Mission API\\n[mos-bengkel-service]\nContainer(Web_Moservice, \"Web Moservice\", \"Website | JavaScript\", \"moservice.id main services for Customer\")\nBoundary(api, \"remove Mission API\\n[Component]\"){\nComponent(mission_controller, \"Mission Controller\", \"Controller | TypeScript\", \"Controller for Mission Related Function\\n(mos-bengkel-service)\")\nComponent(auth_operator_middleware, \"Auth Operator Middleware\", \"Middleware | TypeScript\", \"Middleware for Authentication\\n(mos-bengkel-service)\")\nComponent(mainMiddleware, \"Main Middleware\", \"Middleware | TypeScript\", \"Main Middleware for Moservice.id\\n(mos-bengkel-service)\")\nComponent(removeMission, \"removeMission\", \"Function | TypeScript\", \"Main Function for Remove Mission data by ID\\n(mos-bengkel-service)\")\nComponent(updateMission, \"MissionRepository.update\", \"Function | TypeScript\", \"Function for Update Mission data by ID\\n(mos-bengkel-service)\")\n}\nContainerDb(database, \"Moservice Storage\", \"mySQL Database\", \"All store for save data and content for Moservice.id\")\nRel_D(Web_Moservice, mainMiddleware, \"1. Request Remove Mission data by ID\")\nRel_D(mainMiddleware, auth_operator_middleware, \"2. Request Remove Mission data by ID\")\nRel_D(auth_operator_middleware, mission_controller, \"3. Request Remove Mission data by ID\")\nRel_D(mission_controller, removeMission, \"4. Request Remove Mission data by ID\")\nRel_D(removeMission, updateMission, \"5. Remove Mission data by ID\")\nRel_D(updateMission, database, \"6. Update Mission data by ID\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["C4", "Component", "Container", "Boundary", "Database"],
    "description": "Diagramme C4 Component décrivant la structure et le fonctionnement de l'API Mission.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
  },
  {
    "prompt": "Diagramme C4 Container pour SRVCE et agent de contrôle",
    "code": "@startuml\n!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Container.puml\nLAYOUT_LEFT_RIGHT()\n...\\n@enduml",
    "langage": "plantuml",
    "type": "c4_container",
    "tags": ["c4", "plantuml", "container"],
    "description": "Diagramme C4 de type container décrivant les interactions entre un système SRVCE, un agent de contrôle de endémies et la population.",
    "source": "@startuml\n!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Container.puml..."
  },
  {
    "prompt": "Diagramme C4 Container intégrant un système externe",
    "code": "@startuml\\n!global $INCLUSION_MODE=\\\"local\\\"\\n!global $LIB_BASE_LOCATION=\\\"../..\\\"\\n!include $LIB_BASE_LOCATION/bootstrap.puml\\ninclude('c4model/bootstrap')\\ninclude('c4model/Element/ExternalSystem')\\nExternalSystem('ExternalSystem', 'External System', 'an optional description label', 'an optional tech label')\\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["c4", "container", "external system"],
    "description": "Le diagramme décrit un conteneur d'application qui intègre un système externe. Le système externe est représenté par l'élément ExternalSystem.",
    "source": "https://github.com/plantuml/plantuml-include"
  }
,{
    "prompt": "Diagramme C4 Container montrant les conteneurs d'un système d'exemples",
    "code": "@startuml example-system-containers\n!include <C4/C4_Container>\nLAYOUT_WITH_LEGEND()\ntitle Conteneurs du système d'exemples\n\nContainer(WebApp, \"Application Web\", \"HTML, CSS, JS\", \"Interface utilisateur principale\")\nContainer(APIApp, \"API Application\", \"Node.js\", \"Expose les endpoints pour la web app\")\nContainerDb(MongoDB1, \"Base de données MongoDB\", \"MongoDB\", \"Stocke les informations de l'application web\")\nContainerDb(MongoDB2, \"Base de données MongoDB\", \"MongoDB\", \"Stocke les informations de l'API\")\n\nRel(WebApp, APIApp, \"Appelle les endpoints\")\nRel(APIApp, MongoDB1, \"Lit/Écrit\")\nRel(APIApp, MongoDB2, \"Lit/Écrit\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["Container", "Diagramme", "Système d'exemples", "Web Application", "API Application", "Base de données MongoDB"],
    "description": "Ce diagramme C4 montre les conteneurs du système d'exemples, comprenant une application web, une API et deux bases de données.",
    "source": "https://github.com/C4Model/C4-PlantUML#readme"
  },
  {
    "prompt": "Diagramme C4 Context montrant l'architecture du système d'analyse des dépôts GitHub",
    "code": "@startuml Repository_Analysis_Architecture\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nPerson(user, \"Utilisateur\")\nSystem_Boundary(c1, \"Système d'Analyse de Repositories\") {\n  Container(WebApp, \"Web Application\", \"Python, Flask\", \"Permet l'analyse des dépôts GitHub\")\n  ContainerDb(DB, \"Base de données\", \"MySQL\", \"Stocke les informations des dépôts et analyses\")\n  Container(Archive, \"Archive\", \"File Storage\", \"Stocke les résultats d'analyse\")\n}\nSystem_Ext(MailSystem, \"Système e-mail\")\nSystem(GitHub, \"GitHub\")\n\nRel_Down(user, WebApp, \"Utilise\")\nRel_Down(WebApp, DB, \"Lit/Écrit\")\nRel_Down(WebApp, GitHub, \"Récupère les dépôts\")\nRel_Down(WebApp, Archive, \"Écrit les résultats\")\nRel_Down(WebApp, MailSystem, \"Crée des e-mails\")\nRel_Up(MailSystem, user, \"Envoie des e-mails\")\n@enduml",
    "language": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "context", "architecture", "repository", "analysis"],
    "description": "Diagramme de contexte C4 pour l'architecture du système d'analyse des dépôts GitHub.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/blob/master/C4_Container.puml"
  },
  {
    "prompt": "Diagramme C4 Context du système de banque en ligne",
    "code": "@startuml InternetBankingContext\n!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Context.puml\n\nPerson(Customer, \"Client\")\nSystem(InternetBanking, \"Système de banque en ligne\")\nSystem_Ext(MailSystem, \"Système e-mail\")\nSystem_Ext(Mainframe, \"Mainframe bancaire\")\n\nRel(Customer, InternetBanking, \"Utilise\")\nRel(InternetBanking, Mainframe, \"Récupère les informations financières\")\nRel(InternetBanking, MailSystem, \"Envoie les notifications\")\n@enduml",
    "langage": "plantuml",
    "type": "c4_context",
    "tags": ["context", "system", "customer", "banking_system", "mail_system", "mainframe"],
    "description": "Ce diagramme représente le contexte du système de banque en ligne, comprenant les relations entre les systèmes et les entités.",
    "source": "https://github.com/RicardoNiepel/C4-PlantUML"
  },
  {
    "prompt": "Diagramme C4 Component montrant les composants du système Catalog API",
    "code": "@startuml CatalogApiComponents\n!include ..\\\\..\\\\..\\\\..\\\\.c4s\\\\C4_Component.puml\n\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\n\nComponent(CatalogController, \"Catalog Controller\", \"Gère les requêtes API du catalogue\")\nComponent(ProductService, \"Product Service\", \"Logique métier pour les produits\")\nComponent(ProductRepository, \"Product Repository\", \"Accès à la base de données\")\n\nRel(CatalogController, ProductService, \"Appelle\")\nRel(ProductService, ProductRepository, \"Lit/Écrit\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["C4", "component", "diagramme", "infrastructure", "catalog_api"],
    "description": "Le diagramme montre le niveau de composant du système Catalog Api, avec ses différents conteneurs et composants.",
    "source": "https://example.com/plantuml-code"
  },
  {
    "prompt": "Diagramme C4 Container du module Payment Provider pour E-commerce Platform",
    "code": "@startuml ECommercePaymentContainers\n!include ..\\..\\..\\..\\.c4s\\C4_Container.puml\n\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red, $shadowing=\"False\")\n\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\n\nSystem(PaymentProvider, \"Payment Provider\", \"Fournisseur de paiement\")\nSystem_Boundary(PaymentService, \"Payment Service\") {\n    Container(Api, \"API\", \"REST API\", \"Expose les endpoints de paiement\")\n    ContainerDb(Database, \"Database\", \"SQL\", \"Stocke les transactions\")\n    ContainerQueue(Messaging, \"Messaging\", \"Queue\", \"Gestion des événements\")\n}\n\nRel(PaymentProvider, Api, \"Utilise\")\nRel(Api, Database, \"Lit/Écrit\")\nRel(Api, Messaging, \"Publie/Consomme\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["C4", "Container"],
    "description": "Diagramme C4 montrant la structure de l'application E-commerce Platform, en particulier le niveau des conteneurs.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 Context du système Internet Banking de Big Bank Plc",
    "code": "@startuml InternetBankingContextLevel\n!include ..\\..\\..\\.c4s\\C4_Context.puml\n\nPerson(Customer, \"Client\")\nSystem(InternetBankingSystem, \"Internet Banking\")\nSystem_Ext(MobileApp, \"Application Mobile\")\nSystem_Ext(BankBackend, \"Système bancaire\")\n\nRel(Customer, InternetBankingSystem, \"Consulte comptes et transactions\")\nRel(MobileApp, InternetBankingSystem, \"Utilise l'API\")\nRel(InternetBankingSystem, BankBackend, \"Récupère les informations financières\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["c4", "context", "internet banking", "mobile app", "view account transactions"],
    "description": "Diagramme C4 montrant le contexte du système d'internet banking de la Banque Big Bank Plc, avec les relations entre les différents composants.",
    "source": "https://github.com/C4Model/C4-PlantUML/"
  },
  {
    "prompt": "Diagramme C4 Container du To Do App Example, montrant Web API et Database",
    "code": "@startuml ToDoAppContainers\n!include ..\\..\\..\\..\\..\\...\\.c4s\\C4_Container.puml\n!define ICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/refs/heads/main/icons\n!include ICONS/devicons/dotnet.puml\n!include ICONS/devicons/msql_server.puml\n\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red, $shadowing=\"False\")\n\nSystem_Boundary(ToDoApp, \"To Do App\") {\n    Container(WebApi, \"Web API\", \"ASP.NET Core\", \"Expose les endpoints de l'application\", \"dotnet\")\n    Container(Database, \"Database\", \"SQL Server\", \"Stocke les tâches et utilisateurs\", \"msql_server\")\n}\n\nRel(WebApi, Database, \"Lit/Écrit\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["C4", "Container", "To Do App", "Web Api", "Database"],
    "description": "Le diagramme décrit l'architecture de l'application To Do App, en montrant les conteneurs Web API et Database.",
    "source": "https://github.com/tupadr3/plantuml-icon-font-sprites"
  },
  {
    "prompt": "Diagramme C4 Context du système Land Grants, décrivant le contexte et les services liés",
    "code": "@startuml LandGrantsSystemContext\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\n\nPerson(User, \"Utilisateur\")\nSystem(ApplicationUI, \"Application UI\")\nSystem(ArcGIS, \"Système ArcGIS\")\nSystem(PaymentHub, \"Payment Hub\")\nSystem(FraudService, \"Fraud Service\")\nSystem(AgreementService, \"Agreement Service\")\nSystem(LandChangeAudit, \"Audit des changements de terrain\")\n\nRel(User, ApplicationUI, \"Utilise\")\nRel(ApplicationUI, ArcGIS, \"Requête cartes\")\nRel(ApplicationUI, PaymentHub, \"Effectue paiements\")\nRel(ApplicationUI, FraudService, \"Vérification anti-fraude\")\nRel(ApplicationUI, AgreementService, \"Gère les accords\")\nRel(ApplicationUI, LandChangeAudit, \"Audit des changements\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["landGrantsSystem", "applicationUi", "arcGis", "paymentHub", "fraudService", "agreementService", "landChangeAudit"],
    "description": "Diagramme C4 du système de concessions terriennes, décrivant le contexte et les relations entre les composants.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml"
  },
  {
    "prompt": "Diagramme C4 Component représentant les classes Stock, Comment et Portfolio",
    "code": "@startuml StockCommentPortfolio\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\n\nclass Stock {\n  - _context ApplicationDbContext\n  + getAllAsync(QueryObject query) : Task<List<Stock>>\n  + AddAsync(Stock stockModel) : Task<Stock>\n  + UpdateAsync(int id, Stock stockModel) : Task<Stock?>\n  + FindAsync(int id) : Task<Stock?>\n  + DeleteAsync(Stock stockModel) : Task<Stock>\n  + stockExists(int stockId) : Task<bool>\n  + findStockByName(string symbol) : Task<Stock>\n}\n\nclass Comment {\n  - _context ApplicationDbContext\n  + getAllAsync() : Task<List<Comment>>\n  + AddAsync(Comment commentModel) : Task<Comment>\n  + UpdateAsync(int id, Comment commentModel) : Task<Comment?>\n  + FindAsync(int id) : Task<Comment?>\n  + DeleteAsync(Comment commentModel) : Task<Comment>\n}\n\nclass Portfolio {\n  - _context ApplicationDbContext\n  + getUserPortfolio(AppUser user) : Task<List<Portfolio>>\n  + createAsync(Portfolio portfolio) : Task<Portfolio>\n  + findPortfolioByStockAsync(Stock stock) : Task<Portfolio>\n  + findPortfolioByIdAsync(string userId, int id) : Task<Portfolio?>\n  + deletePortfolioAsync(Portfolio portfolio) : Task<Portfolio>\n}\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["c4", "component", "stock", "comment", "portfolio"],
    "description": "Le diagramme représente les classes Stock, Comment et Portfolio ainsi que leurs méthodes.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
  }
,{
    "prompt": "Diagramme C4 Container pour la gestion des vaccinations dans les écoles",
    "code": "@startuml\n!include <C4/C4_Container.puml>\nLAYOUT_TOP_DOWN()\ntitle \"Manage Vaccinations in Schools - Container View\"\n\nContainer(WebApp, \"Application Web\", \"React\", \"Interface utilisateur pour gérer les vaccinations\")\nContainer(ApiService, \"API Service\", \"Node.js\", \"Expose les endpoints pour les opérations de vaccination\")\nContainerDb(Database, \"Base de données\", \"PostgreSQL\", \"Stocke les informations sur les élèves et les vaccinations\")\n\nRel(WebApp, ApiService, \"Appelle les endpoints API\")\nRel(ApiService, Database, \"Lit/Écrit les données\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["container_view", "manage_vaccinations", "schools"],
    "description": "Ce diagramme C4 montre la vue du conteneur de gestion des vaccinations dans les écoles, montrant les systèmes et les composants impliqués.",
    "source": "@startuml\n!include <C4/C4_Container.puml>\nLAYOUT_TOP_DOWN()\ntitle \"Manage vaccinations in schools container view\"\n..."
  },
  {
    "prompt": "Diagramme C4 Container montrant la structure des conteneurs d'une application To Do App",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\.c4s\\C4_Container.puml\nLAYOUT_TOP_DOWN()\ntitle \"To Do App - Container View\"\n\nContainer(WebApi, \"Web API\", \"ASP.NET Core\", \"Expose les endpoints de l'application\")\nContainer(Db, \"Database\", \"SQL Server\", \"Stocke les tâches et utilisateurs\")\n\nRel(WebApi, Db, \"Lit/Écrit\")\n@enduml",
    "langage": "plantuml",
    "type": "c4_container",
    "tags": ["c4", "container", "uml"],
    "description": "Diagramme C4 montrant la structure de conteneurs d'une application To Do App.",
    "source": ""
  },
  {
    "prompt": "Définition du thème et inclusion de tous les éléments C4 avec légende",
    "code": "@startuml\n!$ThemeToBeChecked=C4_FirstTest\n!if %variable_exists(\"RELATIVE_INCLUDE\")\n  !theme $ThemeToBeChecked from ./../themes\n!else\n  !theme $ThemeToBeChecked from https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/themes\n!endif\n!if %variable_exists(\"RELATIVE_INCLUDE\")\n  !include ./TestAllElementsWithLegend.puml\n!else\n  !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/percy/TestAllElementsWithLegend.puml\n!endif\n@enduml",
    "langage": "plantuml",
    "type": "c4_context",
    "tags": ["c4", "context"],
    "description": "Définition du thème à utiliser pour le diagramme C4. Inclusion de l'ensemble des éléments avec légende.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master"
  },
  {
    "prompt": "Diagramme C4 Container représentant le code du système de télémesure pour un smart home",
    "code": "@startuml\ntitle Smart Home System Telemetry - Container Level\ntop to bottom direction\n!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml\n\nclass TelemetryRepository {\n  +void find()\n  +void save()\n}\nclass TelemetryConsumer {\n  +void receive()\n}\nclass TelemetryService {\n  +void business()\n}\nclass TelemetryController {\n  +void do()\n}\n\nTelemetryController \"1\" -- \"1\" TelemetryService : uses\nTelemetryService \"1\" -- \"1\" TelemetryConsumer : uses\nTelemetryService \"1\" -- \"1\" TelemetryRepository : uses\n@enduml",
    "langage": "puml",
    "type": "c4_container",
    "tags": ["c4", "plantuml", "smart home", "telemetry"],
    "description": "Diagramme C4 représentant le code du système de télémesure pour un smart home.",
    "source": "https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml"
  },
  {
    "prompt": "Diagramme C4 Sequence montrant le contexte d'un système TraderX qui sauvegarde l'état de position",
    "code": "@startuml\ntitle Trader X Example - Save Position State - C4 Sequence - Context level\nSystem_Ext(ExternalSystem, \"External\", \"\")\nSystem(TraderX, \"TraderX\", \"TraderX\")\nRel(ExternalSystem, TraderX, \"Save Position State\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4Sequence", "ContextLevel"],
    "description": "Diagrame C4 Sequence montrant le contexte d'un système TraderX qui sauvegarde l'état de position.",
    "source": null
  },
  {
    "prompt": "Diagramme C4 Sequence montrant le flux d'informations entre TraderX et le User Directory",
    "code": "@startuml\ntitle Trader X Example - Get People Data - C4 Sequence - Context level\nSystem_Ext(ExternalSystem, \"External\", \"\")\nSystem(TraderX, \"TraderX\", \"TraderX\")\nSystem(UserDirectory, \"User Directory\", \"\")\n\nRel(ExternalSystem, TraderX, \"Get People Data\")\nRel(TraderX, UserDirectory, \"Select People Data\", \"LDAP\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_sequence",
    "tags": ["C4", "Sequence", "Context", "Level"],
    "description": "Diagramme de séquence C4 montrant le flux d'informations entre TraderX et l'utilisateur.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 Context montrant TraderX et ses relations avec les services de référence de données",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\..\\.c4s\\C4_Context.puml\nAddElementTag(...)\nAddRelTag(...)\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["c4", "context", "static", "plantuml"],
    "description": "Diagramme C4 contextuel représentant le système TraderX et ses relations avec les services de référence données.",
    "source": "https://example.com/diagramme-c4-plantuml"
  },
  {
    "prompt": "Diagramme C4 Component montrant l'API de création ou validation de PIN",
    "code": "@startuml\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\ntitle Component Diagram - Create or Validate PIN API\nContainer(CreateOrValidatePINAPI, \"Create or Validate PIN API\", \"NodeJS Microservice\", \"Crée ou valide le PIN\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["C4", "Component Diagram", "AddProperty", "Container", "API"],
    "description": "Ce diagramme montre le composant API de création ou de validation de PIN. Il utilise des services de microservices NodeJS.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
  },
  {
    "prompt": "Diagramme C4 Component pour la Catalog API avec contexte et infrastructure",
    "code": "@startuml\n!include ..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\.c4s\\\\C4_Component.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\n\ntitle Dot Net E Shop - Catalog API - Component Level\nSystem_Boundary(CatalogApi, \"Catalog Api\") {\n    Container_Boundary(Infrastructure, \"Infrastructure\") {\n        Component(CatalogController, \"Catalog Controller\", \"Gère les requêtes API du catalogue\")\n        Component(ProductService, \"Product Service\", \"Logique métier pour les produits\")\n        Component(ProductRepository, \"Product Repository\", \"Accès à la base de données\")\n\n        Rel(CatalogController, ProductService, \"Appelle\")\n        Rel(ProductService, ProductRepository, \"Lit/Écrit\")\n    }\n}\nSHOW_LEGEND()\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["c4_component", "plantuml", "lifecycle", "catalog_api"],
    "description": "Diagramme de niveau composant pour la Catalog Api avec un contexte de catalogue et une infrastructure.",
    "source": "https://www.plantuml.com/"
  },
  {
    "prompt": "Diagramme C4 Container du processus de crédit, montrant les différents conteneurs et leurs relations",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\nLAYOUT_TOP_DOWN()\ntitle \"Credit Process - Container View\"\n\nContainer(CreditWebApp, \"Web Application\", \"React\", \"Interface utilisateur pour le processus de crédit\")\nContainer(CreditApi, \"API Service\", \"Node.js\", \"API pour la gestion des crédits\")\nContainerDb(CreditDb, \"Database\", \"PostgreSQL\", \"Stocke les données clients et crédits\")\n\nRel(CreditWebApp, CreditApi, \"Appelle l'API\")\nRel(CreditApi, CreditDb, \"Lit/Écrit\")\n@enduml",
    "langage": "plantuml",
    "type": "c4_container",
    "tags": ["credit", "process", "container", "diagram"],
    "description": "Diagrame des conteneurs du processus de crédit, montrant les différents composants et leurs relations.",
    "source": "@startuml container_diagram\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml...\n@enduml"
  },
  {
    "prompt": "Diagramme C4 Sequence montrant les interactions pour SummonBot et définition d'une zone",
    "code": "@startuml\n!include ..\\..\\..\\..\\.c4s\\C4_Sequence.puml\nLAYOUT_TOP_DOWN()\ntitle SummonBot - Set Area Sequence\n\nActor(Client, \"Client\")\nSystem(SummonBotAPI, \"API de contrôle\")\nDatabase(BotDb, \"Base de données\")\n\nClient -> SummonBotAPI: Demande de summon du bot\nSummonBotAPI -> BotDb: Stocke les informations de zone\nSummonBotAPI -> Client: Retour confirmation\n@enduml",
    "langage": "PlantUML",
    "type": "c4_sequence",
    "tags": ["sequence", "diagramme", "C4", "plantuml"],
    "description": "Ce diagramme décrit les interactions entre le client, l'API de contrôle et la base de données lors du summon d'un bot et de la définition d'une zone minière.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Sequence.puml"
  },
  {
    "prompt": "Diagramme C4 Container représentant la structure multi-niveaux d'un système",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\..\\.c4s\\C4_Container.puml\nLAYOUT_TOP_DOWN()\ntitle Multi-level System - Container View\n\nContainer(WebApp, \"Web Application\", \"React\", \"Interface utilisateur principale\")\nContainer(Api, \"API Service\", \"Node.js\", \"Expose les endpoints\")\nContainerDb(Database, \"Database\", \"PostgreSQL\", \"Stocke les données de l'application\")\n\nRel(WebApp, Api, \"Appelle l'API\")\nRel(Api, Database, \"Lit/Écrit\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["C4", "container", "architecture", "système", "modèle"],
    "description": "Le diagramme C4 montre la structure d'un système à plusieurs niveaux, en particulier le niveau de conteneur. Il décrit les conteneurs et les relations entre eux.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML"
  }
,{
    "prompt": "Big Bank Plc - Internet Banking - Database - Select User Data - C4 Context",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\.c4s\\C4_Context.puml\nLAYOUT_TOP_DOWN()\ntitle \"Big Bank Plc - Internet Banking - Database - Select User Data\"\n\nPerson(User, \"Client\")\nSystem(InternetBanking, \"Internet Banking\", \"Système de banque en ligne\")\nContainer(Db, \"Database\", \"SQL Server\", \"Contient les données des utilisateurs\")\n\nRel(User, InternetBanking, \"Utilise\")\nRel(InternetBanking, Db, \"Select User Data\")\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["context", "c4", "static", "internet banking"],
    "description": "Ce diagramme C4 Context présente l'architecture contextuelle du système d'internet banking de Big Bank Plc.",
    "source": "https://example.com/plantuml"
  },
  {
    "prompt": "Diagramme C4 Container pour l'API de notifications temps réel - update sp notif API",
    "code": "@startuml\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nLAYOUT_WITH_LEGEND()\ntitle \"update sp notif API\"\n\nContainer(WebMoservice, \"Web Moservice\", \"Website | JavaScript\", \"moservice.id main services for Customer\")\nContainer_Boundary(Api, \"update sp notif API [Component]\") {\n    Component(NotificationService, \"Notification Service\", \"Node.js\", \"Gère les notifications en temps réel\")\n    Component(Db, \"Database\", \"MongoDB\", \"Stocke les notifications et les préférences\")\n}\n\nRel(WebMoservice, NotificationService, \"Appelle les services\")\nRel(NotificationService, Db, \"Lit/Écrit\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["plantuml", "c4", "container", "api", "notification", "database"],
    "description": "Diagramme C4 montrant la structure de l'API pour gérer les notifications en temps réel. Il montre le conteneur Web Moservice et ses composants internes.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/blob/master/C4_Component.puml"
  },
  {
    "prompt": "Diagramme C4 Context des microservices du noyau avec bus de données et conteneurs",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\nLAYOUT_TOP_DOWN()\ntitle \"Microservices Core - Context View\"\n\nSystem(MicroservicesKernel, \"Core Kernel\", \"Noyau fonctionnel avec microservices\")\nContainer(Bus, \"Data Bus\", \"Kafka\", \"Transport des messages entre microservices\")\nContainer(ServiceA, \"Service A\", \"Node.js\", \"Microservice A\")\nContainer(ServiceB, \"Service B\", \"Python\", \"Microservice B\")\n\nRel(ServiceA, Bus, \"Publie\")\nRel(ServiceB, Bus, \"S'abonne\")\nRel(ServiceA, ServiceB, \"Appel direct\")\n@enduml",
    "langage": "plantuml",
    "type": "c4_context",
    "tags": ["microservices", "core", "kernel", "functionalities", "data_bus"],
    "description": "Le diagramme représente la décomposition des contextes limités du noyau, comprenant les microservices, le bus de données et les conteneurs.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml"
  },
  {
    "prompt": "Diagramme C4 Context pour la plateforme de monitorage du mentalisme",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\nLAYOUT_TOP_DOWN()\ntitle \"Monitoring Platform - Context View\"\n\nPerson(User, \"Utilisateur\")\nSystem(MonitoringPlatform, \"Platform\", \"Plateforme de monitorage du mentalisme\")\nSystem(Analytics, \"Analytics System\", \"Système d'analyse des données\")\nSystem(Notification, \"Notification System\", \"Système de notifications\")\n\nRel(User, MonitoringPlatform, \"Utilise\")\nRel(MonitoringPlatform, Analytics, \"Envoie les données\")\nRel(MonitoringPlatform, Notification, \"Envoie des alertes\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "context diagram", "system boundary", "containers", "components", "relations"],
    "description": "Ce diagramme C4 représente le contexte de la plateforme de monitorage du mentálisme. Il montre les différents acteurs, les systèmes et les composants qui interagissent entre eux.",
    "source": "https://github.com/YourRepositoryName"
  },
  {
    "prompt": "Diagramme C4 Container avec élément Lease pour Kubernetes",
    "code": "@startuml\n' configures the library\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n!include $LIB_BASE_LOCATION/bootstrap.puml\ninclude('c4k8s/bootstrap')\ninclude('c4k8s/Element/Lease')\ninclude('c4model/bootstrap')\n\nLease('Lease', 'Lease', 'an optional description label')\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["C4", "Container"],
    "description": "Définition d'un conteneur C4 avec des éléments de leasing.",
    "source": "https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution"
  },
  {
    "prompt": "Diagramme C4 Context de l'E Commerce Platform avec systèmes et relations",
    "code": "@startuml\n!include ..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\.c4s\\\\C4_Context.puml\nLAYOUT_TOP_DOWN()\ntitle \"E Commerce Platform - Context View\"\n\nSystem(User, \"Utilisateur\")\nSystem(ECommercePlatform, \"E Commerce Platform\", \"Plateforme de e-commerce\")\nSystem(PaymentService, \"Payment Service\", \"Service de paiement\")\nSystem(ShippingService, \"Shipping Service\", \"Service de livraison\")\n\nRel(User, ECommercePlatform, \"Utilise\")\nRel(ECommercePlatform, PaymentService, \"Effectue un paiement\")\nRel(ECommercePlatform, ShippingService, \"Organise la livraison\")\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "Context", "diagramme"],
    "description": "Diagramme C4 Context représentant l'architecture de l'E Commerce Platform, avec les systèmes et relations entre eux.",
    "source": "https://github.com/plantuml/plantuml"
  }

,{
    "prompt": "Big Bank Plc - Internet Banking - Context Diagram",
    "code": "@startuml\n!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Context.puml\nLAYOUT_WITH_LEGEND()\ntitle \"Big Bank Plc - Internet Banking - Context View\"\n\nPerson(pbc, \"Personal Banking Customer\", \"A customer of the bank, with personal bank accounts.\")\nSystem(ibs, \"Internet Banking System\", \"Allows customers to view information about their bank accounts, and make payments.\")\nSystem_Ext(es, \"E-mail system\", \"The internal Microsoft Exchange e-mail system.\")\nSystem_Ext(mbs, \"Mainframe Banking System\", \"Stores all of the core banking information about customers, accounts, transactions, etc.\")\n\nRel(pbc, ibs, \"Uses\")\nRel(ibs, es, \"Sends e-mails\", \"SMTP\")\nRel(es, pbc, \"Sends e-mails to\")\nRel(ibs, mbs, \"Uses\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["context", "diagramme C4"],
    "description": "Ce diagramme représente le contexte du système bancaire en ligne. Il montre les relations entre le client, le système bancaire et le système de messagerie.",
    "source": "https://github.com/adrianvlupu/C4-PlantUML"
  },
  {
    "prompt": "Component Diagram for Internet Banking System - Context View",
    "code": "@startuml\n!include <C4/C4_Context>\nLAYOUT_TOP_DOWN()\ntitle \"Internet Banking System - Context View\"\n\nPerson(Customer, \"Customer\", \"A bank customer using online banking.\")\nSystem(InternetBankingSystem, \"Internet Banking System\", \"Handles bank account operations and payments.\")\nSystem_Ext(EmailSystem, \"Email System\", \"Sends notifications to customers.\")\n\nRel(Customer, InternetBankingSystem, \"Uses\")\nRel(InternetBankingSystem, EmailSystem, \"Sends notifications\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["internet banking", "system", "customer", "banking"],
    "description": "Ce diagramme montre le contexte de l'Internet Banking System, y compris les personnes impliquées et les systèmes utilisés.",
    "source": "https://github.com/plantuml/plantuml"
  },
  {
    "prompt": "Dot Net E Shop - Catalog Api - Container Level",
    "code": "@startuml\n!include ..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\.c4s\\\\C4_Container.puml\n\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red, $shadowing=\"False\")\n\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\n\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\n\ntitle \"Dot Net E Shop - Catalog Api - Get Item Picture By Id - Container Level\"\n\nSystem_Boundary(DotNetEShop.SoftwareSystems.CatalogApi, \"Catalog Api\") {\n    Container(Api, \"Api\", \"ASP.NET Core Web API\", \"Handles catalog item retrieval including images by ID.\")\n}\n\nSHOW_LEGEND()\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["C4", "Container", "Catalog Api", "Api"],
    "description": "Diagramme C4 montrant le niveau de conteneur pour l'application Catalog Api.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML"
  },
  {
    "prompt": "Global Architecture Diagram - System Containers and Relations",
    "code": "@startuml\n!include <C4/C4_Container.puml>\nLAYOUT_TOP_DOWN()\ntitle \"Global Architecture - System Containers\"\n\nSystem(User, \"User\", \"End user interacting with the system\")\nSystem(GameSystem, \"Game System\", \"Handles login and gameplay logic\")\nContainer(WebFrontend, \"Web Frontend\", \"ReactJS\", \"Interface for users\")\nContainer(GameBackend, \"Game Backend\", \"Node.js\", \"Handles game logic\")\nContainer(DB, \"Database\", \"PostgreSQL\", \"Stores game and user data\")\n\nRel(User, WebFrontend, \"Uses\")\nRel(WebFrontend, GameBackend, \"Sends requests\")\nRel(GameBackend, DB, \"Reads/Writes data\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "Architecture", "Système", "Login", "Game"],
    "description": "Diagramme de l'architecture globale du système, montrant les conteneurs et leurs relations.",
    "source": "https://example.com"
  },
  {
    "prompt": "Content Promo API - getAllPromoList Component Diagram",
    "code": "@startuml\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nLAYOUT_WITH_LEGEND()\ntitle \"getAllPromoList Content Promo API\"\n\nContainer(WebMoservice, \"Web Moservice\", \"Website | JavaScript\", \"Main customer service\")\nBoundary(Api, \"getAllPromoList Content Promo API [Component]\") {\n    Component(ContentService, \"Content Service\", \"Node.js\", \"Handles retrieval of promotions\")\n    Component(Db, \"Database\", \"MongoDB\", \"Stores promo data\")\n}\n\nRel(WebMoservice, ContentService, \"Requests promo list\")\nRel(ContentService, Db, \"Reads promo data\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["C4", "PlantUML", "NodeJs", "API"],
    "description": "Diagramme C4 montrant le composant getAllPromoList de l'API Content Promo, avec ses relations avec les autres composants.",
    "source": "@startuml\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nLAYOUT_WITH_LEGEND()\ntitle getAllPromoList Content Promo API\\n[NodeJs Content API]\n... (le reste du code)"
  },
  {
    "prompt": "E Commerce Platform - Deliver - Payments Context Diagram",
    "code": "@startuml\n!include ..\\\\..\\\\..\\\\..\\\\.c4s\\\\C4_Context.puml\nLAYOUT_TOP_DOWN()\ntitle \"E Commerce Platform - Deliver - Payments Context\"\n\nPerson(Customer, \"Customer\", \"Uses the e-commerce platform to purchase products\")\nSystem(ECommercePlatform, \"E Commerce Platform\", \"Handles orders and payments\")\nSystem(PaymentService, \"Payment Service\", \"Processes payments\")\nSystem(ShippingService, \"Shipping Service\", \"Manages deliveries\")\n\nRel(Customer, ECommercePlatform, \"Places orders\")\nRel(ECommercePlatform, PaymentService, \"Processes payments\")\nRel(ECommercePlatform, ShippingService, \"Arranges delivery\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["c4_context", "plantuml", "c4s", "context_level"],
    "description": "Diagramme de contexte pour l'E Commerce Platform - Deliver - Payments",
    "source": "https://github.com/LaurentLardinois/C4-PlantUML"
  },
  {
    "prompt": "Koski Integration - C4 Context Diagram",
    "code": "@startuml koski-integration\n!include ..\\\\..\\\\..\\\\..\\\\.c4s\\\\C4_Context.puml\nLAYOUT_TOP_DOWN()\ntitle \"Koski Integration - Context View\"\n\nPerson(User, \"User\", \"System user interacting with Koski\")\nSystem(ECommercePlatform, \"E Commerce Platform\", \"Main platform\")\nSystem(Koski, \"Koski System\", \"Integration system\")\n\nRel(User, ECommercePlatform, \"Uses\")\nRel(ECommercePlatform, Koski, \"Sends data to\")\nRel(Koski, ECommercePlatform, \"Returns processed data\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "Context", "Container", "Component", "Rel"],
    "description": "Diagramme C4 Context montrant l'intégration de Koski.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML/raw/v2.0.0/C4_Component.puml"
  }

, {
    "prompt": "Diagramme C4 contextuel décrivant l'architecture de l'application Estimator avec ses conteneurs et relations.",
    "code": "@startuml C4_Elements\n!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4.puml\n!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Context.puml\n!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Component.puml\n!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Container.puml\nSystem_Boundary(estimator, \"Estimator\"){\n    Container(web, \"WEB\", \"core application\")\n    Container(sidekiq, \"Sidekiq\", \"background processing\")\n    ContainerDb(redis, \"Redis\", \"secondary\")\n    ContainerDb(db, \"Database\", \"main\") \n}\nRel(web, db, 'read/write')\nRel(web, sidekiq, 'delegate async job')\nRel(sidekiq, db, 'read/write')\nRel(sidekiq, redis, 'read')\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4_Elements", "System_Boundary", "Container", "ContainerDb", "Rel"],
    "description": "Diagramme C4 contextuel décrivant l'architecture de l'application avec ses conteneurs et relations.",
    "source": "https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/"
  },
  {
    "prompt": "Diagramme C4 représentant le contexte de l'API de lecture des requêtes OTP dans une application NodeJs.",
    "code": "@startuml\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml\nLAYOUT_WITH_LEGEND()\ntitle readAll OTP Request API\\n[NodeJs User API]\nContainer(Web_Moservice, \"Web Moservice\", \"Website | JavaScript\", \"moservice.id main services for Customer\")\nBoundary(api, \"readAll OTP Request API\\n[Component]\"{\nComponent(auths_middleware, \"auth.verify\", \"Middleware | NodeJs\", \"Middleware for verify\\n(NodeJs User API)\")\nComponent(user_controller, \"Management OTP Controller\", \"Controller | NodeJs\", \"Controller for Management OTP Related function\\n(NodeJs User API)\")\nComponent(readAll, \"modelManagementOtp.readAll\", \"Function | NodeJs\", \"Function for Read All otp data\\n(NodeJs User API)\")\nComponent(countList, \"modelManagementOtp.countList\", \"Function | NodeJs\", \"Function for count List otp data\\n(NodeJs User API)\")\n}\nContainerDb(database, \"Moservice Storage\", \"mySQL Database\", \"All store for save data and content for Moservice.id\")\nRel_D(Web_Moservice, auths_middleware, \"1. Request Read All otp data\")\nRel_D(auths_middleware, user_controller, \"2. Request Read All otp data\")\nRel_D(user_controller, readAll, \"3. Request Read All otp data\")\nRel_D(readAll, countList, \"5. Request Count list otp data\")\nRel_D(readAll, database, \"4. Read All otp data\")\nRel_D(countList, database, \"6. Count List otp data\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4-plantuml", "Context", "Container", "Component", "Boundary", "Rel_D"],
    "description": "Diagramme C4 représentant le contexte de l'API de demande de lecture des requêtes OTP.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml"
  },
  {
    "prompt": "Diagramme C4 montrant un ConfigMap Kubernetes via les packages c4k8s et c4model.",
    "code": "@startuml\n'' configures the library\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n'' loads the library's bootstrap\n!include $LIB_BASE_LOCATION/bootstrap.puml\n'' loads the package bootstrap\ninclude('c4k8s/bootstrap')\n'' loads the Item which embeds the element ConfigMap\ninclude('c4k8s/Element/ConfigMap')\n'' load the c4model package\ninclude('c4model/bootstrap')\nConfigMap('ConfigMap', 'Config Map', 'an optional description label')\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["C4", "Kubernetes", "ConfigMap"],
    "description": "Le diagramme représente un ConfigMap avec des éléments de configuration. Il utilise les packages c4k8s et c4model pour intégrer Kubernetes.",
    "source": "@startuml\n'' configures the library\n!global $LIB_BASE_LOCATION=\"https://raw.githubusercontent.com/tmorin/plantuml-libs/master/distribution\"\n'' loads the library's bootstrap\n!include $LIB_BASE_LOCATION/bootstrap.puml\n'' loads the package bootstrap\ninclude('c4k8s/bootstrap')\n'' loads the Item which embeds the element ConfigMap\ninclude('c4k8s/Element/ConfigMap')\n'' load the c4model package\ninclude('c4model/bootstrap')\nConfigMap('ConfigMap', 'Config Map', 'an optional description label')\n@enduml"
  },
  {
    "prompt": "Diagramme C4 représentant l'architecture d'un système de gestion de tâches à niveau conteneur.",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\.c4s\\C4_Container.puml\n' Définition des conteneurs pour To Do App\nContainer(WebApi, \"Web API\", \"REST API\", \"Gère les requêtes pour ajouter et consulter des tâches\")\nContainer(Database, \"Database\", \"SQL Database\", \"Stocke toutes les tâches et informations associées\")\nRel(WebApi, Database, \"read/write\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["c4", "container", "uml", "diagramme"],
    "description": "Ce diagramme C4 représente la structure d'un système de gestion de tâches, avec un système contenant deux composants : une API web et une base de données.",
    "source": "https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/refs/heads/main/icons"
  },
  {
    "prompt": "Diagramme C4 représentant l'architecture de l'application Internet Banking de Big Bank Plc à niveau conteneur.",
    "code": "@startuml\n!include ..\\..\\..\\..\\.c4s\\C4_Container.puml\n' Conteneurs principaux de l'application\nContainer(WebApp, \"Web Application\", \"Java\", \"Interface client de la banque en ligne\")\nContainer(ApiApp, \"API Application\", \"Spring MVC\", \"Services back-end pour l'application Web\")\nContainerDb(Database, \"Database\", \"MySQL\", \"Stocke les informations utilisateurs et transactions\")\nRel(WebApp, ApiApp, \"HTTP Request\")\nRel(ApiApp, Database, \"Read/Write\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["internet banking", "api application", "container level", "java", "spring mvc"],
    "description": "Diagramme C4 représentant l'architecture de l'application Internet Banking de Big Bank Plc, mettant en évidence les conteneurs et leurs relations.",
    "source": "https://github.com/plantuml/plantuml-examples/blob/master/uml/C4_container.puml"
  },
  {
    "prompt": "Configuration de PlantUML pour le format C4, incluant couleurs, styles et définitions d'éléments principaux et secondaires.",
    "code": " !includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4.puml\n!include C4.puml\n' Configuration des couleurs, styles et éléments principaux et secondaires\n' Définitions Person, System, Database, etc.\n@enduml",
    "langage": "puml",
    "type": "configuration",
    "tags": ["C4", "PlantUML", "diagramme"],
    "description": "Configuration de PlantUML pour le format C4. Définition des couleurs, du style et des éléments de base.",
    "source": "https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4.puml"
  },
  {
    "prompt": "Diagramme C4 décrivant un système Internet Banking avec Single-Page Application, API Application et base de données relationnelle.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Dynamic.puml\nLAYOUT_WITH_LEGEND()\nContainerDb(c4, \"Database\", \"Relational Database Schema\", \"Stores user registration information, hashed authentication credentials, access logs, etc.\")\nContainer(c1, \"Single-Page Application\", \"JavaScript and Angular\", \"Provides all of the Internet banking functionality to customers via their web browser.\")\nContainer_Boundary(b, \"API Application\") {\n  Component(c3, \"Security Component\", \"Spring Bean\", \"Provides functionality Related to signing in, changing passwords, etc.\")\n  Component(c2, \"Sign In Controller\", \"Spring MVC Rest Controller\", \"Allows users to sign in to the Internet Banking System.\")\n}\nRel_R(c1, c2, \"Submits credentials to\", \"JSON/HTTPS\")\nRel(c2, c3, \"Calls isAuthenticated() on\")\nRel_R(c3, c4, \"select * from users where username = ?\", \"JDBC\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["C4_Dynamic", "ContainerDb", "Container_Boundary", "Component"],
    "description": "Diagramme C4 illustrant la relation entre un Single-Page Application et une API Application, avec une base de données en arrière-plan.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Dynamic.puml"
  },
  {
    "prompt": "Diagramme C4 montrant le déploiement d'un système bancaire en ligne avec ses composants et relations.",
    "code": "@startuml\n' Code PlantUML pour le déploiement du système de banque en ligne\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml\n@enduml",
    "langage": "PlantUML",
    "type": ["c4_context", "c4_container"],
    "tags": ["deployment", "diagramme", "c4", "internet banking system"],
    "description": [
      "Ce diagramme représente le déploiement du système de banque en ligne.",
      "Il décrit les différents composants et leurs relations."
    ],
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml"
  }
, {
    "prompt": "Diagramme de déploiement C4 illustrant l'architecture du système de banque en ligne avec les applications web et mobile et les bases de données primaire et secondaire.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml\nLAYOUT_TOP_DOWN()\nSystem_Boundary(InternetBankingSystem, \"Internet Banking System\") {\n  Container(webApp, \"Web Application\", \"Java + Spring MVC\", \"Interface Web pour les clients\")\n  Container(mobileApp, \"Mobile Application\", \"iOS/Android\", \"Interface mobile pour les clients\")\n  ContainerDb(primaryDb, \"Primary Database\", \"Oracle\", \"Stocke les informations utilisateurs, accès, transactions\")\n  ContainerDb(secondaryDb, \"Secondary Database\", \"Oracle\", \"Réplique pour sauvegarde et haute disponibilité\")\n}\nRel(webApp, primaryDb, \"Read/Write\")\nRel(mobileApp, primaryDb, \"Read/Write\")\nRel(webApp, secondaryDb, \"Replication\")\nRel(mobileApp, secondaryDb, \"Replication\")\n@enduml",
    "langage": "plantuml",
    "type": "c4_deployment_diagram",
    "tags": ["deployment", "diagram", "c4"],
    "description": "Ce diagramme C4 montre la mise en œuvre du système de banque en ligne. Il illustre les différents composants, notamment les bases de données primaire et secondaire, ainsi que les applications web et mobile.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml"
  },
  {
    "prompt": "Diagramme C4 représentant le déploiement de l'API de la banque en ligne sur Ubuntu avec Tomcat et une base de données Oracle.",
    "code": "@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml\nLAYOUT_TOP_DOWN()\nSystem_Boundary(BigBankSystem, \"Big Bank Plc System\") {\n  Node(ubuntuServer, \"Ubuntu 16.04 LTS\", \"Serveur principal\") {\n    Container(tomcatApp, \"Apache Tomcat 8.x\", \"Java + Spring MVC\", \"Fournit l'API JSON/HTTPS\")\n  }\n  ContainerDb(oracleDb, \"Oracle - Primary\", \"Relational Database Schema\", \"Stocke les informations utilisateurs, accès, logs, etc.\")\n}\nRel(tomcatApp, oracleDb, \"Read/Write\")\n@enduml",
    "langage": "plantuml",
    "type": ["c4_context", "c4_container"],
    "tags": [
      "fallback",
      "bigbank-api",
      "Ubuntu 16.04 LTS",
      "Apache Tomcat 8.x",
      "Java and Spring MVC",
      "Provides Internet Banking functionality via a JSON/HTTPS API.",
      "Oracle - Primary",
      "Relational Database Schema",
      "Stores user registration information, hashed authentication credentials, access logs, etc."
    ],
    "description": "Ce diagramme C4 montre le déploiement d'un système de banque en ligne avec une architecture distribuée. Il illustre la relation entre les différents composants du système et leurs interactions.",
    "source": "https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml"
  },
  {
    "prompt": "Diagramme de contexte C4 représentant le système d'e-commerce avec la Web Application et la base de données MySQL.",
    "code": "@startuml\n!include ..\\..\\..\\.c4s\\C4_Context.puml\nLAYOUT_TOP_DOWN()\nSystem(eCommerceSystem, \"E-Commerce System\", \"Système de gestion de produits\") {\n  Container(webApp, \"Web Application\", \"Application Web\", \"Interface de création de produits\")\n  ContainerDb(database, \"Database\", \"MySQL\", \"Stocke les informations sur les produits\")\n}\nRel(webApp, database, \"Read/Write\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["c4", "context", "diagramme"],
    "description": "Diagramme de contexte C4 représentant le système d'e-commerce pour la création de produits.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 montrant un conteneur avec deux algorithmes et une externalisation de projet, incluant les relations et les flux de données.",
    "code": "@startuml\n!include <C4/C4_Container.puml>\n!include common.iuml\nHIDE_STEREOTYPE()\nPerson(p, \"Programmer\")\nSystem(a, \"Object\", $tags=\"data\")\nContainer(b1, \"Algorithm A\", \"implementation\")\nContainer(b2, \"Algorithm B\", \"implementation\")\nSystem_Ext(c, \"External project\")\nRel_D(p,a, \"acts\", \"\", $tags=\"action\")\nLay_D(a,b1)\nRel_R(b1,b2,\"data\")\nLay_D(b1,c)\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["algorithm", "container", "system"],
    "description": "Diagramme C4 montrant un conteneur avec deux algorithmes et une externalisation de projet.",
    "source": "https://github.com/plantuml-stdlib/C4"
  },
  {
    "prompt": "Diagramme de contexte C4 pour Big Bank Plc montrant les services Internet Banking avec les éléments lifecycle et la légende.",
    "code": "@startuml\n!include ..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\.c4s\\\\C4_Context.puml\nLAYOUT_TOP_DOWN()\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange, $shadowing=\"False\")\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red, $shadowing=\"False\")\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\nSHOW_PERSON_PORTRAIT()\nSystem(BigBankPlc.SoftwareSystems.InternetBanking, \"Internet Banking\", \"Fournit des services bancaires en ligne\")\nSHOW_LEGEND()\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "Context", "Static", "Internet Banking"],
    "description": "Diagramme de contexte C4 montrant l'architecture du système d'internet banking.",
    "source": ""
  }

, {
    "prompt": "Diagramme C4 de niveau composant montrant la hiérarchie des composants du Catalog Api et leurs relations.",
    "code": "@startuml\n!include ..\\..\\..\\..\\.c4s\\C4_Component.puml\nLAYOUT_TOP_DOWN()\nSystem(CatalogApi, \"Catalog Api\", \"Système de gestion des catalogues\") {\n    Container(ProductCatalog, \"Product Catalog\", \"Gère les produits et leurs détails\")\n    Container(BrandCatalog, \"Brand Catalog\", \"Gère les marques\")\n    Container(CategoryCatalog, \"Category Catalog\", \"Gère les catégories\")\n}\nRel(ProductCatalog, BrandCatalog, \"Depends on\")\nRel(ProductCatalog, CategoryCatalog, \"Depends on\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["c4", "component", "lifecycle", "new", "changed", "removed"],
    "description": "Diagramme C4 à niveau de composant montrant la hiérarchie des composants du Catalog Api.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 contextuel montrant l'infrastructure et les relations du Catalog Api dans Dot Net E Shop.",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\..\\..\\..\\.c4s\\C4_Context.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green)\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange)\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red)\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\nSystem(DotNetEShop.CatalogApi, \"Catalog Api\", \"Gère les catalogues produits, marques et catégories\")\nSHOW_LEGEND()\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["C4", "Context Mapping", "Modélisation", "Infrastructure"],
    "description": "Le diagramme représente le contexte de l'application Catalog Api, avec ses relations et son infrastructure. Il montre les différents éléments du système et comment ils interagissent.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 de conteneur illustrant le Trade Feed et les mises à jour des transactions dans TraderX.",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\...\\.c4s\\C4_Container.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green)\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange)\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red)\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\nSystem_Boundary(TraderX, \"TraderX\") {\n    ContainerQueue(TradeFeed, \"Trade Feed\", \"Message bus\", \"Diffusion des mises à jour des trades et positions\")\n}\nSHOW_LEGEND()\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["c4_container", "plantuml"],
    "description": "Diagramme de conteneur C4 montrant les relations entre TraderX, le Trade Feed et les mises à jour des transactions.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 contextuel représentant le Buying Service et son interaction dans l'E-commerce Platform.",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\..\\..\\.c4s\\C4_Context.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green)\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange)\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red)\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\nSystem(BuyingService, \"Buying Service\", \"Gère les commandes et événements d'achat\")\nSHOW_LEGEND()\n@enduml",
    "langage": "PlantUML",
    "type": "c4_context",
    "tags": ["c4interflow:lifecycle:new","c4interflow:lifecycle:changed","c4interflow:lifecycle:removed"],
    "description": "Diagramme C4 contextuel représentant l'architecture d'un E-commerce Platform.",
    "source": ""
  },
  {
    "prompt": "Diagramme C4 contextuel illustrant le Product Service et la réception des événements de suppression de produit.",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\..\\..\\..\\.c4s\\C4_Context.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green)\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange)\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red)\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\nSystem(ProductService, \"Product Service\", \"Gère les produits et reçoit les événements de suppression\")\nSHOW_LEGEND()\n@enduml",
    "langage": "plantuml",
    "type": "c4_context",
    "tags": ["c4","context","diagramme","static"],
    "description": "Ce diagramme C4 représente le contexte de l'E Commerce Platform pour la création d'un produit, en mettant en avant les différents composants et leurs relations.",
    "source": "PlantUML"
  },
  {
    "prompt": "Diagramme C4 montrant la structure des composants de la Catalog Api avec les conteneurs et les composants associés.",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\..\\..\\..\\.c4s\\C4_Component.puml\nLAYOUT_TOP_DOWN()\nSystem(CatalogApi, \"Catalog Api\", \"Système de gestion des catalogues\") {\n    Container(ProductCatalog, \"Product Catalog\", \"Gère les produits\")\n    Container(BrandCatalog, \"Brand Catalog\", \"Gère les marques\")\n}\nRel(ProductCatalog, BrandCatalog, \"Dépend\")\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["C4", "Component", "Level", "CatalogApi", "Api"],
    "description": "Diagramme C4 montrant la structure de la Catalog Api en niveau de composant, avec les conteneurs et les composants associés.",
    "source": "https://example.com/c4-component.puml"
  },
  {
    "prompt": "Diagramme C4 de conteneur montrant la structure et les relations pour l'application Basket Api avec gRPC.",
    "code": "@startuml\n!include ..\\..\\..\\..\\..\\..\\..\\..\\.c4s\\C4_Container.puml\nAddElementTag(\"c4interflow:lifecycle:new\", $bgColor=green, $fontColor=#ffffff, $borderColor=green)\nAddElementTag(\"c4interflow:lifecycle:changed\", $bgColor=orange, $fontColor=#ffffff, $borderColor=orange)\nAddElementTag(\"c4interflow:lifecycle:removed\", $bgColor=red, $fontColor=#ffffff, $borderColor=red)\nAddRelTag(\"c4interflow:lifecycle:new\", $textColor=green, $lineColor=green)\nAddRelTag(\"c4interflow:lifecycle:changed\", $textColor=orange, $lineColor=orange)\nAddRelTag(\"c4interflow:lifecycle:removed\", $textColor=red, $lineColor=red)\nSHOW_PERSON_PORTRAIT()\nLAYOUT_TOP_DOWN()\nskinparam linetype polyline\nSystem_Boundary(BasketApi, \"Basket Api\") {\n    Container(BasketService, \"Basket Service\", \"gRPC service\", \"Gère le panier et les mises à jour\")\n}\nSHOW_LEGEND()\n@enduml",
    "langage": "PlantUML",
    "type": "c4_container",
    "tags": ["c4", "container", "basketapi", "grpc", "dotnet"],
    "description": "Diagramme C4 montrant la structure de conteneur pour l'application Basket Api.",
    "source": "https://github.com/SamiSakr/c4plantuml"
  },
   {
    "prompt": "Diagramme C4 statique montrant les composants de l'application Catalog Api et leurs relations.",
    "code": "@startuml\n!include ..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\.c4s\\\\C4_Component.puml\nLAYOUT_TOP_DOWN()\nSystem(CatalogApi, \"Catalog Api\", \"Système de gestion des catalogues\") {\n    Container(ProductCatalog, \"Product Catalog\", \"Gère les produits et leurs détails\")\n    Container(BrandCatalog, \"Brand Catalog\", \"Gère les marques\")\n    Container(CategoryCatalog, \"Category Catalog\", \"Gère les catégories\")\n}\nRel(ProductCatalog, BrandCatalog, \"Dépend\")\nRel(ProductCatalog, CategoryCatalog, \"Dépend\")\nSHOW_LEGEND()\n@enduml",
    "langage": "PlantUML",
    "type": "c4_component",
    "tags": ["C4", "Static", "Component"],
    "description": "Diagramme C4 représentant la structure de composants d'une application Catalog Api.",
    "source": "https://github.com/plantuml-stdlib/C4-PlantUML"
  },
  {
    "prompt": "Diagramme C4 de séquence montrant la modification des données dans le contexte de Catalog Api.",
    "code": "@startuml\n!include ..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\.c4s\\\\C4_Sequence.puml\nactor User\nparticipant CatalogApi as API\nparticipant ProductCatalog\nparticipant BrandCatalog\nparticipant CategoryCatalog\n\nUser -> API : Request update product data\nAPI -> ProductCatalog : Update product details\nProductCatalog -> BrandCatalog : Validate brand info\nProductCatalog -> CategoryCatalog : Update category info\nAPI --> User : Response with success\n@enduml",
    "langage": "PlantUML",
    "type": "c4_sequence",
    "tags": ["c4", "sequence", "diagramme", "catalog", "api", "infrastructure"],
    "description": "Diagramme de séquence pour la modification des données dans le contexte du catalog.",
    "source": "@startuml ... @enduml"
  }
  

]
